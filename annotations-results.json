[
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "scripts/push_new_patch.go",
   "Line": 2,
   "Snippet": "// call from project root with\n// go run bin/push_new_patch.go\n\n// goreleaser expects a $GITHUB_TOKEN env variable to be defined"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 310,
   "Snippet": "//        return 0\n//\n//    ALIAS_EVENT_INIT(*event, anchor_copy, mark, mark)\n//\n//    return 1"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 298,
   "Snippet": "//yaml_alias_event_initialize(event *yaml_event_t, anchor *yaml_char_t)\n//{\n//    mark yaml_mark_t = { 0, 0, 0 }\n//    anchor_copy *yaml_char_t = NULL\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 304,
   "Snippet": "//    assert(anchor) // Non-NULL anchor is expected.\n//\n//    if (!yaml_check_utf8(anchor, strlen((char *)anchor))) return 0\n//\n//    anchor_copy = yaml_strdup(anchor)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 299,
   "Snippet": "//{\n//    mark yaml_mark_t = { 0, 0, 0 }\n//    anchor_copy *yaml_char_t = NULL\n//\n//    assert(event) // Non-NULL event object is expected."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 296,
   "Snippet": "//\n//YAML_DECLARE(int)\n//yaml_alias_event_initialize(event *yaml_event_t, anchor *yaml_char_t)\n//{\n//    mark yaml_mark_t = { 0, 0, 0 }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 306,
   "Snippet": "//    if (!yaml_check_utf8(anchor, strlen((char *)anchor))) return 0\n//\n//    anchor_copy = yaml_strdup(anchor)\n//    if (!anchor_copy)\n//        return 0"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 439,
   "Snippet": "//\n//    DOCUMENT_INIT(*document, nodes.start, nodes.end, version_directive_copy,\n//            tag_directives_copy.start, tag_directives_copy.top,\n//            start_implicit, end_implicit, mark, mark)\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 469,
   "Snippet": "//        error yaml_error_type_t\n//    } context\n//    tag_directive *yaml_tag_directive_t\n//\n//    context.error = YAML_NO_ERROR // Eliminate a compiler warning."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 551,
   "Snippet": "//    tag_copy *yaml_char_t = NULL\n//    value_copy *yaml_char_t = NULL\n//    node yaml_node_t\n//\n//    assert(document) // Non-NULL document object is expected."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 411,
   "Snippet": "//        if (!version_directive_copy) goto error\n//        version_directive_copy.major = version_directive.major\n//        version_directive_copy.minor = version_directive.minor\n//    }\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 387,
   "Snippet": "//    } context\n//    struct {\n//        start *yaml_node_t\n//        end *yaml_node_t\n//        top *yaml_node_t"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 388,
   "Snippet": "//    struct {\n//        start *yaml_node_t\n//        end *yaml_node_t\n//        top *yaml_node_t\n//    } nodes = { NULL, NULL, NULL }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 550,
   "Snippet": "//    mark yaml_mark_t = { 0, 0, 0 }\n//    tag_copy *yaml_char_t = NULL\n//    value_copy *yaml_char_t = NULL\n//    node yaml_node_t\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 613,
   "Snippet": "//\n//    if (!yaml_check_utf8(tag, strlen((char *)tag))) goto error\n//    tag_copy = yaml_strdup(tag)\n//    if (!tag_copy) goto error\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 501,
   "Snippet": "//        yaml_free(tag_directive.prefix)\n//    }\n//    yaml_free(document.tag_directives.start)\n//\n//    memset(document, 0, sizeof(yaml_document_t))"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 557,
   "Snippet": "//\n//    if (!tag) {\n//        tag = (yaml_char_t *)YAML_DEFAULT_SCALAR_TAG\n//    }\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 657,
   "Snippet": "//    }\n//\n//    if (!yaml_check_utf8(tag, strlen((char *)tag))) goto error\n//    tag_copy = yaml_strdup(tag)\n//    if (!tag_copy) goto error"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 398,
   "Snippet": "//    } tag_directives_copy = { NULL, NULL, NULL }\n//    value yaml_tag_directive_t = { NULL, NULL }\n//    mark yaml_mark_t = { 0, 0, 0 }\n//\n//    assert(document) // Non-NULL document object is expected."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 722,
   "Snippet": "//            \u0026\u0026 document.nodes.start + mapping \u003c= document.nodes.top)\n//                            // Valid mapping id is required.\n//    assert(document.nodes.start[mapping-1].type == YAML_MAPPING_NODE)\n//                            // A mapping node is required.\n//    assert(key \u003e 0 \u0026\u0026 document.nodes.start + key \u003c= document.nodes.top)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 663,
   "Snippet": "//    if (!STACK_INIT(\u0026context, pairs, INITIAL_STACK_SIZE)) goto error\n//\n//    MAPPING_NODE_INIT(node, tag_copy, pairs.start, pairs.end,\n//            style, mark, mark)\n//    if (!PUSH(\u0026context, document.nodes, node)) goto error"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 681,
   "Snippet": "//\n//YAML_DECLARE(int)\n//yaml_document_append_sequence_item(document *yaml_document_t,\n//        sequence int, item int)\n//{"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 716,
   "Snippet": "//    } context\n//\n//    pair yaml_node_pair_t\n//\n//    assert(document) // Non-NULL document is required."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 479,
   "Snippet": "//        yaml_free(node.tag)\n//        switch (node.type) {\n//            case YAML_SCALAR_NODE:\n//                yaml_free(node.data.scalar.value)\n//                break"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 389,
   "Snippet": "//        start *yaml_node_t\n//        end *yaml_node_t\n//        top *yaml_node_t\n//    } nodes = { NULL, NULL, NULL }\n//    version_directive_copy *yaml_version_directive_t = NULL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 649,
   "Snippet": "//        top *yaml_node_pair_t\n//    } pairs = { NULL, NULL, NULL }\n//    node yaml_node_t\n//\n//    assert(document) // Non-NULL document object is expected."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 494,
   "Snippet": "//    STACK_DEL(\u0026context, document.nodes)\n//\n//    yaml_free(document.version_directive)\n//    for (tag_directive = document.tag_directives.start\n//            tag_directive != document.tag_directives.end"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 541,
   "Snippet": "//\n//YAML_DECLARE(int)\n//yaml_document_add_scalar(document *yaml_document_t,\n//        tag *yaml_char_t, value *yaml_char_t, length int,\n//        style yaml_scalar_style_t)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 581,
   "Snippet": "//error:\n//    yaml_free(tag_copy)\n//    yaml_free(value_copy)\n//\n//    return 0"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 548,
   "Snippet": "//        error yaml_error_type_t\n//    } context\n//    mark yaml_mark_t = { 0, 0, 0 }\n//    tag_copy *yaml_char_t = NULL\n//    value_copy *yaml_char_t = NULL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 685,
   "Snippet": "//{\n//    struct {\n//        error yaml_error_type_t\n//    } context\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 452,
   "Snippet": "//        yaml_free(value.prefix)\n//    }\n//    STACK_DEL(\u0026context, tag_directives_copy)\n//    yaml_free(value.handle)\n//    yaml_free(value.prefix)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 425,
   "Snippet": "//                        strlen((char *)tag_directive.handle)))\n//                goto error\n//            if (!yaml_check_utf8(tag_directive.prefix,\n//                        strlen((char *)tag_directive.prefix)))\n//                goto error"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 377,
   "Snippet": "//\n//YAML_DECLARE(int)\n//yaml_document_initialize(document *yaml_document_t,\n//        version_directive *yaml_version_directive_t,\n//        tag_directives_start *yaml_tag_directive_t,"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 405,
   "Snippet": "//                            // Valid tag directives are expected.\n//\n//    if (!STACK_INIT(\u0026context, nodes, INITIAL_STACK_SIZE)) goto error\n//\n//    if (version_directive) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 379,
   "Snippet": "//yaml_document_initialize(document *yaml_document_t,\n//        version_directive *yaml_version_directive_t,\n//        tag_directives_start *yaml_tag_directive_t,\n//        tag_directives_end *yaml_tag_directive_t,\n//        start_implicit int, end_implicit int)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 592,
   "Snippet": "//YAML_DECLARE(int)\n//yaml_document_add_sequence(document *yaml_document_t,\n//        tag *yaml_char_t, style yaml_sequence_style_t)\n//{\n//    struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 637,
   "Snippet": "//YAML_DECLARE(int)\n//yaml_document_add_mapping(document *yaml_document_t,\n//        tag *yaml_char_t, style yaml_mapping_style_t)\n//{\n//    struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 391,
   "Snippet": "//        top *yaml_node_t\n//    } nodes = { NULL, NULL, NULL }\n//    version_directive_copy *yaml_version_directive_t = NULL\n//    struct {\n//        start *yaml_tag_directive_t"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 560,
   "Snippet": "//    }\n//\n//    if (!yaml_check_utf8(tag, strlen((char *)tag))) goto error\n//    tag_copy = yaml_strdup(tag)\n//    if (!tag_copy) goto error"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 661,
   "Snippet": "//    if (!tag_copy) goto error\n//\n//    if (!STACK_INIT(\u0026context, pairs, INITIAL_STACK_SIZE)) goto error\n//\n//    MAPPING_NODE_INIT(node, tag_copy, pairs.start, pairs.end,"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 395,
   "Snippet": "//        start *yaml_tag_directive_t\n//        end *yaml_tag_directive_t\n//        top *yaml_tag_directive_t\n//    } tag_directives_copy = { NULL, NULL, NULL }\n//    value yaml_tag_directive_t = { NULL, NULL }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 498,
   "Snippet": "//            tag_directive != document.tag_directives.end\n//            tag_directive++) {\n//        yaml_free(tag_directive.handle)\n//        yaml_free(tag_directive.prefix)\n//    }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 496,
   "Snippet": "//    yaml_free(document.version_directive)\n//    for (tag_directive = document.tag_directives.start\n//            tag_directive != document.tag_directives.end\n//            tag_directive++) {\n//        yaml_free(tag_directive.handle)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 604,
   "Snippet": "//        top *yaml_node_item_t\n//    } items = { NULL, NULL, NULL }\n//    node yaml_node_t\n//\n//    assert(document) // Non-NULL document object is expected."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 636,
   "Snippet": "//\n//YAML_DECLARE(int)\n//yaml_document_add_mapping(document *yaml_document_t,\n//        tag *yaml_char_t, style yaml_mapping_style_t)\n//{"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 597,
   "Snippet": "//        error yaml_error_type_t\n//    } context\n//    mark yaml_mark_t = { 0, 0, 0 }\n//    tag_copy *yaml_char_t = NULL\n//    struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 415,
   "Snippet": "//\n//    if (tag_directives_start != tag_directives_end) {\n//        tag_directive *yaml_tag_directive_t\n//        if (!STACK_INIT(\u0026context, tag_directives_copy, INITIAL_STACK_SIZE))\n//            goto error"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 713,
   "Snippet": "//{\n//    struct {\n//        error yaml_error_type_t\n//    } context\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 511,
   "Snippet": "//\n//YAML_DECLARE(yaml_node_t *)\n//yaml_document_get_node(document *yaml_document_t, index int)\n//{\n//    assert(document) // Non-NULL document object is expected."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 428,
   "Snippet": "//                        strlen((char *)tag_directive.prefix)))\n//                goto error\n//            value.handle = yaml_strdup(tag_directive.handle)\n//            value.prefix = yaml_strdup(tag_directive.prefix)\n//            if (!value.handle || !value.prefix) goto error"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 419,
   "Snippet": "//            goto error\n//        for (tag_directive = tag_directives_start\n//                tag_directive != tag_directives_end; tag_directive ++) {\n//            assert(tag_directive.handle)\n//            assert(tag_directive.prefix)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 409,
   "Snippet": "//    if (version_directive) {\n//        version_directive_copy = yaml_malloc(sizeof(yaml_version_directive_t))\n//        if (!version_directive_copy) goto error\n//        version_directive_copy.major = version_directive.major\n//        version_directive_copy.minor = version_directive.minor"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 658,
   "Snippet": "//\n//    if (!yaml_check_utf8(tag, strlen((char *)tag))) goto error\n//    tag_copy = yaml_strdup(tag)\n//    if (!tag_copy) goto error\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 431,
   "Snippet": "//            value.prefix = yaml_strdup(tag_directive.prefix)\n//            if (!value.handle || !value.prefix) goto error\n//            if (!PUSH(\u0026context, tag_directives_copy, value))\n//                goto error\n//            value.handle = NULL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 467,
   "Snippet": "//{\n//    struct {\n//        error yaml_error_type_t\n//    } context\n//    tag_directive *yaml_tag_directive_t"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 393,
   "Snippet": "//    version_directive_copy *yaml_version_directive_t = NULL\n//    struct {\n//        start *yaml_tag_directive_t\n//        end *yaml_tag_directive_t\n//        top *yaml_tag_directive_t"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 381,
   "Snippet": "//        tag_directives_start *yaml_tag_directive_t,\n//        tag_directives_end *yaml_tag_directive_t,\n//        start_implicit int, end_implicit int)\n//{\n//    struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 598,
   "Snippet": "//    } context\n//    mark yaml_mark_t = { 0, 0, 0 }\n//    tag_copy *yaml_char_t = NULL\n//    struct {\n//        start *yaml_node_item_t"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 402,
   "Snippet": "//    assert(document) // Non-NULL document object is expected.\n//    assert((tag_directives_start \u0026\u0026 tag_directives_end) ||\n//            (tag_directives_start == tag_directives_end))\n//                            // Valid tag directives are expected.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 549,
   "Snippet": "//    } context\n//    mark yaml_mark_t = { 0, 0, 0 }\n//    tag_copy *yaml_char_t = NULL\n//    value_copy *yaml_char_t = NULL\n//    node yaml_node_t"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 482,
   "Snippet": "//                yaml_free(node.data.scalar.value)\n//                break\n//            case YAML_SEQUENCE_NODE:\n//                STACK_DEL(\u0026context, node.data.sequence.items)\n//                break"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 600,
   "Snippet": "//    tag_copy *yaml_char_t = NULL\n//    struct {\n//        start *yaml_node_item_t\n//        end *yaml_node_item_t\n//        top *yaml_node_item_t"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 384,
   "Snippet": "//{\n//    struct {\n//        error yaml_error_type_t\n//    } context\n//    struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 448,
   "Snippet": "//    yaml_free(version_directive_copy)\n//    while (!STACK_EMPTY(\u0026context, tag_directives_copy)) {\n//        value yaml_tag_directive_t = POP(\u0026context, tag_directives_copy)\n//        yaml_free(value.handle)\n//        yaml_free(value.prefix)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 626,
   "Snippet": "//error:\n//    STACK_DEL(\u0026context, items)\n//    yaml_free(tag_copy)\n//\n//    return 0"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 495,
   "Snippet": "//\n//    yaml_free(document.version_directive)\n//    for (tag_directive = document.tag_directives.start\n//            tag_directive != document.tag_directives.end\n//            tag_directive++) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 499,
   "Snippet": "//            tag_directive++) {\n//        yaml_free(tag_directive.handle)\n//        yaml_free(tag_directive.prefix)\n//    }\n//    yaml_free(document.tag_directives.start)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 595,
   "Snippet": "//{\n//    struct {\n//        error yaml_error_type_t\n//    } context\n//    mark yaml_mark_t = { 0, 0, 0 }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 471,
   "Snippet": "//    tag_directive *yaml_tag_directive_t\n//\n//    context.error = YAML_NO_ERROR // Eliminate a compiler warning.\n//\n//    assert(document) // Non-NULL document object is expected."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 503,
   "Snippet": "//    yaml_free(document.tag_directives.start)\n//\n//    memset(document, 0, sizeof(yaml_document_t))\n//}\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 602,
   "Snippet": "//        start *yaml_node_item_t\n//        end *yaml_node_item_t\n//        top *yaml_node_item_t\n//    } items = { NULL, NULL, NULL }\n//    node yaml_node_t"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 546,
   "Snippet": "//{\n//    struct {\n//        error yaml_error_type_t\n//    } context\n//    mark yaml_mark_t = { 0, 0, 0 }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 446,
   "Snippet": "//error:\n//    STACK_DEL(\u0026context, nodes)\n//    yaml_free(version_directive_copy)\n//    while (!STACK_EMPTY(\u0026context, tag_directives_copy)) {\n//        value yaml_tag_directive_t = POP(\u0026context, tag_directives_copy)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 643,
   "Snippet": "//    } context\n//    mark yaml_mark_t = { 0, 0, 0 }\n//    tag_copy *yaml_char_t = NULL\n//    struct {\n//        start *yaml_node_pair_t"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 440,
   "Snippet": "//    DOCUMENT_INIT(*document, nodes.start, nodes.end, version_directive_copy,\n//            tag_directives_copy.start, tag_directives_copy.top,\n//            start_implicit, end_implicit, mark, mark)\n//\n//    return 1"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 709,
   "Snippet": "//\n//YAML_DECLARE(int)\n//yaml_document_append_mapping_pair(document *yaml_document_t,\n//        mapping int, key int, value int)\n//{"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 380,
   "Snippet": "//        version_directive *yaml_version_directive_t,\n//        tag_directives_start *yaml_tag_directive_t,\n//        tag_directives_end *yaml_tag_directive_t,\n//        start_implicit int, end_implicit int)\n//{"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 569,
   "Snippet": "//\n//    if (!yaml_check_utf8(value, length)) goto error\n//    value_copy = yaml_malloc(length+1)\n//    if (!value_copy) goto error\n//    memcpy(value_copy, value, length)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 642,
   "Snippet": "//        error yaml_error_type_t\n//    } context\n//    mark yaml_mark_t = { 0, 0, 0 }\n//    tag_copy *yaml_char_t = NULL\n//    struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 568,
   "Snippet": "//    }\n//\n//    if (!yaml_check_utf8(value, length)) goto error\n//    value_copy = yaml_malloc(length+1)\n//    if (!value_copy) goto error"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 645,
   "Snippet": "//    tag_copy *yaml_char_t = NULL\n//    struct {\n//        start *yaml_node_pair_t\n//        end *yaml_node_pair_t\n//        top *yaml_node_pair_t"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 378,
   "Snippet": "//YAML_DECLARE(int)\n//yaml_document_initialize(document *yaml_document_t,\n//        version_directive *yaml_version_directive_t,\n//        tag_directives_start *yaml_tag_directive_t,\n//        tag_directives_end *yaml_tag_directive_t,"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 618,
   "Snippet": "//    if (!STACK_INIT(\u0026context, items, INITIAL_STACK_SIZE)) goto error\n//\n//    SEQUENCE_NODE_INIT(node, tag_copy, items.start, items.end,\n//            style, mark, mark)\n//    if (!PUSH(\u0026context, document.nodes, node)) goto error"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 609,
   "Snippet": "//\n//    if (!tag) {\n//        tag = (yaml_char_t *)YAML_DEFAULT_SEQUENCE_TAG\n//    }\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 647,
   "Snippet": "//        start *yaml_node_pair_t\n//        end *yaml_node_pair_t\n//        top *yaml_node_pair_t\n//    } pairs = { NULL, NULL, NULL }\n//    node yaml_node_t"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 654,
   "Snippet": "//\n//    if (!tag) {\n//        tag = (yaml_char_t *)YAML_DEFAULT_MAPPING_TAG\n//    }\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 464,
   "Snippet": "//\n//YAML_DECLARE(void)\n//yaml_document_delete(document *yaml_document_t)\n//{\n//    struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 476,
   "Snippet": "//\n//    while (!STACK_EMPTY(\u0026context, document.nodes)) {\n//        node yaml_node_t = POP(\u0026context, document.nodes)\n//        yaml_free(node.tag)\n//        switch (node.type) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 561,
   "Snippet": "//\n//    if (!yaml_check_utf8(tag, strlen((char *)tag))) goto error\n//    tag_copy = yaml_strdup(tag)\n//    if (!tag_copy) goto error\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 429,
   "Snippet": "//                goto error\n//            value.handle = yaml_strdup(tag_directive.handle)\n//            value.prefix = yaml_strdup(tag_directive.prefix)\n//            if (!value.handle || !value.prefix) goto error\n//            if (!PUSH(\u0026context, tag_directives_copy, value))"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 601,
   "Snippet": "//    struct {\n//        start *yaml_node_item_t\n//        end *yaml_node_item_t\n//        top *yaml_node_item_t\n//    } items = { NULL, NULL, NULL }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 526,
   "Snippet": "//\n//YAML_DECLARE(yaml_node_t *)\n//yaml_document_get_root_node(document *yaml_document_t)\n//{\n//    assert(document) // Non-NULL document object is expected."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 574,
   "Snippet": "//    value_copy[length] = '\\0'\n//\n//    SCALAR_NODE_INIT(node, tag_copy, value_copy, length, style, mark, mark)\n//    if (!PUSH(\u0026context, document.nodes, node)) goto error\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 640,
   "Snippet": "//{\n//    struct {\n//        error yaml_error_type_t\n//    } context\n//    mark yaml_mark_t = { 0, 0, 0 }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 416,
   "Snippet": "//    if (tag_directives_start != tag_directives_end) {\n//        tag_directive *yaml_tag_directive_t\n//        if (!STACK_INIT(\u0026context, tag_directives_copy, INITIAL_STACK_SIZE))\n//            goto error\n//        for (tag_directive = tag_directives_start"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 671,
   "Snippet": "//error:\n//    STACK_DEL(\u0026context, pairs)\n//    yaml_free(tag_copy)\n//\n//    return 0"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 401,
   "Snippet": "//\n//    assert(document) // Non-NULL document object is expected.\n//    assert((tag_directives_start \u0026\u0026 tag_directives_end) ||\n//            (tag_directives_start == tag_directives_end))\n//                            // Valid tag directives are expected."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 408,
   "Snippet": "//\n//    if (version_directive) {\n//        version_directive_copy = yaml_malloc(sizeof(yaml_version_directive_t))\n//        if (!version_directive_copy) goto error\n//        version_directive_copy.major = version_directive.major"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 591,
   "Snippet": "//\n//YAML_DECLARE(int)\n//yaml_document_add_sequence(document *yaml_document_t,\n//        tag *yaml_char_t, style yaml_sequence_style_t)\n//{"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 510,
   "Snippet": "// */\n//\n//YAML_DECLARE(yaml_node_t *)\n//yaml_document_get_node(document *yaml_document_t, index int)\n//{"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 646,
   "Snippet": "//    struct {\n//        start *yaml_node_pair_t\n//        end *yaml_node_pair_t\n//        top *yaml_node_pair_t\n//    } pairs = { NULL, NULL, NULL }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 616,
   "Snippet": "//    if (!tag_copy) goto error\n//\n//    if (!STACK_INIT(\u0026context, items, INITIAL_STACK_SIZE)) goto error\n//\n//    SEQUENCE_NODE_INIT(node, tag_copy, items.start, items.end,"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 396,
   "Snippet": "//        end *yaml_tag_directive_t\n//        top *yaml_tag_directive_t\n//    } tag_directives_copy = { NULL, NULL, NULL }\n//    value yaml_tag_directive_t = { NULL, NULL }\n//    mark yaml_mark_t = { 0, 0, 0 }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 692,
   "Snippet": "//            \u0026\u0026 document.nodes.start + sequence \u003c= document.nodes.top)\n//                            // Valid sequence id is required.\n//    assert(document.nodes.start[sequence-1].type == YAML_SEQUENCE_NODE)\n//                            // A sequence node is required.\n//    assert(item \u003e 0 \u0026\u0026 document.nodes.start + item \u003c= document.nodes.top)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 438,
   "Snippet": "//    }\n//\n//    DOCUMENT_INIT(*document, nodes.start, nodes.end, version_directive_copy,\n//            tag_directives_copy.start, tag_directives_copy.top,\n//            start_implicit, end_implicit, mark, mark)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 525,
   "Snippet": "// */\n//\n//YAML_DECLARE(yaml_node_t *)\n//yaml_document_get_root_node(document *yaml_document_t)\n//{"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 418,
   "Snippet": "//        if (!STACK_INIT(\u0026context, tag_directives_copy, INITIAL_STACK_SIZE))\n//            goto error\n//        for (tag_directive = tag_directives_start\n//                tag_directive != tag_directives_end; tag_directive ++) {\n//            assert(tag_directive.handle)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 410,
   "Snippet": "//        version_directive_copy = yaml_malloc(sizeof(yaml_version_directive_t))\n//        if (!version_directive_copy) goto error\n//        version_directive_copy.major = version_directive.major\n//        version_directive_copy.minor = version_directive.minor\n//    }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 485,
   "Snippet": "//                STACK_DEL(\u0026context, node.data.sequence.items)\n//                break\n//            case YAML_MAPPING_NODE:\n//                STACK_DEL(\u0026context, node.data.mapping.pairs)\n//                break"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 612,
   "Snippet": "//    }\n//\n//    if (!yaml_check_utf8(tag, strlen((char *)tag))) goto error\n//    tag_copy = yaml_strdup(tag)\n//    if (!tag_copy) goto error"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 543,
   "Snippet": "//yaml_document_add_scalar(document *yaml_document_t,\n//        tag *yaml_char_t, value *yaml_char_t, length int,\n//        style yaml_scalar_style_t)\n//{\n//    struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 422,
   "Snippet": "//            assert(tag_directive.handle)\n//            assert(tag_directive.prefix)\n//            if (!yaml_check_utf8(tag_directive.handle,\n//                        strlen((char *)tag_directive.handle)))\n//                goto error"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 447,
   "Snippet": "//    STACK_DEL(\u0026context, nodes)\n//    yaml_free(version_directive_copy)\n//    while (!STACK_EMPTY(\u0026context, tag_directives_copy)) {\n//        value yaml_tag_directive_t = POP(\u0026context, tag_directives_copy)\n//        yaml_free(value.handle)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 394,
   "Snippet": "//    struct {\n//        start *yaml_tag_directive_t\n//        end *yaml_tag_directive_t\n//        top *yaml_tag_directive_t\n//    } tag_directives_copy = { NULL, NULL, NULL }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 542,
   "Snippet": "//YAML_DECLARE(int)\n//yaml_document_add_scalar(document *yaml_document_t,\n//        tag *yaml_char_t, value *yaml_char_t, length int,\n//        style yaml_scalar_style_t)\n//{"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 414,
   "Snippet": "//    }\n//\n//    if (tag_directives_start != tag_directives_end) {\n//        tag_directive *yaml_tag_directive_t\n//        if (!STACK_INIT(\u0026context, tag_directives_copy, INITIAL_STACK_SIZE))"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 580,
   "Snippet": "//\n//error:\n//    yaml_free(tag_copy)\n//    yaml_free(value_copy)\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 397,
   "Snippet": "//        top *yaml_tag_directive_t\n//    } tag_directives_copy = { NULL, NULL, NULL }\n//    value yaml_tag_directive_t = { NULL, NULL }\n//    mark yaml_mark_t = { 0, 0, 0 }\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 217,
   "Snippet": "//{\n//    yaml_char_t *end = start+length;\n//    yaml_char_t *pointer = start;\n//\n//    while (pointer \u003c end) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 216,
   "Snippet": "//yaml_check_utf8(yaml_char_t *start, size_t length)\n//{\n//    yaml_char_t *end = start+length;\n//    yaml_char_t *pointer = start;\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 172,
   "Snippet": "//\n//YAML_DECLARE(void)\n//yaml_token_delete(yaml_token_t *token)\n//{\n//    assert(token);  // Non-NULL token object expected."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 187,
   "Snippet": "//            break;\n//\n//        case YAML_ANCHOR_TOKEN:\n//            yaml_free(token.data.anchor.value);\n//            break;"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 204,
   "Snippet": "//    }\n//\n//    memset(token, 0, sizeof(yaml_token_t));\n//}\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 179,
   "Snippet": "//    {\n//        case YAML_TAG_DIRECTIVE_TOKEN:\n//            yaml_free(token.data.tag_directive.handle);\n//            yaml_free(token.data.tag_directive.prefix);\n//            break;"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 178,
   "Snippet": "//    switch (token.type)\n//    {\n//        case YAML_TAG_DIRECTIVE_TOKEN:\n//            yaml_free(token.data.tag_directive.handle);\n//            yaml_free(token.data.tag_directive.prefix);"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 191,
   "Snippet": "//            break;\n//\n//        case YAML_TAG_TOKEN:\n//            yaml_free(token.data.tag.handle);\n//            yaml_free(token.data.tag.suffix);"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 183,
   "Snippet": "//            break;\n//\n//        case YAML_ALIAS_TOKEN:\n//            yaml_free(token.data.alias.value);\n//            break;"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 180,
   "Snippet": "//        case YAML_TAG_DIRECTIVE_TOKEN:\n//            yaml_free(token.data.tag_directive.handle);\n//            yaml_free(token.data.tag_directive.prefix);\n//            break;\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 196,
   "Snippet": "//            break;\n//\n//        case YAML_SCALAR_TOKEN:\n//            yaml_free(token.data.scalar.value);\n//            break;"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 214,
   "Snippet": "//\n//static int\n//yaml_check_utf8(yaml_char_t *start, size_t length)\n//{\n//    yaml_char_t *end = start+length;"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 8,
   "Snippet": "\nfunc yaml_insert_token(parser *yaml_parser_t, pos int, token *yaml_token_t) {\n\t//fmt.Println(\"yaml_insert_token\", \"pos:\", pos, \"typ:\", token.typ, \"head:\", parser.tokens_head, \"len:\", len(parser.tokens))\n\n\t// Check if we can move the queue at the beginning of the buffer."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlprivateh.go",
   "Line": 97,
   "Snippet": "// Check if the character at the specified position is blank (space or tab).\nfunc is_blank(b []byte, i int) bool {\n\t//return is_space(b, i) || is_tab(b, i)\n\treturn b[i] == ' ' || b[i] == '\\t'\n}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlprivateh.go",
   "Line": 116,
   "Snippet": "// Check if the character is a line break or NUL.\nfunc is_breakz(b []byte, i int) bool {\n\t//return is_break(b, i) || is_z(b, i)\n\treturn (        // is_break:\n\tb[i] == '\\r' || // CR (#xD)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlprivateh.go",
   "Line": 143,
   "Snippet": "// Check if the character is a line break, space, tab, or NUL.\nfunc is_blankz(b []byte, i int) bool {\n\t//return is_blank(b, i) || is_breakz(b, i)\n\treturn ( // is_blank:\n\tb[i] == ' ' || b[i] == '\\t' ||"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlprivateh.go",
   "Line": 129,
   "Snippet": "// Check if the character is a line break, space, or NUL.\nfunc is_spacez(b []byte, i int) bool {\n\t//return is_space(b, i) || is_breakz(b, i)\n\treturn ( // is_space:\n\tb[i] == ' ' ||"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 360,
   "Snippet": "//                                            ******\nfunc yaml_parser_parse_node(parser *yaml_parser_t, event *yaml_event_t, block, indentless_sequence bool) bool {\n\t//defer trace(\"yaml_parser_parse_node\", \"block:\", block, \"indentless_sequence:\", indentless_sequence)()\n\n\ttoken := peek_token(parser)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 94,
   "Snippet": "// State dispatcher.\nfunc yaml_parser_state_machine(parser *yaml_parser_t, event *yaml_event_t) bool {\n\t//trace(\"yaml_parser_state_machine\", \"state:\", parser.state.String())\n\n\tswitch parser.state {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 16,
   "Snippet": "//                          | properties (block_content | indentless_block_sequence)?\n//                          | block_content\n//                          | indentless_block_sequence\n// block_node           ::= ALIAS\n//                          | properties block_content?"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 26,
   "Snippet": "// block_content        ::= block_collection | flow_collection | SCALAR\n// flow_content         ::= flow_collection | SCALAR\n// block_collection     ::= block_sequence | block_mapping\n// flow_collection      ::= flow_sequence | flow_mapping\n// block_sequence       ::= BLOCK-SEQUENCE-START (BLOCK-ENTRY block_node?)* BLOCK-END"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 36,
   "Snippet": "// flow_sequence        ::= FLOW-SEQUENCE-START\n//                          (flow_sequence_entry FLOW-ENTRY)*\n//                          flow_sequence_entry?\n//                          FLOW-SEQUENCE-END\n// flow_sequence_entry  ::= flow_node | KEY flow_node? (VALUE flow_node?)?"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 40,
   "Snippet": "// flow_sequence_entry  ::= flow_node | KEY flow_node? (VALUE flow_node?)?\n// flow_mapping         ::= FLOW-MAPPING-START\n//                          (flow_mapping_entry FLOW-ENTRY)*\n//                          flow_mapping_entry?\n//                          FLOW-MAPPING-END"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 35,
   "Snippet": "//                          BLOCK-END\n// flow_sequence        ::= FLOW-SEQUENCE-START\n//                          (flow_sequence_entry FLOW-ENTRY)*\n//                          flow_sequence_entry?\n//                          FLOW-SEQUENCE-END"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 43,
   "Snippet": "//                          flow_mapping_entry?\n//                          FLOW-MAPPING-END\n// flow_mapping_entry   ::= flow_node | KEY flow_node? (VALUE flow_node?)?\n\n// Peek the next token in the token queue."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 31,
   "Snippet": "// indentless_sequence  ::= (BLOCK-ENTRY block_node?)+\n// block_mapping        ::= BLOCK-MAPPING_START\n//                          ((KEY block_node_or_indentless_sequence?)?\n//                          (VALUE block_node_or_indentless_sequence?)?)*\n//                          BLOCK-END"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 29,
   "Snippet": "// flow_collection      ::= flow_sequence | flow_mapping\n// block_sequence       ::= BLOCK-SEQUENCE-START (BLOCK-ENTRY block_node?)* BLOCK-END\n// indentless_sequence  ::= (BLOCK-ENTRY block_node?)+\n// block_mapping        ::= BLOCK-MAPPING_START\n//                          ((KEY block_node_or_indentless_sequence?)?"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 10,
   "Snippet": "//\n// stream               ::= STREAM-START implicit_document? explicit_document* STREAM-END\n// implicit_document    ::= block_node DOCUMENT-END*\n// explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*\n// block_node_or_indentless_sequence    ::="
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 11,
   "Snippet": "// stream               ::= STREAM-START implicit_document? explicit_document* STREAM-END\n// implicit_document    ::= block_node DOCUMENT-END*\n// explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*\n// block_node_or_indentless_sequence    ::=\n//                          ALIAS"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 30,
   "Snippet": "// block_sequence       ::= BLOCK-SEQUENCE-START (BLOCK-ENTRY block_node?)* BLOCK-END\n// indentless_sequence  ::= (BLOCK-ENTRY block_node?)+\n// block_mapping        ::= BLOCK-MAPPING_START\n//                          ((KEY block_node_or_indentless_sequence?)?\n//                          (VALUE block_node_or_indentless_sequence?)?)*"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 28,
   "Snippet": "// block_collection     ::= block_sequence | block_mapping\n// flow_collection      ::= flow_sequence | flow_mapping\n// block_sequence       ::= BLOCK-SEQUENCE-START (BLOCK-ENTRY block_node?)* BLOCK-END\n// indentless_sequence  ::= (BLOCK-ENTRY block_node?)+\n// block_mapping        ::= BLOCK-MAPPING_START"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 32,
   "Snippet": "// block_mapping        ::= BLOCK-MAPPING_START\n//                          ((KEY block_node_or_indentless_sequence?)?\n//                          (VALUE block_node_or_indentless_sequence?)?)*\n//                          BLOCK-END\n// flow_sequence        ::= FLOW-SEQUENCE-START"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 41,
   "Snippet": "// flow_mapping         ::= FLOW-MAPPING-START\n//                          (flow_mapping_entry FLOW-ENTRY)*\n//                          flow_mapping_entry?\n//                          FLOW-MAPPING-END\n// flow_mapping_entry   ::= flow_node | KEY flow_node? (VALUE flow_node?)?"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 38,
   "Snippet": "//                          flow_sequence_entry?\n//                          FLOW-SEQUENCE-END\n// flow_sequence_entry  ::= flow_node | KEY flow_node? (VALUE flow_node?)?\n// flow_mapping         ::= FLOW-MAPPING-START\n//                          (flow_mapping_entry FLOW-ENTRY)*"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 25,
   "Snippet": "// properties           ::= TAG ANCHOR? | ANCHOR TAG?\n// block_content        ::= block_collection | flow_collection | SCALAR\n// flow_content         ::= flow_collection | SCALAR\n// block_collection     ::= block_sequence | block_mapping\n// flow_collection      ::= flow_sequence | flow_mapping"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 12,
   "Snippet": "// implicit_document    ::= block_node DOCUMENT-END*\n// explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*\n// block_node_or_indentless_sequence    ::=\n//                          ALIAS\n//                          | properties (block_content | indentless_block_sequence)?"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 14,
   "Snippet": "// block_node_or_indentless_sequence    ::=\n//                          ALIAS\n//                          | properties (block_content | indentless_block_sequence)?\n//                          | block_content\n//                          | indentless_block_sequence"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 9,
   "Snippet": "// The parser implements the following grammar:\n//\n// stream               ::= STREAM-START implicit_document? explicit_document* STREAM-END\n// implicit_document    ::= block_node DOCUMENT-END*\n// explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 27,
   "Snippet": "// flow_content         ::= flow_collection | SCALAR\n// block_collection     ::= block_sequence | block_mapping\n// flow_collection      ::= flow_sequence | flow_mapping\n// block_sequence       ::= BLOCK-SEQUENCE-START (BLOCK-ENTRY block_node?)* BLOCK-END\n// indentless_sequence  ::= (BLOCK-ENTRY block_node?)+"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 24,
   "Snippet": "//                          | flow_content\n// properties           ::= TAG ANCHOR? | ANCHOR TAG?\n// block_content        ::= block_collection | flow_collection | SCALAR\n// flow_content         ::= flow_collection | SCALAR\n// block_collection     ::= block_sequence | block_mapping"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/scannerc.go",
   "Line": 2691,
   "Snippet": "\t}\n\n\t// Note that we change the 'simple_key_allowed' flag.\n\tif leading_blanks {\n\t\tparser.simple_key_allowed = true"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "pkg/updates/updates.go",
   "Line": 220,
   "Snippet": "}\n\n// example: https://github.com/jesseduffield/lazygit/releases/download/v0.1.73/lazygit_0.1.73_Darwin_x86_64.tar.gz\nfunc (u *Updater) getBinaryUrl(newVersion string) (string, error) {\n\textension := \"tar.gz\""
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/shibukawa/configdir/config.go",
   "Line": 11,
   "Snippet": "// User wide configuration folders:\n//\n//   - Windows: %APPDATA% (C:\\Users\\\u003cUser\u003e\\AppData\\Roaming)\n//   - Linux/BSDs: ${XDG_CONFIG_HOME} (${HOME}/.config)\n//   - MacOSX: \"${HOME}/Library/Application Support\""
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/shibukawa/configdir/config.go",
   "Line": 17,
   "Snippet": "// User wide cache folders:\n//\n//   - Windows: %LOCALAPPDATA% (C:\\Users\\\u003cUser\u003e\\AppData\\Local)\n//   - Linux/BSDs: ${XDG_CACHE_HOME} (${HOME}/.cache)\n//   - MacOSX: \"${HOME}/Library/Caches\""
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/shibukawa/configdir/config.go",
   "Line": 18,
   "Snippet": "//\n//   - Windows: %LOCALAPPDATA% (C:\\Users\\\u003cUser\u003e\\AppData\\Local)\n//   - Linux/BSDs: ${XDG_CACHE_HOME} (${HOME}/.cache)\n//   - MacOSX: \"${HOME}/Library/Caches\"\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/shibukawa/configdir/config.go",
   "Line": 12,
   "Snippet": "//\n//   - Windows: %APPDATA% (C:\\Users\\\u003cUser\u003e\\AppData\\Roaming)\n//   - Linux/BSDs: ${XDG_CONFIG_HOME} (${HOME}/.config)\n//   - MacOSX: \"${HOME}/Library/Application Support\"\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/shibukawa/configdir/config.go",
   "Line": 6,
   "Snippet": "//\n//   - Windows: %PROGRAMDATA% (C:\\ProgramData)\n//   - Linux/BSDs: ${XDG_CONFIG_DIRS} (/etc/xdg)\n//   - MacOSX: \"/Library/Application Support\"\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/cast/cast.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2014 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Use of this source code is governed by an MIT-style"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/cast/caste.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2014 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Use of this source code is governed by an MIT-style"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/jwalterweatherman/notepad.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2016 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Use of this source code is governed by an MIT-style"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/jwalterweatherman/default_notepad.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2016 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Use of this source code is governed by an MIT-style"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/jwalterweatherman/log_counter.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2016 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Use of this source code is governed by an MIT-style"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/util.go",
   "Line": 3,
   "Snippet": "// Copyright ©2015 Steve Francia \u003cspf@spf13.com\u003e\n// Portions Copyright ©2015 The Hugo Authors\n// Portions Copyright 2016-present Bjørn Erik Pedersen \u003cbjorn.erik.pedersen@gmail.com\u003e\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/util.go",
   "Line": 1,
   "Snippet": "\n// Copyright ©2015 Steve Francia \u003cspf@spf13.com\u003e\n// Portions Copyright ©2015 The Hugo Authors\n// Portions Copyright 2016-present Bjørn Erik Pedersen \u003cbjorn.erik.pedersen@gmail.com\u003e"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/afero.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2014 Steve Francia \u003cspf@spf13.com\u003e.\n// Copyright 2013 tsuru authors. All rights reserved.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/lstater.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2018 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/match.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2014 Steve Francia \u003cspf@spf13.com\u003e.\n// Copyright 2009 The Go Authors. All rights reserved.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/os.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2014 Steve Francia \u003cspf@spf13.com\u003e.\n// Copyright 2013 tsuru authors. All rights reserved.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/ioutil.go",
   "Line": 2,
   "Snippet": "// Copyright ©2015 The Go Authors\n// Copyright ©2015 Steve Francia \u003cspf@spf13.com\u003e\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/httpFs.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2014 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/const_win_unix.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2016 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/memmap.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2014 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/path.go",
   "Line": 2,
   "Snippet": "// Copyright ©2015 The Go Authors\n// Copyright ©2015 Steve Francia \u003cspf@spf13.com\u003e\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/const_bsds.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2016 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/viper/util.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2014 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Use of this source code is governed by an MIT-style"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/viper/viper.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2014 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Use of this source code is governed by an MIT-style"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/sirupsen/logrus/alt_exit.go",
   "Line": 6,
   "Snippet": "// https://github.com/tebeka/atexit package governed by the following license:\n//\n// Copyright (c) 2012 Miki Tebeka \u003cmiki.tebeka@gmail.com\u003e.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/fsnotify/fsnotify/inotify.go",
   "Line": 148,
   "Snippet": "\t// the inotify will already have been removed.\n\t// watches and pathes are deleted in ignoreLinux() implicitly and asynchronously\n\t// by calling inotify_rm_watch() below. e.g. readEvents() goroutine receives IN_IGNORE\n\t// so that EINVAL means that the wd is being rm_watch()ed or its file removed\n\t// by another thread and we have not received IN_IGNORE event."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/fsnotify/fsnotify/inotify.go",
   "Line": 145,
   "Snippet": "\tdelete(w.watches, name)\n\n\t// inotify_rm_watch will return EINVAL if the file has been deleted;\n\t// the inotify will already have been removed.\n\t// watches and pathes are deleted in ignoreLinux() implicitly and asynchronously"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/fsnotify/fsnotify/inotify.go",
   "Line": 263,
   "Snippet": "\t\t\tw.mu.Lock()\n\t\t\tname, ok := w.paths[int(raw.Wd)]\n\t\t\t// IN_DELETE_SELF occurs when the file/directory being watched is removed.\n\t\t\t// This is a sign to clean up the maps, otherwise we are no longer in sync\n\t\t\t// with the inotify kernel state which has already deleted the watch"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/fsnotify/fsnotify/inotify.go",
   "Line": 158,
   "Snippet": "\t\t// EINVAL, which is when fd is not an inotify descriptor or wd is not a valid watch descriptor.\n\t\t// Watch descriptors are invalidated when they are removed explicitly or implicitly;\n\t\t// explicitly by inotify_rm_watch, implicitly when the file they are watching is deleted.\n\t\treturn errno\n\t}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/src-d/gcfg/doc.go",
   "Line": 52,
   "Snippet": "// as the key.\n// It is possible to provide default values for subsections in the section\n// \"default-\u003csectionname\u003e\" (or by setting values in the corresponding struct\n// field \"Default_\u003csectionname\u003e\").\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/src-d/gcfg/doc.go",
   "Line": 53,
   "Snippet": "// It is possible to provide default values for subsections in the section\n// \"default-\u003csectionname\u003e\" (or by setting values in the corresponding struct\n// field \"Default_\u003csectionname\u003e\").\n//\n// The functions in this package panic if config is not a pointer to a struct,"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/stretchr/testify/assert/forward_assertions.go",
   "Line": 16,
   "Snippet": "}\n\n//go:generate go run ../_codegen/main.go -output-package=assert -template=assertion_forward.go.tmpl -include-format-funcs\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/stretchr/testify/assert/assertions.go",
   "Line": 23,
   "Snippet": ")\n\n//go:generate go run ../_codegen/main.go -output-package=assert -template=assertion_format.go.tmpl\n\n// TestingT is an interface wrapper around *testing.T"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/mem/dir.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2014 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/mem/file.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2015 Steve Francia \u003cspf@spf13.com\u003e.\n// Copyright 2013 tsuru authors. All rights reserved.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/afero/mem/dirmap.go",
   "Line": 1,
   "Snippet": "\n// Copyright © 2015 Steve Francia \u003cspf@spf13.com\u003e.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/emirpasic/gods/trees/trees.go",
   "Line": 9,
   "Snippet": "// In computer science, a tree is a widely used abstract data type (ADT) or data structure implementing this ADT that simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node, represented as a set of linked nodes.\n//\n// Reference: https://en.wikipedia.org/wiki/Tree_%28data_structure%29\npackage trees\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/emirpasic/gods/lists/lists.go",
   "Line": 9,
   "Snippet": "// In computer science, a list or sequence is an abstract data type that represents an ordered sequence of values, where the same value may occur more than once. An instance of a list is a computer representation of the mathematical concept of a finite sequence; the (potentially) infinite analog of a list is a stream.  Lists are a basic example of containers, as they contain other values. If the same value occurs multiple times, each occurrence is considered a distinct item.\n//\n// Reference: https://en.wikipedia.org/wiki/List_%28abstract_data_type%29\npackage lists\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/davecgh/go-spew/spew/dump.go",
   "Line": 1,
   "Snippet": "\n/*\n * Copyright (c) 2013-2016 Dave Collins \u003cdave@davec.name\u003e\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\npackage spew"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/davecgh/go-spew/spew/spew.go",
   "Line": 1,
   "Snippet": "\n/*\n * Copyright (c) 2013-2016 Dave Collins \u003cdave@davec.name\u003e\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\npackage spew"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/davecgh/go-spew/spew/doc.go",
   "Line": 1,
   "Snippet": "\n/*\n * Copyright (c) 2013-2016 Dave Collins \u003cdave@davec.name\u003e\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/davecgh/go-spew/spew/doc.go",
   "Line": 17,
   "Snippet": " */\n\n/*\nPackage spew implements a deep pretty printer for Go data structures to aid in\ndebugging.\n\nA quick overview of the additional features spew provides over the built-in\nprinting facilities for Go data types are as follows:\n\n\t* Pointers are dereferenced and followed\n\t* Circular data structures are detected and handled properly\n\t* Custom Stringer/error interfaces are optionally invoked, including\n\t  on unexported types\n\t* Custom types which only implement the Stringer/error interfaces via\n\t  a pointer receiver are optionally invoked when passing non-pointer\n\t  variables\n\t* Byte arrays and slices are dumped like the hexdump -C command which\n\t  includes offsets, byte values in hex, and ASCII output (only when using\n\t  Dump style)\n\nThere are two different approaches spew allows for dumping Go data structures:\n\n\t* Dump style which prints with newlines, customizable indentation,\n\t  and additional debug information such as types and all pointer addresses\n\t  used to indirect to the final value\n\t* A custom Formatter interface that integrates cleanly with the standard fmt\n\t  package and replaces %v, %+v, %#v, and %#+v to provide inline printing\n\t  similar to the default %v while providing the additional functionality\n\t  outlined above and passing unsupported format verbs such as %x and %q\n\t  along to fmt\n\nQuick Start\n\nThis section demonstrates how to quickly get started with spew.  See the\nsections below for further details on formatting and configuration options.\n\nTo dump a variable with full newlines, indentation, type, and pointer\ninformation use Dump, Fdump, or Sdump:\n\tspew.Dump(myVar1, myVar2, ...)\n\tspew.Fdump(someWriter, myVar1, myVar2, ...)\n\tstr := spew.Sdump(myVar1, myVar2, ...)\n\nAlternatively, if you would prefer to use format strings with a compacted inline\nprinting style, use the convenience wrappers Printf, Fprintf, etc with\n%v (most compact), %+v (adds pointer addresses), %#v (adds types), or\n%#+v (adds types and pointer addresses):\n\tspew.Printf(\"myVar1: %v -- myVar2: %+v\", myVar1, myVar2)\n\tspew.Printf(\"myVar3: %#v -- myVar4: %#+v\", myVar3, myVar4)\n\tspew.Fprintf(someWriter, \"myVar1: %v -- myVar2: %+v\", myVar1, myVar2)\n\tspew.Fprintf(someWriter, \"myVar3: %#v -- myVar4: %#+v\", myVar3, myVar4)\n\nConfiguration Options\n\nConfiguration of spew is handled by fields in the ConfigState type.  For\nconvenience, all of the top-level functions use a global state available\nvia the spew.Config global.\n\nIt is also possible to create a ConfigState instance that provides methods\nequivalent to the top-level functions.  This allows concurrent configuration\noptions.  See the ConfigState documentation for more details.\n\nThe following configuration options are available:\n\t* Indent\n\t\tString to use for each indentation level for Dump functions.\n\t\tIt is a single space by default.  A popular alternative is \"\\t\".\n\n\t* MaxDepth\n\t\tMaximum number of levels to descend into nested data structures.\n\t\tThere is no limit by default.\n\n\t* DisableMethods\n\t\tDisables invocation of error and Stringer interface methods.\n\t\tMethod invocation is enabled by default.\n\n\t* DisablePointerMethods\n\t\tDisables invocation of error and Stringer interface methods on types\n\t\twhich only accept pointer receivers from non-pointer variables.\n\t\tPointer method invocation is enabled by default.\n\n\t* DisablePointerAddresses\n\t\tDisablePointerAddresses specifies whether to disable the printing of\n\t\tpointer addresses. This is useful when diffing data structures in tests.\n\n\t* DisableCapacities\n\t\tDisableCapacities specifies whether to disable the printing of\n\t\tcapacities for arrays, slices, maps and channels. This is useful when\n\t\tdiffing data structures in tests.\n\n\t* ContinueOnMethod\n\t\tEnables recursion into types after invoking error and Stringer interface\n\t\tmethods. Recursion after method invocation is disabled by default.\n\n\t* SortKeys\n\t\tSpecifies map keys should be sorted before being printed. Use\n\t\tthis to have a more deterministic, diffable output.  Note that\n\t\tonly native types (bool, int, uint, floats, uintptr and string)\n\t\tand types which implement error or Stringer interfaces are\n\t\tsupported with other types sorted according to the\n\t\treflect.Value.String() output which guarantees display\n\t\tstability.  Natural map order is used by default.\n\n\t* SpewKeys\n\t\tSpecifies that, as a last resort attempt, map keys should be\n\t\tspewed to strings and sorted by those strings.  This is only\n\t\tconsidered if SortKeys is true.\n\nDump Usage\n\nSimply call spew.Dump with a list of variables you want to dump:\n\n\tspew.Dump(myVar1, myVar2, ...)\n\nYou may also call spew.Fdump if you would prefer to output to an arbitrary\nio.Writer.  For example, to dump to standard error:\n\n\tspew.Fdump(os.Stderr, myVar1, myVar2, ...)\n\nA third option is to call spew.Sdump to get the formatted output as a string:\n\n\tstr := spew.Sdump(myVar1, myVar2, ...)\n\nSample Dump Output\n\nSee the Dump example for details on the setup of the types and variables being\nshown here.\n\n\t(main.Foo) {\n\t unexportedField: (*main.Bar)(0xf84002e210)({\n\t  flag: (main.Flag) flagTwo,\n\t  data: (uintptr) \u003cnil\u003e\n\t }),\n\t ExportedField: (map[interface {}]interface {}) (len=1) {\n\t  (string) (len=3) \"one\": (bool) true\n\t }\n\t}\n\nByte (and uint8) arrays and slices are displayed uniquely like the hexdump -C\ncommand as shown.\n\t([]uint8) (len=32 cap=32) {\n\t 00000000  11 12 13 14 15 16 17 18  19 1a 1b 1c 1d 1e 1f 20  |............... |\n\t 00000010  21 22 23 24 25 26 27 28  29 2a 2b 2c 2d 2e 2f 30  |!\"#$%\u0026'()*+,-./0|\n\t 00000020  31 32                                             |12|\n\t}\n\nCustom Formatter\n\nSpew provides a custom formatter that implements the fmt.Formatter interface\nso that it integrates cleanly with standard fmt package printing functions. The\nformatter is useful for inline printing of smaller data types similar to the\nstandard %v format specifier.\n\nThe custom formatter only responds to the %v (most compact), %+v (adds pointer\naddresses), %#v (adds types), or %#+v (adds types and pointer addresses) verb\ncombinations.  Any other verbs such as %x and %q will be sent to the the\nstandard fmt package for formatting.  In addition, the custom formatter ignores\nthe width and precision arguments (however they will still work on the format\nspecifiers not handled by the custom formatter).\n\nCustom Formatter Usage\n\nThe simplest way to make use of the spew custom formatter is to call one of the\nconvenience functions such as spew.Printf, spew.Println, or spew.Printf.  The\nfunctions have syntax you are most likely already familiar with:\n\n\tspew.Printf(\"myVar1: %v -- myVar2: %+v\", myVar1, myVar2)\n\tspew.Printf(\"myVar3: %#v -- myVar4: %#+v\", myVar3, myVar4)\n\tspew.Println(myVar, myVar2)\n\tspew.Fprintf(os.Stderr, \"myVar1: %v -- myVar2: %+v\", myVar1, myVar2)\n\tspew.Fprintf(os.Stderr, \"myVar3: %#v -- myVar4: %#+v\", myVar3, myVar4)\n\nSee the Index for the full list convenience functions.\n\nSample Formatter Output\n\nDouble pointer to a uint8:\n\t  %v: \u003c**\u003e5\n\t %+v: \u003c**\u003e(0xf8400420d0-\u003e0xf8400420c8)5\n\t %#v: (**uint8)5\n\t%#+v: (**uint8)(0xf8400420d0-\u003e0xf8400420c8)5\n\nPointer to circular struct with a uint8 field and a pointer to itself:\n\t  %v: \u003c*\u003e{1 \u003c*\u003e\u003cshown\u003e}\n\t %+v: \u003c*\u003e(0xf84003e260){ui8:1 c:\u003c*\u003e(0xf84003e260)\u003cshown\u003e}\n\t %#v: (*main.circular){ui8:(uint8)1 c:(*main.circular)\u003cshown\u003e}\n\t%#+v: (*main.circular)(0xf84003e260){ui8:(uint8)1 c:(*main.circular)(0xf84003e260)\u003cshown\u003e}\n\nSee the Printf example for details on the setup of variables being shown\nhere.\n\nErrors\n\nSince it is possible for custom Stringer/error interfaces to panic, spew\ndetects them and handles them internally by printing the panic information\ninline with the output.  Since spew is intended to provide deep pretty printing\ncapabilities on structures, it intentionally does not return any errors.\n*/\npackage spew"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/davecgh/go-spew/spew/format.go",
   "Line": 1,
   "Snippet": "\n/*\n * Copyright (c) 2013-2016 Dave Collins \u003cdave@davec.name\u003e\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\npackage spew"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/davecgh/go-spew/spew/bypasssafe.go",
   "Line": 1,
   "Snippet": "\n// Copyright (c) 2015-2016 Dave Collins \u003cdave@davec.name\u003e\n//\n// Permission to use, copy, modify, and distribute this software for any"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/davecgh/go-spew/spew/config.go",
   "Line": 1,
   "Snippet": "\n/*\n * Copyright (c) 2013-2016 Dave Collins \u003cdave@davec.name\u003e\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\npackage spew"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/davecgh/go-spew/spew/bypass.go",
   "Line": 1,
   "Snippet": "\n// Copyright (c) 2015-2016 Dave Collins \u003cdave@davec.name\u003e\n//\n// Permission to use, copy, modify, and distribute this software for any"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/davecgh/go-spew/spew/common.go",
   "Line": 1,
   "Snippet": "\n/*\n * Copyright (c) 2013-2016 Dave Collins \u003cdave@davec.name\u003e\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\npackage spew"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/src-d/gcfg/scanner/errors.go",
   "Line": 30,
   "Snippet": "func (e Error) Error() string {\n\tif e.Pos.Filename != \"\" || e.Pos.IsValid() {\n\t\t// don't print \"\u003cunknown position\u003e\"\n\t\t// TODO(gri) reconsider the semantics of Position.IsValid\n\t\treturn e.Pos.String() + \": \" + e.Msg"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/sergi/go-diff/diffmatchpatch/diff.go",
   "Line": 712,
   "Snippet": "\t//   -\u003e \u003cdel\u003eabc\u003c/del\u003exxx\u003cins\u003edef\u003c/ins\u003e\n\t// e.g: \u003cdel\u003exxxabc\u003c/del\u003e\u003cins\u003edefxxx\u003c/ins\u003e\n\t//   -\u003e \u003cins\u003edef\u003c/ins\u003exxx\u003cdel\u003eabc\u003c/del\u003e\n\t// Only extract an overlap if it is as big as the edit ahead or behind it.\n\tpointer = 1"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/sergi/go-diff/diffmatchpatch/diff.go",
   "Line": 711,
   "Snippet": "\t// e.g: \u003cdel\u003eabcxxx\u003c/del\u003e\u003cins\u003exxxdef\u003c/ins\u003e\n\t//   -\u003e \u003cdel\u003eabc\u003c/del\u003exxx\u003cins\u003edef\u003c/ins\u003e\n\t// e.g: \u003cdel\u003exxxabc\u003c/del\u003e\u003cins\u003edefxxx\u003c/ins\u003e\n\t//   -\u003e \u003cins\u003edef\u003c/ins\u003exxx\u003cdel\u003eabc\u003c/del\u003e\n\t// Only extract an overlap if it is as big as the edit ahead or behind it."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/sergi/go-diff/diffmatchpatch/diff.go",
   "Line": 710,
   "Snippet": "\t// Find any overlaps between deletions and insertions.\n\t// e.g: \u003cdel\u003eabcxxx\u003c/del\u003e\u003cins\u003exxxdef\u003c/ins\u003e\n\t//   -\u003e \u003cdel\u003eabc\u003c/del\u003exxx\u003cins\u003edef\u003c/ins\u003e\n\t// e.g: \u003cdel\u003exxxabc\u003c/del\u003e\u003cins\u003edefxxx\u003c/ins\u003e\n\t//   -\u003e \u003cins\u003edef\u003c/ins\u003exxx\u003cdel\u003eabc\u003c/del\u003e"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/sergi/go-diff/diffmatchpatch/diff.go",
   "Line": 709,
   "Snippet": "\tdiffs = dmp.DiffCleanupSemanticLossless(diffs)\n\t// Find any overlaps between deletions and insertions.\n\t// e.g: \u003cdel\u003eabcxxx\u003c/del\u003e\u003cins\u003exxxdef\u003c/ins\u003e\n\t//   -\u003e \u003cdel\u003eabc\u003c/del\u003exxx\u003cins\u003edef\u003c/ins\u003e\n\t// e.g: \u003cdel\u003exxxabc\u003c/del\u003e\u003cins\u003edefxxx\u003c/ins\u003e"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/sergi/go-diff/diffmatchpatch/diff.go",
   "Line": 1089,
   "Snippet": "\t}\n\n\t// Second pass: look for single edits surrounded on both sides by equalities which can be shifted sideways to eliminate an equality. E.g: A\u003cins\u003eBA\u003c/ins\u003eC -\u003e \u003cins\u003eAB\u003c/ins\u003eAC\n\tchanges := false\n\tpointer = 1"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/pmezard/go-difflib/difflib/difflib.go",
   "Line": 643,
   "Snippet": "// Convert range to the \"ed\" format.\nfunc formatRangeContext(start, stop int) string {\n\t// Per the diff spec at http://www.unix.org/single_unix_specification/\n\tbeginning := start + 1 // lines start numbering with one\n\tlength := stop - start"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/pmezard/go-difflib/difflib/difflib.go",
   "Line": 516,
   "Snippet": "// Convert range to the \"ed\" format\nfunc formatRangeUnified(start, stop int) string {\n\t// Per the diff spec at http://www.unix.org/single_unix_specification/\n\tbeginning := start + 1 // lines start numbering with one\n\tlength := stop - start"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/language/language.go",
   "Line": 868,
   "Snippet": "// obtained using any of the default methods.\nfunc (r Region) TLD() (Region, error) {\n\t// See http://en.wikipedia.org/wiki/Country_code_top-level_domain for the\n\t// difference between ISO 3166-1 and IANA ccTLD.\n\tif r.regionID == _GB {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/language/lookup.go",
   "Line": 379,
   "Snippet": "\t\t// CLDR-specific tag.\n\t\t[maxLen]byte{'r', 'o', 'o', 't'}:                                    0,  // root\n\t\t[maxLen]byte{'e', 'n', '-', 'u', 's', '-', 'p', 'o', 's', 'i', 'x'}: -7, // en_US_POSIX\"\n\t}\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/language/parse.go",
   "Line": 316,
   "Snippet": "\tend = scan.scan()\n\tfor len(scan.token) == 3 \u0026\u0026 isAlpha(scan.token[0]) {\n\t\t// From http://tools.ietf.org/html/bcp47, \u003clang\u003e-\u003cextlang\u003e tags are equivalent\n\t\t// to a tag of the form \u003cextlang\u003e.\n\t\tlang, e := getLangID(scan.token)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/language/parse.go",
   "Line": 317,
   "Snippet": "\tfor len(scan.token) == 3 \u0026\u0026 isAlpha(scan.token[0]) {\n\t\t// From http://tools.ietf.org/html/bcp47, \u003clang\u003e-\u003cextlang\u003e tags are equivalent\n\t\t// to a tag of the form \u003cextlang\u003e.\n\t\tlang, e := getLangID(scan.token)\n\t\tif lang != 0 {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_linux_mips64le.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -tags linux,mips64le syscall_linux.go syscall_linux_mips64x.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_linux_amd64.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -tags linux,amd64 syscall_linux.go syscall_linux_amd64.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_dragonfly.go",
   "Line": 11,
   "Snippet": "*/\n\n// +godefs map struct_in_addr [4]byte /* in_addr */\n// +godefs map struct_in6_addr [16]byte /* in6_addr */\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_dragonfly.go",
   "Line": 12,
   "Snippet": "\n// +godefs map struct_in_addr [4]byte /* in_addr */\n// +godefs map struct_in6_addr [16]byte /* in6_addr */\n\npackage unix"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_darwin_arm.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -l32 -tags darwin,arm syscall_bsd.go syscall_darwin.go syscall_darwin_arm.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mips64x.go",
   "Line": 107,
   "Snippet": "}\n\n//sysnb pipe2(p *[2]_C_int, flags int) (err error)\n\nfunc Pipe2(p []int, flags int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mips64x.go",
   "Line": 15,
   "Snippet": "//sys\tFadvise(fd int, offset int64, length int64, advice int) (err error) = SYS_FADVISE64\n//sys\tFchown(fd int, uid int, gid int) (err error)\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_NEWFSTATAT\n//sys\tFstatfs(fd int, buf *Statfs_t) (err error)\n//sys\tFtruncate(fd int, length int64) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mips64x.go",
   "Line": 57,
   "Snippet": "//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)\n//sys\tsetsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mips64x.go",
   "Line": 56,
   "Snippet": "//sys\tbind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -l32 -arm -tags linux,mipsle syscall_linux.go syscall_linux_mipsx.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_bsd.go",
   "Line": 25,
   "Snippet": " */\n\n//sysnb\tgetgroups(ngid int, gid *_Gid_t) (n int, err error)\n//sysnb\tsetgroups(ngid int, gid *_Gid_t) (err error)\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_bsd.go",
   "Line": 26,
   "Snippet": "\n//sysnb\tgetgroups(ngid int, gid *_Gid_t) (n int, err error)\n//sysnb\tsetgroups(ngid int, gid *_Gid_t) (err error)\n\nfunc Getgroups() (gids []int, err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_bsd.go",
   "Line": 422,
   "Snippet": "}\n\n//sys\tsysctl(mib []_C_int, old *byte, oldlen *uintptr, new *byte, newlen uintptr) (err error) = SYS___SYSCTL\n\n// sysctlmib translates name to mib number and appends any additional args."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_bsd.go",
   "Line": 126,
   "Snippet": "func (w WaitStatus) TrapCause() int { return -1 }\n\n//sys\twait4(pid int, wstatus *_C_int, options int, rusage *Rusage) (wpid int, err error)\n\nfunc Wait4(pid int, wstatus *WaitStatus, options int, rusage *Rusage) (wpid int, err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mipsx.go",
   "Line": 48,
   "Snippet": "//sys\tbind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mipsx.go",
   "Line": 31,
   "Snippet": "//sys\tPread(fd int, p []byte, offset int64) (n int, err error) = SYS_PREAD64\n//sys\tPwrite(fd int, p []byte, offset int64) (n int, err error) = SYS_PWRITE64\n//sys\tSelect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error) = SYS__NEWSELECT\n//sys\tsendfile(outfd int, infd int, offset *int64, count int) (written int, err error) = SYS_SENDFILE64\n//sys\tSetfsgid(gid int) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mipsx.go",
   "Line": 49,
   "Snippet": "//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)\n//sys\tsetsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mipsx.go",
   "Line": 114,
   "Snippet": "}\n\n//sysnb pipe2(p *[2]_C_int, flags int) (err error)\n\nfunc Pipe2(p []int, flags int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mipsx.go",
   "Line": 73,
   "Snippet": "//sys\tLstat(path string, stat *Stat_t) (err error) = SYS_LSTAT64\n//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64\n//sys\tStat(path string, stat *Stat_t) (err error) = SYS_STAT64\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mipsx.go",
   "Line": 72,
   "Snippet": "\n//sys\tLstat(path string, stat *Stat_t) (err error) = SYS_LSTAT64\n//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64\n//sys\tStat(path string, stat *Stat_t) (err error) = SYS_STAT64"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mipsx.go",
   "Line": 71,
   "Snippet": "//sys\tutimes(path string, times *[2]Timeval) (err error)\n\n//sys\tLstat(path string, stat *Stat_t) (err error) = SYS_LSTAT64\n//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mipsx.go",
   "Line": 74,
   "Snippet": "//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64\n//sys\tStat(path string, stat *Stat_t) (err error) = SYS_STAT64\n\n//sys\tPause() (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_mipsx.go",
   "Line": 67,
   "Snippet": "//sys\tfutimesat(dirfd int, path string, times *[2]Timeval) (err error)\n//sysnb\tGettimeofday(tv *Timeval) (err error)\n//sysnb\tTime(t *Time_t) (tt Time_t, err error)\n//sys\tUtime(path string, buf *Utimbuf) (err error)\n//sys\tutimes(path string, times *[2]Timeval) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_linux_s390x.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -tags linux,s390x syscall_linux.go syscall_linux_s390x.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_sparc64.go",
   "Line": 49,
   "Snippet": "//sys\tbind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_sparc64.go",
   "Line": 14,
   "Snippet": "//sys\tFchown(fd int, uid int, gid int) (err error)\n//sys\tFstat(fd int, stat *Stat_t) (err error)\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64\n//sys\tFstatfs(fd int, buf *Statfs_t) (err error)\n//sys\tFtruncate(fd int, length int64) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_sparc64.go",
   "Line": 50,
   "Snippet": "//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)\n//sys\tsetsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_sparc64.go",
   "Line": 113,
   "Snippet": "}\n\n//sysnb pipe(p *[2]_C_int) (err error)\n\nfunc Pipe(p []int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_sparc64.go",
   "Line": 126,
   "Snippet": "}\n\n//sysnb pipe2(p *[2]_C_int, flags int) (err error)\n\nfunc Pipe2(p []int, flags int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_netbsd.go",
   "Line": 11,
   "Snippet": "*/\n\n// +godefs map struct_in_addr [4]byte /* in_addr */\n// +godefs map struct_in6_addr [16]byte /* in6_addr */\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_netbsd.go",
   "Line": 12,
   "Snippet": "\n// +godefs map struct_in_addr [4]byte /* in_addr */\n// +godefs map struct_in6_addr [16]byte /* in6_addr */\n\npackage unix"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 666,
   "Snippet": "// __mac_get_fd\n// __mac_set_fd\n// __mac_get_pid\n// __mac_get_lcid\n// __mac_get_lctx"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 696,
   "Snippet": "// Sem_wait_nocancel\n// Aio_suspend_nocancel\n// __sigwait_nocancel\n// __semwait_signal_nocancel\n// __mac_mount"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 632,
   "Snippet": "// __disable_threadsignal\n// __pthread_markcancel\n// __pthread_canceled\n// __semwait_signal\n// Proc_info"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 625,
   "Snippet": "// Aio_write\n// Lio_listio\n// __pthread_cond_wait\n// Iopolicysys\n// __pthread_kill"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 614,
   "Snippet": "// __pthread_cond_destroy\n// __pthread_cond_broadcast\n// __pthread_cond_signal\n// Setsid_with_pid\n// __pthread_cond_timedwait"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 663,
   "Snippet": "// __mac_set_link\n// __mac_get_proc\n// __mac_set_proc\n// __mac_get_fd\n// __mac_set_fd"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 661,
   "Snippet": "// __mac_set_file\n// __mac_get_link\n// __mac_set_link\n// __mac_get_proc\n// __mac_set_proc"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 665,
   "Snippet": "// __mac_set_proc\n// __mac_get_fd\n// __mac_set_fd\n// __mac_get_pid\n// __mac_get_lcid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 668,
   "Snippet": "// __mac_get_pid\n// __mac_get_lcid\n// __mac_get_lctx\n// __mac_set_lctx\n// Setlcid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 639,
   "Snippet": "// Lstat64_extended\n// Fstat64_extended\n// __pthread_chdir\n// __pthread_fchdir\n// Audit"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 545,
   "Snippet": "// Sigreturn\n// Atsocket\n// Kqueue_from_portset_np\n// Kqueue_portset\n// Getattrlist"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 630,
   "Snippet": "// __pthread_sigmask\n// __sigwait\n// __disable_threadsignal\n// __pthread_markcancel\n// __pthread_canceled"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 657,
   "Snippet": "// Workq_ops\n// __mac_execve\n// __mac_syscall\n// __mac_get_file\n// __mac_set_file"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 604,
   "Snippet": "// Mkdir_extended\n// Identitysvc\n// Shared_region_check_np\n// Shared_region_map_np\n// __pthread_mutex_destroy"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 613,
   "Snippet": "// __pthread_cond_init\n// __pthread_cond_destroy\n// __pthread_cond_broadcast\n// __pthread_cond_signal\n// Setsid_with_pid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 616,
   "Snippet": "// __pthread_cond_signal\n// Setsid_with_pid\n// __pthread_cond_timedwait\n// Aio_fsync\n// Aio_return"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 610,
   "Snippet": "// __pthread_mutex_lock\n// __pthread_mutex_trylock\n// __pthread_mutex_unlock\n// __pthread_cond_init\n// __pthread_cond_destroy"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 615,
   "Snippet": "// __pthread_cond_broadcast\n// __pthread_cond_signal\n// Setsid_with_pid\n// __pthread_cond_timedwait\n// Aio_fsync"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 609,
   "Snippet": "// __pthread_mutex_init\n// __pthread_mutex_lock\n// __pthread_mutex_trylock\n// __pthread_mutex_unlock\n// __pthread_cond_init"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 662,
   "Snippet": "// __mac_get_link\n// __mac_set_link\n// __mac_get_proc\n// __mac_set_proc\n// __mac_get_fd"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 660,
   "Snippet": "// __mac_get_file\n// __mac_set_file\n// __mac_get_link\n// __mac_set_link\n// __mac_get_proc"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 607,
   "Snippet": "// Shared_region_map_np\n// __pthread_mutex_destroy\n// __pthread_mutex_init\n// __pthread_mutex_lock\n// __pthread_mutex_trylock"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 606,
   "Snippet": "// Shared_region_check_np\n// Shared_region_map_np\n// __pthread_mutex_destroy\n// __pthread_mutex_init\n// __pthread_mutex_lock"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 631,
   "Snippet": "// __sigwait\n// __disable_threadsignal\n// __pthread_markcancel\n// __pthread_canceled\n// __semwait_signal"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 608,
   "Snippet": "// __pthread_mutex_destroy\n// __pthread_mutex_init\n// __pthread_mutex_lock\n// __pthread_mutex_trylock\n// __pthread_mutex_unlock"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 697,
   "Snippet": "// Aio_suspend_nocancel\n// __sigwait_nocancel\n// __semwait_signal_nocancel\n// __mac_mount\n// __mac_get_mount"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 628,
   "Snippet": "// Iopolicysys\n// __pthread_kill\n// __pthread_sigmask\n// __sigwait\n// __disable_threadsignal"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 658,
   "Snippet": "// __mac_execve\n// __mac_syscall\n// __mac_get_file\n// __mac_set_file\n// __mac_get_link"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 667,
   "Snippet": "// __mac_set_fd\n// __mac_get_pid\n// __mac_get_lcid\n// __mac_get_lctx\n// __mac_set_lctx"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 700,
   "Snippet": "// __mac_mount\n// __mac_get_mount\n// __mac_getfsstat\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 656,
   "Snippet": "// Workq_open\n// Workq_ops\n// __mac_execve\n// __mac_syscall\n// __mac_get_file"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 629,
   "Snippet": "// __pthread_kill\n// __pthread_sigmask\n// __sigwait\n// __disable_threadsignal\n// __pthread_markcancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 659,
   "Snippet": "// __mac_syscall\n// __mac_get_file\n// __mac_set_file\n// __mac_get_link\n// __mac_set_link"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 695,
   "Snippet": "// Msgrcv_nocancel\n// Sem_wait_nocancel\n// Aio_suspend_nocancel\n// __sigwait_nocancel\n// __semwait_signal_nocancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 664,
   "Snippet": "// __mac_get_proc\n// __mac_set_proc\n// __mac_get_fd\n// __mac_set_fd\n// __mac_get_pid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 633,
   "Snippet": "// __pthread_markcancel\n// __pthread_canceled\n// __semwait_signal\n// Proc_info\n// sendfile"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 612,
   "Snippet": "// __pthread_mutex_unlock\n// __pthread_cond_init\n// __pthread_cond_destroy\n// __pthread_cond_broadcast\n// __pthread_cond_signal"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 699,
   "Snippet": "// __semwait_signal_nocancel\n// __mac_mount\n// __mac_get_mount\n// __mac_getfsstat"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 669,
   "Snippet": "// __mac_get_lcid\n// __mac_get_lctx\n// __mac_set_lctx\n// Setlcid\n// Read_nocancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 627,
   "Snippet": "// __pthread_cond_wait\n// Iopolicysys\n// __pthread_kill\n// __pthread_sigmask\n// __sigwait"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 698,
   "Snippet": "// __sigwait_nocancel\n// __semwait_signal_nocancel\n// __mac_mount\n// __mac_get_mount\n// __mac_getfsstat"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 640,
   "Snippet": "// Fstat64_extended\n// __pthread_chdir\n// __pthread_fchdir\n// Audit\n// Auditon"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 694,
   "Snippet": "// Msgsnd_nocancel\n// Msgrcv_nocancel\n// Sem_wait_nocancel\n// Aio_suspend_nocancel\n// __sigwait_nocancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 605,
   "Snippet": "// Identitysvc\n// Shared_region_check_np\n// Shared_region_map_np\n// __pthread_mutex_destroy\n// __pthread_mutex_init"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 611,
   "Snippet": "// __pthread_mutex_trylock\n// __pthread_mutex_unlock\n// __pthread_cond_init\n// __pthread_cond_destroy\n// __pthread_cond_broadcast"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 11,
   "Snippet": "// Note that sometimes we use a lowercase //sys name and wrap\n// it in our own nicer implementation, either here or in\n// syscall_bsd.go or syscall_unix.go.\n\npackage unix"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 229,
   "Snippet": "\t//          void *value,\n\t//          size_t size,\n\t//          u_int32_t position,\n\t//          int options\n\t//      );"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 495,
   "Snippet": "//sysnb\tSettimeofday(tp *Timeval) (err error)\n//sysnb\tSetuid(uid int) (err error)\n//sys\tStat(path string, stat *Stat_t) (err error) = SYS_STAT64\n//sys\tStatfs(path string, stat *Statfs_t) (err error) = SYS_STATFS64\n//sys\tSymlink(path string, link string) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 463,
   "Snippet": "//sys\tLinkat(pathfd int, path string, linkfd int, link string, flags int) (err error)\n//sys\tListen(s int, backlog int) (err error)\n//sys\tLstat(path string, stat *Stat_t) (err error) = SYS_LSTAT64\n//sys\tMkdir(path string, mode uint32) (err error)\n//sys\tMkdirat(dirfd int, path string, mode uint32) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 440,
   "Snippet": "//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\n//sys\tFstatat(fd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64\n//sys\tFstatfs(fd int, stat *Statfs_t) (err error) = SYS_FSTATFS64\n//sys\tFsync(fd int) (err error)\n//sys\tFtruncate(fd int, length int64) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 496,
   "Snippet": "//sysnb\tSetuid(uid int) (err error)\n//sys\tStat(path string, stat *Stat_t) (err error) = SYS_STAT64\n//sys\tStatfs(path string, stat *Statfs_t) (err error) = SYS_STATFS64\n//sys\tSymlink(path string, link string) (err error)\n//sys\tSymlinkat(oldpath string, newdirfd int, newpath string) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 439,
   "Snippet": "//sys\tFpathconf(fd int, name int) (val int, err error)\n//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\n//sys\tFstatat(fd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64\n//sys\tFstatfs(fd int, stat *Statfs_t) (err error) = SYS_FSTATFS64\n//sys\tFsync(fd int) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 438,
   "Snippet": "//sys\tFlock(fd int, how int) (err error)\n//sys\tFpathconf(fd int, name int) (val int, err error)\n//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\n//sys\tFstatat(fd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64\n//sys\tFstatfs(fd int, stat *Statfs_t) (err error) = SYS_FSTATFS64"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_freebsd_amd64.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -tags freebsd,amd64 syscall_bsd.go syscall_freebsd.go syscall_freebsd_amd64.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_openbsd.go",
   "Line": 287,
   "Snippet": " */\n// __getcwd\n// __semctl\n// __syscall\n// __sysctl"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_openbsd.go",
   "Line": 288,
   "Snippet": "// __getcwd\n// __semctl\n// __syscall\n// __sysctl\n// adjfreq"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_openbsd.go",
   "Line": 286,
   "Snippet": " * Unimplemented\n */\n// __getcwd\n// __semctl\n// __syscall"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_openbsd.go",
   "Line": 289,
   "Snippet": "// __semctl\n// __syscall\n// __sysctl\n// adjfreq\n// break"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_openbsd.go",
   "Line": 11,
   "Snippet": "// Note that sometimes we use a lowercase //sys name and wrap\n// it in our own nicer implementation, either here or in\n// syscall_bsd.go or syscall_unix.go.\n\npackage unix"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_openbsd.go",
   "Line": 65,
   "Snippet": "const ImplementsGetwd = true\n\n//sys\tGetcwd(buf []byte) (n int, err error) = SYS___GETCWD\n\nfunc Getwd() (string, error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_darwin_386.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -l32 -tags darwin,386 syscall_bsd.go syscall_darwin.go syscall_darwin_386.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 11,
   "Snippet": "// Note that sometimes we use a lowercase //sys name and wrap\n// it in our own nicer implementation, either here or in\n// syscall_bsd.go or syscall_unix.go.\n\npackage unix"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 249,
   "Snippet": "//sys\tExtattrListLink(link string, attrnamespace int, data uintptr, nbytes int) (ret int, err error)\n//sys\tFaccessat(dirfd int, path string, mode uint32, flags int) (err error)\n//sys\tFadvise(fd int, offset int64, length int64, advice int) (err error) = SYS_POSIX_FADVISE\n//sys\tFchdir(fd int) (err error)\n//sys\tFchflags(fd int, flags int) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 112,
   "Snippet": "const ImplementsGetwd = true\n\n//sys\tGetcwd(buf []byte) (n int, err error) = SYS___GETCWD\n\nfunc Getwd() (string, error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 360,
   "Snippet": "// _ksem_post\n// _ksem_trywait\n// _ksem_unlink\n// _ksem_wait\n// _lwp_continue"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 357,
   "Snippet": "// _ksem_getvalue\n// _ksem_init\n// _ksem_open\n// _ksem_post\n// _ksem_trywait"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 338,
   "Snippet": "// __msync13\n// __ntp_gettime30\n// __posix_chown\n// __posix_fchown\n// __posix_lchown"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 416,
   "Snippet": "// compat_13_sigsuspend13\n// compat_14___semctl\n// compat_14_msgctl\n// compat_14_shmctl\n// compat_16___sigaction14"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 372,
   "Snippet": "// _lwp_park\n// _lwp_self\n// _lwp_setname\n// _lwp_setprivate\n// _lwp_suspend"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 444,
   "Snippet": "// compat_43_ogetdtablesize\n// compat_43_ogethostid\n// compat_43_ogethostname\n// compat_43_ogetkerninfo\n// compat_43_ogetpagesize"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 463,
   "Snippet": "// compat_43_osetrlimit\n// compat_43_osigblock\n// compat_43_osigsetmask\n// compat_43_osigstack\n// compat_43_osigvec"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 351,
   "Snippet": "// __sigtimedwait\n// __stat30\n// __syscall\n// __vfork14\n// _ksem_close"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 446,
   "Snippet": "// compat_43_ogethostname\n// compat_43_ogetkerninfo\n// compat_43_ogetpagesize\n// compat_43_ogetpeername\n// compat_43_ogetrlimit"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 454,
   "Snippet": "// compat_43_ommap\n// compat_43_oquota\n// compat_43_orecv\n// compat_43_orecvfrom\n// compat_43_orecvmsg"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 364,
   "Snippet": "// _lwp_continue\n// _lwp_create\n// _lwp_ctl\n// _lwp_detach\n// _lwp_exit"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 415,
   "Snippet": "// compat_13_sigreturn13\n// compat_13_sigsuspend13\n// compat_14___semctl\n// compat_14_msgctl\n// compat_14_shmctl"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 397,
   "Snippet": "// clock_settime\n// compat_09_ogetdomainname\n// compat_09_osetdomainname\n// compat_09_ouname\n// compat_10_omsgsys"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 445,
   "Snippet": "// compat_43_ogethostid\n// compat_43_ogethostname\n// compat_43_ogetkerninfo\n// compat_43_ogetpagesize\n// compat_43_ogetpeername"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 399,
   "Snippet": "// compat_09_osetdomainname\n// compat_09_ouname\n// compat_10_omsgsys\n// compat_10_osemsys\n// compat_10_oshmsys"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 353,
   "Snippet": "// __syscall\n// __vfork14\n// _ksem_close\n// _ksem_destroy\n// _ksem_getvalue"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 462,
   "Snippet": "// compat_43_osethostname\n// compat_43_osetrlimit\n// compat_43_osigblock\n// compat_43_osigsetmask\n// compat_43_osigstack"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 413,
   "Snippet": "// compat_13_sigpending13\n// compat_13_sigprocmask13\n// compat_13_sigreturn13\n// compat_13_sigsuspend13\n// compat_14___semctl"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 363,
   "Snippet": "// _ksem_wait\n// _lwp_continue\n// _lwp_create\n// _lwp_ctl\n// _lwp_detach"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 328,
   "Snippet": "// __fhopen40\n// __fhstat40\n// __fhstatvfs140\n// __fstat30\n// __getcwd"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 375,
   "Snippet": "// _lwp_setprivate\n// _lwp_suspend\n// _lwp_unpark\n// _lwp_unpark_all\n// _lwp_wait"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 425,
   "Snippet": "// compat_20_statfs\n// compat_30___fhstat30\n// compat_30___fstat13\n// compat_30___lstat13\n// compat_30___stat13"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 403,
   "Snippet": "// compat_10_oshmsys\n// compat_12_fstat12\n// compat_12_getdirentries\n// compat_12_lstat12\n// compat_12_msync"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 426,
   "Snippet": "// compat_30___fhstat30\n// compat_30___fstat13\n// compat_30___lstat13\n// compat_30___stat13\n// compat_30_fhopen"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 401,
   "Snippet": "// compat_10_omsgsys\n// compat_10_osemsys\n// compat_10_oshmsys\n// compat_12_fstat12\n// compat_12_getdirentries"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 419,
   "Snippet": "// compat_14_shmctl\n// compat_16___sigaction14\n// compat_16___sigreturn14\n// compat_20_fhstatfs\n// compat_20_fstatfs"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 461,
   "Snippet": "// compat_43_osethostid\n// compat_43_osethostname\n// compat_43_osetrlimit\n// compat_43_osigblock\n// compat_43_osigsetmask"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 337,
   "Snippet": "// __msgctl13\n// __msync13\n// __ntp_gettime30\n// __posix_chown\n// __posix_fchown"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 474,
   "Snippet": "// extattr_delete_link\n// extattr_get_fd\n// extattr_get_file\n// extattr_get_link\n// extattr_list_fd"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 400,
   "Snippet": "// compat_09_ouname\n// compat_10_omsgsys\n// compat_10_osemsys\n// compat_10_oshmsys\n// compat_12_fstat12"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 440,
   "Snippet": "// compat_43_oaccept\n// compat_43_ocreat\n// compat_43_oftruncate\n// compat_43_ogetdirentries\n// compat_43_ogetdtablesize"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 420,
   "Snippet": "// compat_16___sigaction14\n// compat_16___sigreturn14\n// compat_20_fhstatfs\n// compat_20_fstatfs\n// compat_20_getfsstat"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 368,
   "Snippet": "// _lwp_exit\n// _lwp_getname\n// _lwp_getprivate\n// _lwp_kill\n// _lwp_park"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 435,
   "Snippet": "// compat_30_ntp_gettime\n// compat_30_socket\n// compat_40_mount\n// compat_43_fstat43\n// compat_43_lstat43"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 468,
   "Snippet": "// compat_43_otruncate\n// compat_43_owait\n// compat_43_stat43\n// execve\n// extattr_delete_fd"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 441,
   "Snippet": "// compat_43_ocreat\n// compat_43_oftruncate\n// compat_43_ogetdirentries\n// compat_43_ogetdtablesize\n// compat_43_ogethostid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 437,
   "Snippet": "// compat_40_mount\n// compat_43_fstat43\n// compat_43_lstat43\n// compat_43_oaccept\n// compat_43_ocreat"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 451,
   "Snippet": "// compat_43_ogetsockname\n// compat_43_okillpg\n// compat_43_olseek\n// compat_43_ommap\n// compat_43_oquota"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 359,
   "Snippet": "// _ksem_open\n// _ksem_post\n// _ksem_trywait\n// _ksem_unlink\n// _ksem_wait"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 430,
   "Snippet": "// compat_30_fhopen\n// compat_30_fhstat\n// compat_30_fhstatvfs1\n// compat_30_getdents\n// compat_30_getfh"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 418,
   "Snippet": "// compat_14_msgctl\n// compat_14_shmctl\n// compat_16___sigaction14\n// compat_16___sigreturn14\n// compat_20_fhstatfs"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 428,
   "Snippet": "// compat_30___lstat13\n// compat_30___stat13\n// compat_30_fhopen\n// compat_30_fhstat\n// compat_30_fhstatvfs1"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 423,
   "Snippet": "// compat_20_fstatfs\n// compat_20_getfsstat\n// compat_20_statfs\n// compat_30___fhstat30\n// compat_30___fstat13"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 330,
   "Snippet": "// __fhstatvfs140\n// __fstat30\n// __getcwd\n// __getfh30\n// __getlogin"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 381,
   "Snippet": "// _pset_bind\n// _sched_getaffinity\n// _sched_getparam\n// _sched_setaffinity\n// _sched_setparam"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 481,
   "Snippet": "// extattr_set_fd\n// extattr_set_file\n// extattr_set_link\n// extattrctl\n// fchroot"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 449,
   "Snippet": "// compat_43_ogetpeername\n// compat_43_ogetrlimit\n// compat_43_ogetsockname\n// compat_43_okillpg\n// compat_43_olseek"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 421,
   "Snippet": "// compat_16___sigreturn14\n// compat_20_fhstatfs\n// compat_20_fstatfs\n// compat_20_getfsstat\n// compat_20_statfs"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 404,
   "Snippet": "// compat_12_fstat12\n// compat_12_getdirentries\n// compat_12_lstat12\n// compat_12_msync\n// compat_12_oreboot"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 472,
   "Snippet": "// extattr_delete_fd\n// extattr_delete_file\n// extattr_delete_link\n// extattr_get_fd\n// extattr_get_file"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 376,
   "Snippet": "// _lwp_suspend\n// _lwp_unpark\n// _lwp_unpark_all\n// _lwp_wait\n// _lwp_wakeup"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 452,
   "Snippet": "// compat_43_okillpg\n// compat_43_olseek\n// compat_43_ommap\n// compat_43_oquota\n// compat_43_orecv"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 356,
   "Snippet": "// _ksem_destroy\n// _ksem_getvalue\n// _ksem_init\n// _ksem_open\n// _ksem_post"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 431,
   "Snippet": "// compat_30_fhstat\n// compat_30_fhstatvfs1\n// compat_30_getdents\n// compat_30_getfh\n// compat_30_ntp_gettime"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 411,
   "Snippet": "// compat_13_sigaction13\n// compat_13_sigaltstack13\n// compat_13_sigpending13\n// compat_13_sigprocmask13\n// compat_13_sigreturn13"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 362,
   "Snippet": "// _ksem_unlink\n// _ksem_wait\n// _lwp_continue\n// _lwp_create\n// _lwp_ctl"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 349,
   "Snippet": "// __sigprocmask14\n// __sigsuspend14\n// __sigtimedwait\n// __stat30\n// __syscall"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 341,
   "Snippet": "// __posix_fchown\n// __posix_lchown\n// __posix_rename\n// __setlogin\n// __shmctl13"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 410,
   "Snippet": "// compat_12_stat12\n// compat_13_sigaction13\n// compat_13_sigaltstack13\n// compat_13_sigpending13\n// compat_13_sigprocmask13"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 456,
   "Snippet": "// compat_43_orecv\n// compat_43_orecvfrom\n// compat_43_orecvmsg\n// compat_43_osend\n// compat_43_osendmsg"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 325,
   "Snippet": " */\n// ____semctl13\n// __clone\n// __fhopen40\n// __fhstat40"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 417,
   "Snippet": "// compat_14___semctl\n// compat_14_msgctl\n// compat_14_shmctl\n// compat_16___sigaction14\n// compat_16___sigreturn14"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 382,
   "Snippet": "// _sched_getaffinity\n// _sched_getparam\n// _sched_setaffinity\n// _sched_setparam\n// acct"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 439,
   "Snippet": "// compat_43_lstat43\n// compat_43_oaccept\n// compat_43_ocreat\n// compat_43_oftruncate\n// compat_43_ogetdirentries"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 331,
   "Snippet": "// __fstat30\n// __getcwd\n// __getfh30\n// __getlogin\n// __lstat30"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 374,
   "Snippet": "// _lwp_setname\n// _lwp_setprivate\n// _lwp_suspend\n// _lwp_unpark\n// _lwp_unpark_all"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 326,
   "Snippet": "// ____semctl13\n// __clone\n// __fhopen40\n// __fhstat40\n// __fhstatvfs140"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 402,
   "Snippet": "// compat_10_osemsys\n// compat_10_oshmsys\n// compat_12_fstat12\n// compat_12_getdirentries\n// compat_12_lstat12"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 370,
   "Snippet": "// _lwp_getprivate\n// _lwp_kill\n// _lwp_park\n// _lwp_self\n// _lwp_setname"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 465,
   "Snippet": "// compat_43_osigsetmask\n// compat_43_osigstack\n// compat_43_osigvec\n// compat_43_otruncate\n// compat_43_owait"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 424,
   "Snippet": "// compat_20_getfsstat\n// compat_20_statfs\n// compat_30___fhstat30\n// compat_30___fstat13\n// compat_30___lstat13"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 345,
   "Snippet": "// __shmctl13\n// __sigaction_sigtramp\n// __sigaltstack14\n// __sigpending14\n// __sigprocmask14"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 447,
   "Snippet": "// compat_43_ogetkerninfo\n// compat_43_ogetpagesize\n// compat_43_ogetpeername\n// compat_43_ogetrlimit\n// compat_43_ogetsockname"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 348,
   "Snippet": "// __sigpending14\n// __sigprocmask14\n// __sigsuspend14\n// __sigtimedwait\n// __stat30"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 429,
   "Snippet": "// compat_30___stat13\n// compat_30_fhopen\n// compat_30_fhstat\n// compat_30_fhstatvfs1\n// compat_30_getdents"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 467,
   "Snippet": "// compat_43_osigvec\n// compat_43_otruncate\n// compat_43_owait\n// compat_43_stat43\n// execve"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 470,
   "Snippet": "// compat_43_stat43\n// execve\n// extattr_delete_fd\n// extattr_delete_file\n// extattr_delete_link"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 377,
   "Snippet": "// _lwp_unpark\n// _lwp_unpark_all\n// _lwp_wait\n// _lwp_wakeup\n// _pset_bind"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 366,
   "Snippet": "// _lwp_ctl\n// _lwp_detach\n// _lwp_exit\n// _lwp_getname\n// _lwp_getprivate"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 475,
   "Snippet": "// extattr_get_fd\n// extattr_get_file\n// extattr_get_link\n// extattr_list_fd\n// extattr_list_file"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 332,
   "Snippet": "// __getcwd\n// __getfh30\n// __getlogin\n// __lstat30\n// __mount50"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 347,
   "Snippet": "// __sigaltstack14\n// __sigpending14\n// __sigprocmask14\n// __sigsuspend14\n// __sigtimedwait"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 405,
   "Snippet": "// compat_12_getdirentries\n// compat_12_lstat12\n// compat_12_msync\n// compat_12_oreboot\n// compat_12_oswapon"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 340,
   "Snippet": "// __posix_chown\n// __posix_fchown\n// __posix_lchown\n// __posix_rename\n// __setlogin"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 476,
   "Snippet": "// extattr_get_file\n// extattr_get_link\n// extattr_list_fd\n// extattr_list_file\n// extattr_list_link"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 350,
   "Snippet": "// __sigsuspend14\n// __sigtimedwait\n// __stat30\n// __syscall\n// __vfork14"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 361,
   "Snippet": "// _ksem_trywait\n// _ksem_unlink\n// _ksem_wait\n// _lwp_continue\n// _lwp_create"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 327,
   "Snippet": "// __clone\n// __fhopen40\n// __fhstat40\n// __fhstatvfs140\n// __fstat30"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 477,
   "Snippet": "// extattr_get_link\n// extattr_list_fd\n// extattr_list_file\n// extattr_list_link\n// extattr_set_fd"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 339,
   "Snippet": "// __ntp_gettime30\n// __posix_chown\n// __posix_fchown\n// __posix_lchown\n// __posix_rename"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 352,
   "Snippet": "// __stat30\n// __syscall\n// __vfork14\n// _ksem_close\n// _ksem_destroy"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 334,
   "Snippet": "// __getlogin\n// __lstat30\n// __mount50\n// __msgctl13\n// __msync13"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 438,
   "Snippet": "// compat_43_fstat43\n// compat_43_lstat43\n// compat_43_oaccept\n// compat_43_ocreat\n// compat_43_oftruncate"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 380,
   "Snippet": "// _lwp_wakeup\n// _pset_bind\n// _sched_getaffinity\n// _sched_getparam\n// _sched_setaffinity"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 343,
   "Snippet": "// __posix_rename\n// __setlogin\n// __shmctl13\n// __sigaction_sigtramp\n// __sigaltstack14"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 453,
   "Snippet": "// compat_43_olseek\n// compat_43_ommap\n// compat_43_oquota\n// compat_43_orecv\n// compat_43_orecvfrom"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 329,
   "Snippet": "// __fhstat40\n// __fhstatvfs140\n// __fstat30\n// __getcwd\n// __getfh30"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 533,
   "Snippet": "// ntp_adjtime\n// pmc_control\n// pmc_get_info\n// pollts\n// preadv"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 354,
   "Snippet": "// __vfork14\n// _ksem_close\n// _ksem_destroy\n// _ksem_getvalue\n// _ksem_init"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 480,
   "Snippet": "// extattr_list_link\n// extattr_set_fd\n// extattr_set_file\n// extattr_set_link\n// extattrctl"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 406,
   "Snippet": "// compat_12_lstat12\n// compat_12_msync\n// compat_12_oreboot\n// compat_12_oswapon\n// compat_12_stat12"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 335,
   "Snippet": "// __lstat30\n// __mount50\n// __msgctl13\n// __msync13\n// __ntp_gettime30"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 409,
   "Snippet": "// compat_12_oswapon\n// compat_12_stat12\n// compat_13_sigaction13\n// compat_13_sigaltstack13\n// compat_13_sigpending13"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 433,
   "Snippet": "// compat_30_getdents\n// compat_30_getfh\n// compat_30_ntp_gettime\n// compat_30_socket\n// compat_40_mount"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 408,
   "Snippet": "// compat_12_oreboot\n// compat_12_oswapon\n// compat_12_stat12\n// compat_13_sigaction13\n// compat_13_sigaltstack13"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 478,
   "Snippet": "// extattr_list_fd\n// extattr_list_file\n// extattr_list_link\n// extattr_set_fd\n// extattr_set_file"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 378,
   "Snippet": "// _lwp_unpark_all\n// _lwp_wait\n// _lwp_wakeup\n// _pset_bind\n// _sched_getaffinity"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 344,
   "Snippet": "// __setlogin\n// __shmctl13\n// __sigaction_sigtramp\n// __sigaltstack14\n// __sigpending14"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 442,
   "Snippet": "// compat_43_oftruncate\n// compat_43_ogetdirentries\n// compat_43_ogetdtablesize\n// compat_43_ogethostid\n// compat_43_ogethostname"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 464,
   "Snippet": "// compat_43_osigblock\n// compat_43_osigsetmask\n// compat_43_osigstack\n// compat_43_osigvec\n// compat_43_otruncate"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 333,
   "Snippet": "// __getfh30\n// __getlogin\n// __lstat30\n// __mount50\n// __msgctl13"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 432,
   "Snippet": "// compat_30_fhstatvfs1\n// compat_30_getdents\n// compat_30_getfh\n// compat_30_ntp_gettime\n// compat_30_socket"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 355,
   "Snippet": "// _ksem_close\n// _ksem_destroy\n// _ksem_getvalue\n// _ksem_init\n// _ksem_open"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 407,
   "Snippet": "// compat_12_msync\n// compat_12_oreboot\n// compat_12_oswapon\n// compat_12_stat12\n// compat_13_sigaction13"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 479,
   "Snippet": "// extattr_list_file\n// extattr_list_link\n// extattr_set_fd\n// extattr_set_file\n// extattr_set_link"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 460,
   "Snippet": "// compat_43_osendmsg\n// compat_43_osethostid\n// compat_43_osethostname\n// compat_43_osetrlimit\n// compat_43_osigblock"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 455,
   "Snippet": "// compat_43_oquota\n// compat_43_orecv\n// compat_43_orecvfrom\n// compat_43_orecvmsg\n// compat_43_osend"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 371,
   "Snippet": "// _lwp_kill\n// _lwp_park\n// _lwp_self\n// _lwp_setname\n// _lwp_setprivate"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 457,
   "Snippet": "// compat_43_orecvfrom\n// compat_43_orecvmsg\n// compat_43_osend\n// compat_43_osendmsg\n// compat_43_osethostid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 367,
   "Snippet": "// _lwp_detach\n// _lwp_exit\n// _lwp_getname\n// _lwp_getprivate\n// _lwp_kill"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 398,
   "Snippet": "// compat_09_ogetdomainname\n// compat_09_osetdomainname\n// compat_09_ouname\n// compat_10_omsgsys\n// compat_10_osemsys"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 324,
   "Snippet": " * Unimplemented\n */\n// ____semctl13\n// __clone\n// __fhopen40"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 379,
   "Snippet": "// _lwp_wait\n// _lwp_wakeup\n// _pset_bind\n// _sched_getaffinity\n// _sched_getparam"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 342,
   "Snippet": "// __posix_lchown\n// __posix_rename\n// __setlogin\n// __shmctl13\n// __sigaction_sigtramp"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 471,
   "Snippet": "// execve\n// extattr_delete_fd\n// extattr_delete_file\n// extattr_delete_link\n// extattr_get_fd"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 396,
   "Snippet": "// clock_gettime\n// clock_settime\n// compat_09_ogetdomainname\n// compat_09_osetdomainname\n// compat_09_ouname"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 473,
   "Snippet": "// extattr_delete_file\n// extattr_delete_link\n// extattr_get_fd\n// extattr_get_file\n// extattr_get_link"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 436,
   "Snippet": "// compat_30_socket\n// compat_40_mount\n// compat_43_fstat43\n// compat_43_lstat43\n// compat_43_oaccept"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 466,
   "Snippet": "// compat_43_osigstack\n// compat_43_osigvec\n// compat_43_otruncate\n// compat_43_owait\n// compat_43_stat43"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 346,
   "Snippet": "// __sigaction_sigtramp\n// __sigaltstack14\n// __sigpending14\n// __sigprocmask14\n// __sigsuspend14"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 450,
   "Snippet": "// compat_43_ogetrlimit\n// compat_43_ogetsockname\n// compat_43_okillpg\n// compat_43_olseek\n// compat_43_ommap"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 443,
   "Snippet": "// compat_43_ogetdirentries\n// compat_43_ogetdtablesize\n// compat_43_ogethostid\n// compat_43_ogethostname\n// compat_43_ogetkerninfo"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 365,
   "Snippet": "// _lwp_create\n// _lwp_ctl\n// _lwp_detach\n// _lwp_exit\n// _lwp_getname"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 434,
   "Snippet": "// compat_30_getfh\n// compat_30_ntp_gettime\n// compat_30_socket\n// compat_40_mount\n// compat_43_fstat43"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 358,
   "Snippet": "// _ksem_init\n// _ksem_open\n// _ksem_post\n// _ksem_trywait\n// _ksem_unlink"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 336,
   "Snippet": "// __mount50\n// __msgctl13\n// __msync13\n// __ntp_gettime30\n// __posix_chown"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 422,
   "Snippet": "// compat_20_fhstatfs\n// compat_20_fstatfs\n// compat_20_getfsstat\n// compat_20_statfs\n// compat_30___fhstat30"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 383,
   "Snippet": "// _sched_getparam\n// _sched_setaffinity\n// _sched_setparam\n// acct\n// aio_cancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 458,
   "Snippet": "// compat_43_orecvmsg\n// compat_43_osend\n// compat_43_osendmsg\n// compat_43_osethostid\n// compat_43_osethostname"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 412,
   "Snippet": "// compat_13_sigaltstack13\n// compat_13_sigpending13\n// compat_13_sigprocmask13\n// compat_13_sigreturn13\n// compat_13_sigsuspend13"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 414,
   "Snippet": "// compat_13_sigprocmask13\n// compat_13_sigreturn13\n// compat_13_sigsuspend13\n// compat_14___semctl\n// compat_14_msgctl"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 459,
   "Snippet": "// compat_43_osend\n// compat_43_osendmsg\n// compat_43_osethostid\n// compat_43_osethostname\n// compat_43_osetrlimit"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 369,
   "Snippet": "// _lwp_getname\n// _lwp_getprivate\n// _lwp_kill\n// _lwp_park\n// _lwp_self"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 448,
   "Snippet": "// compat_43_ogetpagesize\n// compat_43_ogetpeername\n// compat_43_ogetrlimit\n// compat_43_ogetsockname\n// compat_43_okillpg"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 373,
   "Snippet": "// _lwp_self\n// _lwp_setname\n// _lwp_setprivate\n// _lwp_suspend\n// _lwp_unpark"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_netbsd.go",
   "Line": 427,
   "Snippet": "// compat_30___fstat13\n// compat_30___lstat13\n// compat_30___stat13\n// compat_30_fhopen\n// compat_30_fhstat"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_freebsd_386.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -l32 -tags freebsd,386 syscall_bsd.go syscall_freebsd.go syscall_freebsd_386.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 100,
   "Snippet": "const ImplementsGetwd = true\n\n//sys\tGetcwd(buf []byte) (n int, err error) = SYS___GETCWD\n\nfunc Getwd() (string, error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 455,
   "Snippet": "// __pthread_sigmask\n// __sigwait\n// __disable_threadsignal\n// __pthread_markcancel\n// __pthread_canceled"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 431,
   "Snippet": "// Shared_region_check_np\n// Shared_region_map_np\n// __pthread_mutex_destroy\n// __pthread_mutex_init\n// __pthread_mutex_lock"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 487,
   "Snippet": "// __mac_set_link\n// __mac_get_proc\n// __mac_set_proc\n// __mac_get_fd\n// __mac_set_fd"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 492,
   "Snippet": "// __mac_get_pid\n// __mac_get_lcid\n// __mac_get_lctx\n// __mac_set_lctx\n// Setlcid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 453,
   "Snippet": "// Iopolicysys\n// __pthread_kill\n// __pthread_sigmask\n// __sigwait\n// __disable_threadsignal"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 439,
   "Snippet": "// __pthread_cond_destroy\n// __pthread_cond_broadcast\n// __pthread_cond_signal\n// Setsid_with_pid\n// __pthread_cond_timedwait"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 437,
   "Snippet": "// __pthread_mutex_unlock\n// __pthread_cond_init\n// __pthread_cond_destroy\n// __pthread_cond_broadcast\n// __pthread_cond_signal"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 489,
   "Snippet": "// __mac_set_proc\n// __mac_get_fd\n// __mac_set_fd\n// __mac_get_pid\n// __mac_get_lcid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 434,
   "Snippet": "// __pthread_mutex_init\n// __pthread_mutex_lock\n// __pthread_mutex_trylock\n// __pthread_mutex_unlock\n// __pthread_cond_init"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 362,
   "Snippet": "// Sigreturn\n// Atsocket\n// Kqueue_from_portset_np\n// Kqueue_portset\n// Getattrlist"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 440,
   "Snippet": "// __pthread_cond_broadcast\n// __pthread_cond_signal\n// Setsid_with_pid\n// __pthread_cond_timedwait\n// Aio_fsync"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 493,
   "Snippet": "// __mac_get_lcid\n// __mac_get_lctx\n// __mac_set_lctx\n// Setlcid\n// Read_nocancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 432,
   "Snippet": "// Shared_region_map_np\n// __pthread_mutex_destroy\n// __pthread_mutex_init\n// __pthread_mutex_lock\n// __pthread_mutex_trylock"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 433,
   "Snippet": "// __pthread_mutex_destroy\n// __pthread_mutex_init\n// __pthread_mutex_lock\n// __pthread_mutex_trylock\n// __pthread_mutex_unlock"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 519,
   "Snippet": "// Sem_wait_nocancel\n// Aio_suspend_nocancel\n// __sigwait_nocancel\n// __semwait_signal_nocancel\n// __mac_mount"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 457,
   "Snippet": "// __disable_threadsignal\n// __pthread_markcancel\n// __pthread_canceled\n// __semwait_signal\n// Proc_info"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 464,
   "Snippet": "// Fstat64_extended\n// __pthread_chdir\n// __pthread_fchdir\n// Audit\n// Auditon"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 458,
   "Snippet": "// __pthread_markcancel\n// __pthread_canceled\n// __semwait_signal\n// Proc_info\n// Stat64_extended"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 491,
   "Snippet": "// __mac_set_fd\n// __mac_get_pid\n// __mac_get_lcid\n// __mac_get_lctx\n// __mac_set_lctx"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 490,
   "Snippet": "// __mac_get_fd\n// __mac_set_fd\n// __mac_get_pid\n// __mac_get_lcid\n// __mac_get_lctx"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 486,
   "Snippet": "// __mac_get_link\n// __mac_set_link\n// __mac_get_proc\n// __mac_set_proc\n// __mac_get_fd"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 483,
   "Snippet": "// __mac_syscall\n// __mac_get_file\n// __mac_set_file\n// __mac_get_link\n// __mac_set_link"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 450,
   "Snippet": "// Aio_write\n// Lio_listio\n// __pthread_cond_wait\n// Iopolicysys\n// __pthread_kill"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 520,
   "Snippet": "// Aio_suspend_nocancel\n// __sigwait_nocancel\n// __semwait_signal_nocancel\n// __mac_mount\n// __mac_get_mount"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 521,
   "Snippet": "// __sigwait_nocancel\n// __semwait_signal_nocancel\n// __mac_mount\n// __mac_get_mount\n// __mac_getfsstat"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 430,
   "Snippet": "// Identitysvc\n// Shared_region_check_np\n// Shared_region_map_np\n// __pthread_mutex_destroy\n// __pthread_mutex_init"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 517,
   "Snippet": "// Msgsnd_nocancel\n// Msgrcv_nocancel\n// Sem_wait_nocancel\n// Aio_suspend_nocancel\n// __sigwait_nocancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 436,
   "Snippet": "// __pthread_mutex_trylock\n// __pthread_mutex_unlock\n// __pthread_cond_init\n// __pthread_cond_destroy\n// __pthread_cond_broadcast"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 429,
   "Snippet": "// Mkdir_extended\n// Identitysvc\n// Shared_region_check_np\n// Shared_region_map_np\n// __pthread_mutex_destroy"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 438,
   "Snippet": "// __pthread_cond_init\n// __pthread_cond_destroy\n// __pthread_cond_broadcast\n// __pthread_cond_signal\n// Setsid_with_pid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 484,
   "Snippet": "// __mac_get_file\n// __mac_set_file\n// __mac_get_link\n// __mac_set_link\n// __mac_get_proc"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 456,
   "Snippet": "// __sigwait\n// __disable_threadsignal\n// __pthread_markcancel\n// __pthread_canceled\n// __semwait_signal"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 481,
   "Snippet": "// Workq_ops\n// __mac_execve\n// __mac_syscall\n// __mac_get_file\n// __mac_set_file"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 523,
   "Snippet": "// __mac_mount\n// __mac_get_mount\n// __mac_getfsstat\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 518,
   "Snippet": "// Msgrcv_nocancel\n// Sem_wait_nocancel\n// Aio_suspend_nocancel\n// __sigwait_nocancel\n// __semwait_signal_nocancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 454,
   "Snippet": "// __pthread_kill\n// __pthread_sigmask\n// __sigwait\n// __disable_threadsignal\n// __pthread_markcancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 441,
   "Snippet": "// __pthread_cond_signal\n// Setsid_with_pid\n// __pthread_cond_timedwait\n// Aio_fsync\n// Aio_return"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 485,
   "Snippet": "// __mac_set_file\n// __mac_get_link\n// __mac_set_link\n// __mac_get_proc\n// __mac_set_proc"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 522,
   "Snippet": "// __semwait_signal_nocancel\n// __mac_mount\n// __mac_get_mount\n// __mac_getfsstat"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 452,
   "Snippet": "// __pthread_cond_wait\n// Iopolicysys\n// __pthread_kill\n// __pthread_sigmask\n// __sigwait"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 488,
   "Snippet": "// __mac_get_proc\n// __mac_set_proc\n// __mac_get_fd\n// __mac_set_fd\n// __mac_get_pid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 435,
   "Snippet": "// __pthread_mutex_lock\n// __pthread_mutex_trylock\n// __pthread_mutex_unlock\n// __pthread_cond_init\n// __pthread_cond_destroy"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 482,
   "Snippet": "// __mac_execve\n// __mac_syscall\n// __mac_get_file\n// __mac_set_file\n// __mac_get_link"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 480,
   "Snippet": "// Workq_open\n// Workq_ops\n// __mac_execve\n// __mac_syscall\n// __mac_get_file"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 463,
   "Snippet": "// Lstat64_extended\n// Fstat64_extended\n// __pthread_chdir\n// __pthread_fchdir\n// Audit"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 11,
   "Snippet": "// Note that sometimes we use a lowercase //sys name and wrap\n// it in our own nicer implementation, either here or in\n// syscall_bsd.go or syscall_unix.go.\n\npackage unix"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_s390x.go",
   "Line": 78,
   "Snippet": "}\n\n//sysnb pipe2(p *[2]_C_int, flags int) (err error)\n\nfunc Pipe(p []int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_s390x.go",
   "Line": 50,
   "Snippet": "//sys\tUstat(dev int, ubuf *Ustat_t) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n\n//sys\tfutimesat(dirfd int, path string, times *[2]Timeval) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_s390x.go",
   "Line": 19,
   "Snippet": "//sys\tFchown(fd int, uid int, gid int) (err error)\n//sys\tFstat(fd int, stat *Stat_t) (err error)\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_NEWFSTATAT\n//sys\tFstatfs(fd int, buf *Statfs_t) (err error)\n//sys\tFtruncate(fd int, length int64) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_s390x.go",
   "Line": 49,
   "Snippet": "//sys\tTruncate(path string, length int64) (err error)\n//sys\tUstat(dev int, ubuf *Ustat_t) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_amd64.go",
   "Line": 15,
   "Snippet": "//sys\tFchown(fd int, uid int, gid int) (err error)\n//sys\tFstat(fd int, stat *Stat_t) (err error)\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_NEWFSTATAT\n//sys\tFstatfs(fd int, buf *Statfs_t) (err error)\n//sys\tFtruncate(fd int, length int64) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_amd64.go",
   "Line": 126,
   "Snippet": "}\n\n//sysnb pipe2(p *[2]_C_int, flags int) (err error)\n\nfunc Pipe2(p []int, flags int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_amd64.go",
   "Line": 67,
   "Snippet": "//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)\n//sys\tsetsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_amd64.go",
   "Line": 66,
   "Snippet": "//sys\tbind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_amd64.go",
   "Line": 113,
   "Snippet": "}\n\n//sysnb\tpipe(p *[2]_C_int) (err error)\n\nfunc Pipe(p []int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_darwin_amd64.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -tags darwin,amd64 syscall_bsd.go syscall_darwin.go syscall_darwin_amd64.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 896,
   "Snippet": "// KeyctlBuffer calls keyctl commands in which the third and fourth\n// arguments are a buffer and its length, respectively.\n// These commands are KEYCTL_UPDATE, KEYCTL_READ, and KEYCTL_INSTANTIATE.\n//sys\tKeyctlBuffer(cmd int, arg2 int, buf []byte, arg5 int) (ret int, err error) = SYS_KEYCTL\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 891,
   "Snippet": "// KEYCTL_UNLINK, KEYCTL_NEGATE, KEYCTL_SET_REQKEY_KEYRING, KEYCTL_SET_TIMEOUT,\n// KEYCTL_ASSUME_AUTHORITY, KEYCTL_SESSION_TO_PARENT, KEYCTL_REJECT,\n// KEYCTL_INVALIDATE, and KEYCTL_GET_PERSISTENT.\n//sys\tKeyctlInt(cmd int, arg2 int, arg3 int, arg4 int, arg5 int) (ret int, err error) = SYS_KEYCTL\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 888,
   "Snippet": "\n// KeyctlInt calls keyctl commands in which each argument is an int.\n// These commands are KEYCTL_REVOKE, KEYCTL_CHOWN, KEYCTL_CLEAR, KEYCTL_LINK,\n// KEYCTL_UNLINK, KEYCTL_NEGATE, KEYCTL_SET_REQKEY_KEYRING, KEYCTL_SET_TIMEOUT,\n// KEYCTL_ASSUME_AUTHORITY, KEYCTL_SESSION_TO_PARENT, KEYCTL_REJECT,"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 890,
   "Snippet": "// These commands are KEYCTL_REVOKE, KEYCTL_CHOWN, KEYCTL_CLEAR, KEYCTL_LINK,\n// KEYCTL_UNLINK, KEYCTL_NEGATE, KEYCTL_SET_REQKEY_KEYRING, KEYCTL_SET_TIMEOUT,\n// KEYCTL_ASSUME_AUTHORITY, KEYCTL_SESSION_TO_PARENT, KEYCTL_REJECT,\n// KEYCTL_INVALIDATE, and KEYCTL_GET_PERSISTENT.\n//sys\tKeyctlInt(cmd int, arg2 int, arg3 int, arg4 int, arg5 int) (ret int, err error) = SYS_KEYCTL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 889,
   "Snippet": "// KeyctlInt calls keyctl commands in which each argument is an int.\n// These commands are KEYCTL_REVOKE, KEYCTL_CHOWN, KEYCTL_CLEAR, KEYCTL_LINK,\n// KEYCTL_UNLINK, KEYCTL_NEGATE, KEYCTL_SET_REQKEY_KEYRING, KEYCTL_SET_TIMEOUT,\n// KEYCTL_ASSUME_AUTHORITY, KEYCTL_SESSION_TO_PARENT, KEYCTL_REJECT,\n// KEYCTL_INVALIDATE, and KEYCTL_GET_PERSISTENT."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 336,
   "Snippet": "}\n\n//sys\twait4(pid int, wstatus *_C_int, options int, rusage *Rusage) (wpid int, err error)\n\nfunc Wait4(pid int, wstatus *WaitStatus, options int, rusage *Rusage) (wpid int, err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 1374,
   "Snippet": "//sys\twritelen(fd int, p *byte, np int) (n int, err error) = SYS_WRITE\n\n// mmap varies by architecture; see syscall_linux_*.go.\n//sys\tmunmap(addr uintptr, length uintptr) (err error)\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 777,
   "Snippet": "\t\t\treturn nil, err\n\t\t}\n\t\t// only BTPROTO_L2CAP and BTPROTO_RFCOMM can accept connections\n\t\tswitch proto {\n\t\tcase BTPROTO_L2CAP:"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 1327,
   "Snippet": "//sys\tNanosleep(time *Timespec, leftover *Timespec) (err error)\n//sys\tPerfEventOpen(attr *PerfEventAttr, pid int, cpu int, groupFd int, flags int) (fd int, err error)\n//sys\tPivotRoot(newroot string, putold string) (err error) = SYS_PIVOT_ROOT\n//sysnb prlimit(pid int, resource int, newlimit *Rlimit, old *Rlimit) (err error) = SYS_PRLIMIT64\n//sys   Prctl(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 1330,
   "Snippet": "//sysnb prlimit(pid int, resource int, newlimit *Rlimit, old *Rlimit) (err error) = SYS_PRLIMIT64\n//sys   Prctl(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) (err error)\n//sys\tPselect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timespec, sigmask *Sigset_t) (n int, err error) = SYS_PSELECT6\n//sys\tread(fd int, p []byte) (n int, err error)\n//sys\tRemovexattr(path string, attr string) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 1284,
   "Snippet": "//sysnb\tEpollCtl(epfd int, op int, fd int, event *EpollEvent) (err error)\n//sys\tEventfd(initval uint, flags int) (fd int, err error) = SYS_EVENTFD2\n//sys\tExit(code int) = SYS_EXIT_GROUP\n//sys\tFallocate(fd int, mode uint32, off int64, len int64) (err error)\n//sys\tFchdir(fd int) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_freebsd.go",
   "Line": 12,
   "Snippet": "\n// +godefs map struct_in_addr [4]byte /* in_addr */\n// +godefs map struct_in6_addr [16]byte /* in6_addr */\n\npackage unix"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_freebsd.go",
   "Line": 11,
   "Snippet": "*/\n\n// +godefs map struct_in_addr [4]byte /* in_addr */\n// +godefs map struct_in6_addr [16]byte /* in6_addr */\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_freebsd_arm.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -l32 -arm -tags freebsd,arm syscall_bsd.go syscall_freebsd.go syscall_freebsd_arm.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 468,
   "Snippet": "// Fstat64_extended\n// __pthread_chdir\n// __pthread_fchdir\n// Audit\n// Auditon"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 443,
   "Snippet": "// __pthread_cond_destroy\n// __pthread_cond_broadcast\n// __pthread_cond_signal\n// Setsid_with_pid\n// __pthread_cond_timedwait"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 374,
   "Snippet": "// Sigreturn\n// Atsocket\n// Kqueue_from_portset_np\n// Kqueue_portset\n// Getattrlist"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 445,
   "Snippet": "// __pthread_cond_signal\n// Setsid_with_pid\n// __pthread_cond_timedwait\n// Aio_fsync\n// Aio_return"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 434,
   "Snippet": "// Identitysvc\n// Shared_region_check_np\n// Shared_region_map_np\n// __pthread_mutex_destroy\n// __pthread_mutex_init"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 485,
   "Snippet": "// Workq_ops\n// __mac_execve\n// __mac_syscall\n// __mac_get_file\n// __mac_set_file"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 461,
   "Snippet": "// __disable_threadsignal\n// __pthread_markcancel\n// __pthread_canceled\n// __semwait_signal\n// Proc_info"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 454,
   "Snippet": "// Aio_write\n// Lio_listio\n// __pthread_cond_wait\n// Iopolicysys\n// __pthread_kill"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 457,
   "Snippet": "// Iopolicysys\n// __pthread_kill\n// __pthread_sigmask\n// __sigwait\n// __disable_threadsignal"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 442,
   "Snippet": "// __pthread_cond_init\n// __pthread_cond_destroy\n// __pthread_cond_broadcast\n// __pthread_cond_signal\n// Setsid_with_pid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 435,
   "Snippet": "// Shared_region_check_np\n// Shared_region_map_np\n// __pthread_mutex_destroy\n// __pthread_mutex_init\n// __pthread_mutex_lock"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 492,
   "Snippet": "// __mac_get_proc\n// __mac_set_proc\n// __mac_get_fd\n// __mac_set_fd\n// __mac_get_pid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 441,
   "Snippet": "// __pthread_mutex_unlock\n// __pthread_cond_init\n// __pthread_cond_destroy\n// __pthread_cond_broadcast\n// __pthread_cond_signal"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 491,
   "Snippet": "// __mac_set_link\n// __mac_get_proc\n// __mac_set_proc\n// __mac_get_fd\n// __mac_set_fd"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 497,
   "Snippet": "// __mac_get_lcid\n// __mac_get_lctx\n// __mac_set_lctx\n// Setlcid\n// Read_nocancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 456,
   "Snippet": "// __pthread_cond_wait\n// Iopolicysys\n// __pthread_kill\n// __pthread_sigmask\n// __sigwait"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 487,
   "Snippet": "// __mac_syscall\n// __mac_get_file\n// __mac_set_file\n// __mac_get_link\n// __mac_set_link"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 522,
   "Snippet": "// Msgsnd_nocancel\n// Msgrcv_nocancel\n// Sem_wait_nocancel\n// Aio_suspend_nocancel\n// __sigwait_nocancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 523,
   "Snippet": "// Msgrcv_nocancel\n// Sem_wait_nocancel\n// Aio_suspend_nocancel\n// __sigwait_nocancel\n// __semwait_signal_nocancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 460,
   "Snippet": "// __sigwait\n// __disable_threadsignal\n// __pthread_markcancel\n// __pthread_canceled\n// __semwait_signal"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 490,
   "Snippet": "// __mac_get_link\n// __mac_set_link\n// __mac_get_proc\n// __mac_set_proc\n// __mac_get_fd"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 440,
   "Snippet": "// __pthread_mutex_trylock\n// __pthread_mutex_unlock\n// __pthread_cond_init\n// __pthread_cond_destroy\n// __pthread_cond_broadcast"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 494,
   "Snippet": "// __mac_get_fd\n// __mac_set_fd\n// __mac_get_pid\n// __mac_get_lcid\n// __mac_get_lctx"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 489,
   "Snippet": "// __mac_set_file\n// __mac_get_link\n// __mac_set_link\n// __mac_get_proc\n// __mac_set_proc"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 467,
   "Snippet": "// Lstat64_extended\n// Fstat64_extended\n// __pthread_chdir\n// __pthread_fchdir\n// Audit"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 438,
   "Snippet": "// __pthread_mutex_init\n// __pthread_mutex_lock\n// __pthread_mutex_trylock\n// __pthread_mutex_unlock\n// __pthread_cond_init"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 495,
   "Snippet": "// __mac_set_fd\n// __mac_get_pid\n// __mac_get_lcid\n// __mac_get_lctx\n// __mac_set_lctx"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 493,
   "Snippet": "// __mac_set_proc\n// __mac_get_fd\n// __mac_set_fd\n// __mac_get_pid\n// __mac_get_lcid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 439,
   "Snippet": "// __pthread_mutex_lock\n// __pthread_mutex_trylock\n// __pthread_mutex_unlock\n// __pthread_cond_init\n// __pthread_cond_destroy"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 458,
   "Snippet": "// __pthread_kill\n// __pthread_sigmask\n// __sigwait\n// __disable_threadsignal\n// __pthread_markcancel"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 525,
   "Snippet": "// Aio_suspend_nocancel\n// __sigwait_nocancel\n// __semwait_signal_nocancel\n// __mac_mount\n// __mac_get_mount"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 526,
   "Snippet": "// __sigwait_nocancel\n// __semwait_signal_nocancel\n// __mac_mount\n// __mac_get_mount\n// __mac_getfsstat"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 433,
   "Snippet": "// Mkdir_extended\n// Identitysvc\n// Shared_region_check_np\n// Shared_region_map_np\n// __pthread_mutex_destroy"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 527,
   "Snippet": "// __semwait_signal_nocancel\n// __mac_mount\n// __mac_get_mount\n// __mac_getfsstat"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 496,
   "Snippet": "// __mac_get_pid\n// __mac_get_lcid\n// __mac_get_lctx\n// __mac_set_lctx\n// Setlcid"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 528,
   "Snippet": "// __mac_mount\n// __mac_get_mount\n// __mac_getfsstat\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 462,
   "Snippet": "// __pthread_markcancel\n// __pthread_canceled\n// __semwait_signal\n// Proc_info\n// Stat64_extended"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 486,
   "Snippet": "// __mac_execve\n// __mac_syscall\n// __mac_get_file\n// __mac_set_file\n// __mac_get_link"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 484,
   "Snippet": "// Workq_open\n// Workq_ops\n// __mac_execve\n// __mac_syscall\n// __mac_get_file"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 436,
   "Snippet": "// Shared_region_map_np\n// __pthread_mutex_destroy\n// __pthread_mutex_init\n// __pthread_mutex_lock\n// __pthread_mutex_trylock"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 524,
   "Snippet": "// Sem_wait_nocancel\n// Aio_suspend_nocancel\n// __sigwait_nocancel\n// __semwait_signal_nocancel\n// __mac_mount"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 459,
   "Snippet": "// __pthread_sigmask\n// __sigwait\n// __disable_threadsignal\n// __pthread_markcancel\n// __pthread_canceled"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 488,
   "Snippet": "// __mac_get_file\n// __mac_set_file\n// __mac_get_link\n// __mac_set_link\n// __mac_get_proc"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 444,
   "Snippet": "// __pthread_cond_broadcast\n// __pthread_cond_signal\n// Setsid_with_pid\n// __pthread_cond_timedwait\n// Aio_fsync"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 437,
   "Snippet": "// __pthread_mutex_destroy\n// __pthread_mutex_init\n// __pthread_mutex_lock\n// __pthread_mutex_trylock\n// __pthread_mutex_unlock"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 101,
   "Snippet": "const ImplementsGetwd = true\n\n//sys\tGetcwd(buf []byte) (n int, err error) = SYS___GETCWD\n\nfunc Getwd() (string, error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 227,
   "Snippet": "//sys\tAdjtime(delta *Timeval, olddelta *Timeval) (err error)\n//sys\tCapEnter() (err error)\n//sys\tcapRightsGet(version int, fd int, rightsp *CapRights) (err error) = SYS___CAP_RIGHTS_GET\n//sys\tcapRightsLimit(fd int, rightsp *CapRights) (err error)\n//sys\tChdir(path string) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 250,
   "Snippet": "//sys\tExtattrDeleteLink(link string, attrnamespace int, attrname string) (err error)\n//sys\tExtattrListLink(link string, attrnamespace int, data uintptr, nbytes int) (ret int, err error)\n//sys\tFadvise(fd int, offset int64, length int64, advice int) (err error) = SYS_POSIX_FADVISE\n//sys\tFaccessat(dirfd int, path string, mode uint32, flags int) (err error)\n//sys\tFchdir(fd int) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 11,
   "Snippet": "// Note that sometimes we use a lowercase //sys name and wrap\n// it in our own nicer implementation, either here or in\n// syscall_bsd.go or syscall_unix.go.\n\npackage unix"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 527,
   "Snippet": "}\n\n//sys\t__minor(version int, dev uint64) (val uint)\n\nfunc Minor(dev uint64) uint32 {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 11,
   "Snippet": "// Note that sometimes we use a lowercase //sys name and wrap\n// it in our own nicer implementation, either here or in\n// syscall_solaris.go or syscall_unix.go.\n\npackage unix"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 422,
   "Snippet": "}\n\n//sys\trecvmsg(s int, msg *Msghdr, flags int) (n int, err error) = libsocket.__xnet_recvmsg\n\nfunc Recvmsg(fd int, p, oob []byte, flags int) (n, oobn int, recvflags int, from Sockaddr, err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 521,
   "Snippet": "}\n\n//sys\t__major(version int, dev uint64) (val uint)\n\nfunc Major(dev uint64) uint32 {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 691,
   "Snippet": "//sys\tmunmap(addr uintptr, length uintptr) (err error)\n//sys\tsendfile(outfd int, infd int, offset *int64, count int) (written int, err error) = libsendfile.sendfile\n//sys\tsendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) = libsocket.__xnet_sendto\n//sys\tsocket(domain int, typ int, proto int) (fd int, err error) = libsocket.__xnet_socket\n//sysnb\tsocketpair(domain int, typ int, proto int, fd *[2]int32) (err error) = libsocket.__xnet_socketpair"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 686,
   "Snippet": "//sys\tUstat(dev int, ubuf *Ustat_t) (err error)\n//sys\tUtime(path string, buf *Utimbuf) (err error)\n//sys\tbind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) = libsocket.__xnet_bind\n//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) = libsocket.__xnet_connect\n//sys\tmmap(addr uintptr, length uintptr, prot int, flag int, fd int, pos int64) (ret uintptr, err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 693,
   "Snippet": "//sys\tsendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) = libsocket.__xnet_sendto\n//sys\tsocket(domain int, typ int, proto int) (fd int, err error) = libsocket.__xnet_socket\n//sysnb\tsocketpair(domain int, typ int, proto int, fd *[2]int32) (err error) = libsocket.__xnet_socketpair\n//sys\twrite(fd int, p []byte) (n int, err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error) = libsocket.__xnet_getsockopt"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 687,
   "Snippet": "//sys\tUtime(path string, buf *Utimbuf) (err error)\n//sys\tbind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) = libsocket.__xnet_bind\n//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) = libsocket.__xnet_connect\n//sys\tmmap(addr uintptr, length uintptr, prot int, flag int, fd int, pos int64) (ret uintptr, err error)\n//sys\tmunmap(addr uintptr, length uintptr) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 630,
   "Snippet": "//sys\tLchown(path string, uid int, gid int) (err error)\n//sys\tLink(path string, link string) (err error)\n//sys\tListen(s int, backlog int) (err error) = libsocket.__xnet_llisten\n//sys\tLstat(path string, stat *Stat_t) (err error)\n//sys\tMadvise(b []byte, advice int) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 692,
   "Snippet": "//sys\tsendfile(outfd int, infd int, offset *int64, count int) (written int, err error) = libsendfile.sendfile\n//sys\tsendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) = libsocket.__xnet_sendto\n//sys\tsocket(domain int, typ int, proto int) (fd int, err error) = libsocket.__xnet_socket\n//sysnb\tsocketpair(domain int, typ int, proto int, fd *[2]int32) (err error) = libsocket.__xnet_socketpair\n//sys\twrite(fd int, p []byte) (n int, err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 695,
   "Snippet": "//sysnb\tsocketpair(domain int, typ int, proto int, fd *[2]int32) (err error) = libsocket.__xnet_socketpair\n//sys\twrite(fd int, p []byte) (n int, err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error) = libsocket.__xnet_getsockopt\n//sysnb\tgetpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) = libsocket.getpeername\n//sys\tsetsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) = libsocket.setsockopt"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 38,
   "Snippet": "}\n\n//sysnb\tpipe(p *[2]_C_int) (n int, err error)\n\nfunc Pipe(p []int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 152,
   "Snippet": " */\n\n//sysnb\tgetgroups(ngid int, gid *_Gid_t) (n int, err error)\n//sysnb\tsetgroups(ngid int, gid *_Gid_t) (err error)\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 153,
   "Snippet": "\n//sysnb\tgetgroups(ngid int, gid *_Gid_t) (n int, err error)\n//sysnb\tsetgroups(ngid int, gid *_Gid_t) (err error)\n\nfunc Getgroups() (gids []int, err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 461,
   "Snippet": "}\n\n//sys\tsendmsg(s int, msg *Msghdr, flags int) (n int, err error) = libsocket.__xnet_sendmsg\n\nfunc SendmsgN(fd int, p, oob []byte, to Sockaddr, flags int) (n int, err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 515,
   "Snippet": "}\n\n//sys\t__makedev(version int, major uint, minor uint) (val uint64)\n\nfunc Mkdev(major, minor uint32) uint64 {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 249,
   "Snippet": "func (w WaitStatus) TrapCause() int { return -1 }\n\n//sys\twait4(pid int32, statusp *_C_int, options int, rusage *Rusage) (wpid int32, err error)\n\nfunc Wait4(pid int, wstatus *WaitStatus, options int, rusage *Rusage) (int, error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_linux_arm64.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -tags linux,arm64 syscall_linux.go syscall_linux_arm64.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/mkpost.go",
   "Line": 45,
   "Snippet": "\t}\n\n\t// Intentionally export __val fields in Fsid and Sigset_t\n\tvalRegex := regexp.MustCompile(`type (Fsid|Sigset_t) struct {(\\s+)X__val(\\s+\\S+\\s+)}`)\n\tb = valRegex.ReplaceAll(b, []byte(\"type $1 struct {${2}Val$3}\"))"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_linux_sparc64.go",
   "Line": 1,
   "Snippet": "\n// mksysnum_linux.pl -Ilinux/usr/include -m64 -D__arch64__ linux/usr/include/asm/unistd.h\n// Code generated by the command above; DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_linux_386.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -l32 -tags linux,386 syscall_linux.go syscall_linux_386.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_linux_mips64.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -tags linux,mips64 syscall_linux.go syscall_linux_mips64x.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_386.go",
   "Line": 37,
   "Snippet": "}\n\n//sysnb pipe2(p *[2]_C_int, flags int) (err error)\n\nfunc Pipe2(p []int, flags int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_386.go",
   "Line": 171,
   "Snippet": "//sys\tfutimesat(dirfd int, path string, times *[2]Timeval) (err error)\n//sysnb\tGettimeofday(tv *Timeval) (err error)\n//sysnb\tTime(t *Time_t) (tt Time_t, err error)\n//sys\tUtime(path string, buf *Utimbuf) (err error)\n//sys\tutimes(path string, times *[2]Timeval) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_386.go",
   "Line": 58,
   "Snippet": "//sys\tFchown(fd int, uid int, gid int) (err error) = SYS_FCHOWN32\n//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64\n//sys\tFtruncate(fd int, length int64) (err error) = SYS_FTRUNCATE64\n//sysnb\tGetegid() (egid int) = SYS_GETEGID32"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_386.go",
   "Line": 79,
   "Snippet": "//sysnb\tSetreuid(ruid int, euid int) (err error) = SYS_SETREUID32\n//sys\tSplice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int, err error)\n//sys\tStat(path string, stat *Stat_t) (err error) = SYS_STAT64\n//sys\tSyncFileRange(fd int, off int64, n int64, flags int) (err error)\n//sys\tTruncate(path string, length int64) (err error) = SYS_TRUNCATE64"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_386.go",
   "Line": 55,
   "Snippet": "//sysnb\tEpollCreate(size int) (fd int, err error)\n//sys\tEpollWait(epfd int, events []EpollEvent, msec int) (n int, err error)\n//sys\tFadvise(fd int, offset int64, length int64, advice int) (err error) = SYS_FADVISE64_64\n//sys\tFchown(fd int, uid int, gid int) (err error) = SYS_FCHOWN32\n//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_386.go",
   "Line": 83,
   "Snippet": "//sys\tTruncate(path string, length int64) (err error) = SYS_TRUNCATE64\n//sys\tUstat(dev int, ubuf *Ustat_t) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error) = SYS_GETGROUPS32\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error) = SYS_SETGROUPS32\n//sys\tSelect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error) = SYS__NEWSELECT"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_386.go",
   "Line": 68,
   "Snippet": "//sys\tIopl(level int) (err error)\n//sys\tLchown(path string, uid int, gid int) (err error) = SYS_LCHOWN32\n//sys\tLstat(path string, stat *Stat_t) (err error) = SYS_LSTAT64\n//sys\tPread(fd int, p []byte, offset int64) (n int, err error) = SYS_PREAD64\n//sys\tPwrite(fd int, p []byte, offset int64) (n int, err error) = SYS_PWRITE64"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_386.go",
   "Line": 84,
   "Snippet": "//sys\tUstat(dev int, ubuf *Ustat_t) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error) = SYS_GETGROUPS32\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error) = SYS_SETGROUPS32\n//sys\tSelect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error) = SYS__NEWSELECT\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_386.go",
   "Line": 85,
   "Snippet": "//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error) = SYS_GETGROUPS32\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error) = SYS_SETGROUPS32\n//sys\tSelect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error) = SYS__NEWSELECT\n\n//sys\tmmap2(addr uintptr, length uintptr, prot int, flags int, fd int, pageOffset uintptr) (xaddr uintptr, err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_386.go",
   "Line": 57,
   "Snippet": "//sys\tFadvise(fd int, offset int64, length int64, advice int) (err error) = SYS_FADVISE64_64\n//sys\tFchown(fd int, uid int, gid int) (err error) = SYS_FCHOWN32\n//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64\n//sys\tFtruncate(fd int, length int64) (err error) = SYS_FTRUNCATE64"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_386.go",
   "Line": 24,
   "Snippet": "}\n\n//sysnb\tpipe(p *[2]_C_int) (err error)\n\nfunc Pipe(p []int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_arm64.go",
   "Line": 18,
   "Snippet": "}\n\n//sys\tEpollWait(epfd int, events []EpollEvent, msec int) (n int, err error) = SYS_EPOLL_PWAIT\n//sys\tFadvise(fd int, offset int64, length int64, advice int) (err error) = SYS_FADVISE64\n//sys\tFchown(fd int, uid int, gid int) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_arm64.go",
   "Line": 78,
   "Snippet": "//sys\tbind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_arm64.go",
   "Line": 79,
   "Snippet": "//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)\n//sys\tsetsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_arm64.go",
   "Line": 157,
   "Snippet": "}\n\n//sysnb pipe2(p *[2]_C_int, flags int) (err error)\n\nfunc Pipe2(p []int, flags int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_dragonfly_amd64.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -dragonfly -tags dragonfly,amd64 syscall_bsd.go syscall_dragonfly.go syscall_dragonfly_amd64.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_darwin.go",
   "Line": 11,
   "Snippet": "*/\n\n// +godefs map struct_in_addr [4]byte /* in_addr */\n// +godefs map struct_in6_addr [16]byte /* in6_addr */\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_darwin.go",
   "Line": 12,
   "Snippet": "\n// +godefs map struct_in_addr [4]byte /* in_addr */\n// +godefs map struct_in6_addr [16]byte /* in6_addr */\n\npackage unix"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_openbsd.go",
   "Line": 11,
   "Snippet": "*/\n\n// +godefs map struct_in_addr [4]byte /* in_addr */\n// +godefs map struct_in6_addr [16]byte /* in6_addr */\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_openbsd.go",
   "Line": 12,
   "Snippet": "\n// +godefs map struct_in_addr [4]byte /* in_addr */\n// +godefs map struct_in6_addr [16]byte /* in6_addr */\n\npackage unix"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_solaris.go",
   "Line": 12,
   "Snippet": "\n// +godefs map struct_in_addr [4]byte /* in_addr */\n// +godefs map struct_in6_addr [16]byte /* in6_addr */\n\npackage unix"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_solaris.go",
   "Line": 11,
   "Snippet": "*/\n\n// +godefs map struct_in_addr [4]byte /* in_addr */\n// +godefs map struct_in6_addr [16]byte /* in6_addr */\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_linux_arm.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -l32 -arm -tags linux,arm syscall_linux.go syscall_linux_arm.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/ztypes_darwin_arm.go",
   "Line": 1,
   "Snippet": "\n// NOTE: cgo can't generate struct Stat_t and struct Statfs_t yet\n// Created by cgo -godefs - DO NOT EDIT\n// cgo -godefs types_darwin.go"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/fcntl_linux_32bit.go",
   "Line": 11,
   "Snippet": "func init() {\n\t// On 32-bit Linux systems, the fcntl syscall that matches Go's\n\t// Flock_t type is SYS_FCNTL64, not SYS_FCNTL.\n\tfcntl64Syscall = SYS_FCNTL64\n}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_darwin_arm64.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -tags darwin,arm64 syscall_bsd.go syscall_darwin.go syscall_darwin_arm64.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_arm.go",
   "Line": 33,
   "Snippet": "}\n\n//sysnb pipe2(p *[2]_C_int, flags int) (err error)\n\nfunc Pipe2(p []int, flags int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_arm.go",
   "Line": 81,
   "Snippet": "//sys\tEpollWait(epfd int, events []EpollEvent, msec int) (n int, err error)\n//sys\tFchown(fd int, uid int, gid int) (err error) = SYS_FCHOWN32\n//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64\n//sysnb\tGetegid() (egid int) = SYS_GETEGID32"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_arm.go",
   "Line": 90,
   "Snippet": "//sys\tLchown(path string, uid int, gid int) (err error) = SYS_LCHOWN32\n//sys\tListen(s int, n int) (err error)\n//sys\tLstat(path string, stat *Stat_t) (err error) = SYS_LSTAT64\n//sys\tPause() (err error)\n//sys\tsendfile(outfd int, infd int, offset *int64, count int) (written int, err error) = SYS_SENDFILE64"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_arm.go",
   "Line": 93,
   "Snippet": "//sys\tPause() (err error)\n//sys\tsendfile(outfd int, infd int, offset *int64, count int) (written int, err error) = SYS_SENDFILE64\n//sys\tSelect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error) = SYS__NEWSELECT\n//sys\tSetfsgid(gid int) (err error) = SYS_SETFSGID32\n//sys\tSetfsuid(uid int) (err error) = SYS_SETFSUID32"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_arm.go",
   "Line": 102,
   "Snippet": "//sys\tShutdown(fd int, how int) (err error)\n//sys\tSplice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int, err error)\n//sys\tStat(path string, stat *Stat_t) (err error) = SYS_STAT64\n//sys\tUstat(dev int, ubuf *Ustat_t) (err error)\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_arm.go",
   "Line": 82,
   "Snippet": "//sys\tFchown(fd int, uid int, gid int) (err error) = SYS_FCHOWN32\n//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64\n//sysnb\tGetegid() (egid int) = SYS_GETEGID32\n//sysnb\tGeteuid() (euid int) = SYS_GETEUID32"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_arm.go",
   "Line": 63,
   "Snippet": "//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error) = SYS_GETGROUPS32\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error) = SYS_SETGROUPS32\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)\n//sys\tsetsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_arm.go",
   "Line": 62,
   "Snippet": "//sys\tbind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error) = SYS_GETGROUPS32\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error) = SYS_SETGROUPS32\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -tags linux,ppc64 syscall_linux.go syscall_linux_ppc64x.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/cap_freebsd.go",
   "Line": 126,
   "Snippet": "// CapRightsIsSet checks whether all the permissions in setrights are present in rights.\nfunc CapRightsIsSet(rights *CapRights, setrights []uint64) (bool, error) {\n\t// This is essentially a copy of cap_rights_is_vset()\n\tif capver(rights) != CAP_RIGHTS_VERSION_00 {\n\t\treturn false, fmt.Errorf(\"bad rights version %d\", capver(rights))"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/cap_freebsd.go",
   "Line": 56,
   "Snippet": "// CapRightsSet sets the permissions in setrights in rights.\nfunc CapRightsSet(rights *CapRights, setrights []uint64) error {\n\t// This is essentially a copy of cap_rights_vset()\n\tif capver(rights) != CAP_RIGHTS_VERSION_00 {\n\t\treturn fmt.Errorf(\"bad rights version %d\", capver(rights))"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/cap_freebsd.go",
   "Line": 91,
   "Snippet": "// CapRightsClear clears the permissions in clearrights from rights.\nfunc CapRightsClear(rights *CapRights, clearrights []uint64) error {\n\t// This is essentially a copy of cap_rights_vclear()\n\tif capver(rights) != CAP_RIGHTS_VERSION_00 {\n\t\treturn fmt.Errorf(\"bad rights version %d\", capver(rights))"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_ppc64x.go",
   "Line": 70,
   "Snippet": "//sys\tfutimesat(dirfd int, path string, times *[2]Timeval) (err error)\n//sysnb\tGettimeofday(tv *Timeval) (err error)\n//sysnb\tTime(t *Time_t) (tt Time_t, err error)\n//sys\tUtime(path string, buf *Utimbuf) (err error)\n//sys\tutimes(path string, times *[2]Timeval) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_ppc64x.go",
   "Line": 98,
   "Snippet": "}\n\n//sysnb pipe(p *[2]_C_int) (err error)\n\nfunc Pipe(p []int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_ppc64x.go",
   "Line": 111,
   "Snippet": "}\n\n//sysnb pipe2(p *[2]_C_int, flags int) (err error)\n\nfunc Pipe2(p []int, flags int) (err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_ppc64x.go",
   "Line": 16,
   "Snippet": "//sys\tFchown(fd int, uid int, gid int) (err error)\n//sys\tFstat(fd int, stat *Stat_t) (err error)\n//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_NEWFSTATAT\n//sys\tFstatfs(fd int, buf *Statfs_t) (err error)\n//sys\tFtruncate(fd int, length int64) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_ppc64x.go",
   "Line": 34,
   "Snippet": "//sys\tPwrite(fd int, p []byte, offset int64) (n int, err error) = SYS_PWRITE64\n//sys\tSeek(fd int, offset int64, whence int) (off int64, err error) = SYS_LSEEK\n//sys\tSelect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error) = SYS__NEWSELECT\n//sys\tsendfile(outfd int, infd int, offset *int64, count int) (written int, err error)\n//sys\tSetfsgid(gid int) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_ppc64x.go",
   "Line": 55,
   "Snippet": "//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)\n//sys\tsetsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_ppc64x.go",
   "Line": 47,
   "Snippet": "//sys\tStat(path string, stat *Stat_t) (err error)\n//sys\tStatfs(path string, buf *Statfs_t) (err error)\n//sys\tSyncFileRange(fd int, off int64, n int64, flags int) (err error) = SYS_SYNC_FILE_RANGE2\n//sys\tTruncate(path string, length int64) (err error)\n//sys\tUstat(dev int, ubuf *Ustat_t) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_ppc64x.go",
   "Line": 54,
   "Snippet": "//sys\tbind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64le.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -tags linux,ppc64le syscall_linux.go syscall_linux_ppc64x.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsyscall_linux_mips.go",
   "Line": 1,
   "Snippet": "\n// mksyscall.pl -b32 -arm -tags linux,mips syscall_linux.go syscall_linux_mipsx.go\n// Code generated by the command above; see README.md. DO NOT EDIT.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/mksyscall.go",
   "Line": 7,
   "Snippet": "package windows\n\n//go:generate go run $GOROOT/src/syscall/mksyscall_windows.go -output zsyscall_windows.go eventlog.go service.go syscall_windows.go security_windows.go\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/service.go",
   "Line": 176,
   "Snippet": "//sys\tQueryServiceStatus(service Handle, status *SERVICE_STATUS) (err error) = advapi32.QueryServiceStatus\n//sys\tControlService(service Handle, control uint32, status *SERVICE_STATUS) (err error) = advapi32.ControlService\n//sys\tStartServiceCtrlDispatcher(serviceTable *SERVICE_TABLE_ENTRY) (err error) = advapi32.StartServiceCtrlDispatcherW\n//sys\tSetServiceStatus(service Handle, serviceStatus *SERVICE_STATUS) (err error) = advapi32.SetServiceStatus\n//sys\tChangeServiceConfig(service Handle, serviceType uint32, startType uint32, errorControl uint32, binaryPathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16, displayName *uint16) (err error) = advapi32.ChangeServiceConfigW"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/service.go",
   "Line": 179,
   "Snippet": "//sys\tSetServiceStatus(service Handle, serviceStatus *SERVICE_STATUS) (err error) = advapi32.SetServiceStatus\n//sys\tChangeServiceConfig(service Handle, serviceType uint32, startType uint32, errorControl uint32, binaryPathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16, displayName *uint16) (err error) = advapi32.ChangeServiceConfigW\n//sys\tQueryServiceConfig(service Handle, serviceConfig *QUERY_SERVICE_CONFIG, bufSize uint32, bytesNeeded *uint32) (err error) = advapi32.QueryServiceConfigW\n//sys\tChangeServiceConfig2(service Handle, infoLevel uint32, info *byte) (err error) = advapi32.ChangeServiceConfig2W\n//sys\tQueryServiceConfig2(service Handle, infoLevel uint32, buff *byte, buffSize uint32, bytesNeeded *uint32) (err error) = advapi32.QueryServiceConfig2W"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/dll_windows.go",
   "Line": 320,
   "Snippet": "\t// https://msdn.microsoft.com/en-us/library/ms684179(v=vs.85).aspx says:\n\t// \"Windows 7, Windows Server 2008 R2, Windows Vista, and Windows\n\t// Server 2008: The LOAD_LIBRARY_SEARCH_* flags are available on\n\t// systems that have KB2533623 installed. To determine whether the\n\t// flags are available, use GetProcAddress to get the address of the"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/dll_windows.go",
   "Line": 324,
   "Snippet": "\t// flags are available, use GetProcAddress to get the address of the\n\t// AddDllDirectory, RemoveDllDirectory, or SetDefaultDllDirectories\n\t// function. If GetProcAddress succeeds, the LOAD_LIBRARY_SEARCH_*\n\t// flags can be used with LoadLibraryEx.\"\n\tcanDoSearchSystem32Once.v = (modkernel32.NewProc(\"AddDllDirectory\").Find() == nil)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 612,
   "Snippet": "//sys\tGetAcceptExSockaddrs(buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, lrsa **RawSockaddrAny, lrsalen *int32, rrsa **RawSockaddrAny, rrsalen *int32) = mswsock.GetAcceptExSockaddrs\n//sys\tWSARecv(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSARecv\n//sys\tWSASend(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSASend\n//sys\tWSARecvFrom(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32,  from *RawSockaddrAny, fromlen *int32, overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSARecvFrom\n//sys\tWSASendTo(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to *RawSockaddrAny, tolen int32,  overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSASendTo"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 608,
   "Snippet": "//sys\tlisten(s Handle, backlog int32) (err error) [failretval==socket_error] = ws2_32.listen\n//sys\tshutdown(s Handle, how int32) (err error) [failretval==socket_error] = ws2_32.shutdown\n//sys\tClosesocket(s Handle) (err error) [failretval==socket_error] = ws2_32.closesocket\n//sys\tAcceptEx(ls Handle, as Handle, buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, recvd *uint32, overlapped *Overlapped) (err error) = mswsock.AcceptEx\n//sys\tGetAcceptExSockaddrs(buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, lrsa **RawSockaddrAny, lrsalen *int32, rrsa **RawSockaddrAny, rrsalen *int32) = mswsock.GetAcceptExSockaddrs"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 600,
   "Snippet": "//sys\tWSAIoctl(s Handle, iocc uint32, inbuf *byte, cbif uint32, outbuf *byte, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr) (err error) [failretval==socket_error] = ws2_32.WSAIoctl\n//sys\tsocket(af int32, typ int32, protocol int32) (handle Handle, err error) [failretval==InvalidHandle] = ws2_32.socket\n//sys\tSetsockopt(s Handle, level int32, optname int32, optval *byte, optlen int32) (err error) [failretval==socket_error] = ws2_32.setsockopt\n//sys\tGetsockopt(s Handle, level int32, optname int32, optval *byte, optlen *int32) (err error) [failretval==socket_error] = ws2_32.getsockopt\n//sys\tbind(s Handle, name unsafe.Pointer, namelen int32) (err error) [failretval==socket_error] = ws2_32.bind"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 601,
   "Snippet": "//sys\tsocket(af int32, typ int32, protocol int32) (handle Handle, err error) [failretval==InvalidHandle] = ws2_32.socket\n//sys\tSetsockopt(s Handle, level int32, optname int32, optval *byte, optlen int32) (err error) [failretval==socket_error] = ws2_32.setsockopt\n//sys\tGetsockopt(s Handle, level int32, optname int32, optval *byte, optlen *int32) (err error) [failretval==socket_error] = ws2_32.getsockopt\n//sys\tbind(s Handle, name unsafe.Pointer, namelen int32) (err error) [failretval==socket_error] = ws2_32.bind\n//sys\tconnect(s Handle, name unsafe.Pointer, namelen int32) (err error) [failretval==socket_error] = ws2_32.connect"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 613,
   "Snippet": "//sys\tWSARecv(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSARecv\n//sys\tWSASend(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSASend\n//sys\tWSARecvFrom(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32,  from *RawSockaddrAny, fromlen *int32, overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSARecvFrom\n//sys\tWSASendTo(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to *RawSockaddrAny, tolen int32,  overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSASendTo\n//sys\tGetHostByName(name string) (h *Hostent, err error) [failretval==nil] = ws2_32.gethostbyname"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 602,
   "Snippet": "//sys\tSetsockopt(s Handle, level int32, optname int32, optval *byte, optlen int32) (err error) [failretval==socket_error] = ws2_32.setsockopt\n//sys\tGetsockopt(s Handle, level int32, optname int32, optval *byte, optlen *int32) (err error) [failretval==socket_error] = ws2_32.getsockopt\n//sys\tbind(s Handle, name unsafe.Pointer, namelen int32) (err error) [failretval==socket_error] = ws2_32.bind\n//sys\tconnect(s Handle, name unsafe.Pointer, namelen int32) (err error) [failretval==socket_error] = ws2_32.connect\n//sys\tgetsockname(s Handle, rsa *RawSockaddrAny, addrlen *int32) (err error) [failretval==socket_error] = ws2_32.getsockname"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 598,
   "Snippet": "//sys\tWSAStartup(verreq uint32, data *WSAData) (sockerr error) = ws2_32.WSAStartup\n//sys\tWSACleanup() (err error) [failretval==socket_error] = ws2_32.WSACleanup\n//sys\tWSAIoctl(s Handle, iocc uint32, inbuf *byte, cbif uint32, outbuf *byte, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr) (err error) [failretval==socket_error] = ws2_32.WSAIoctl\n//sys\tsocket(af int32, typ int32, protocol int32) (handle Handle, err error) [failretval==InvalidHandle] = ws2_32.socket\n//sys\tSetsockopt(s Handle, level int32, optname int32, optval *byte, optlen int32) (err error) [failretval==socket_error] = ws2_32.setsockopt"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 607,
   "Snippet": "//sys\tgetpeername(s Handle, rsa *RawSockaddrAny, addrlen *int32) (err error) [failretval==socket_error] = ws2_32.getpeername\n//sys\tlisten(s Handle, backlog int32) (err error) [failretval==socket_error] = ws2_32.listen\n//sys\tshutdown(s Handle, how int32) (err error) [failretval==socket_error] = ws2_32.shutdown\n//sys\tClosesocket(s Handle) (err error) [failretval==socket_error] = ws2_32.closesocket\n//sys\tAcceptEx(ls Handle, as Handle, buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, recvd *uint32, overlapped *Overlapped) (err error) = mswsock.AcceptEx"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 611,
   "Snippet": "//sys\tAcceptEx(ls Handle, as Handle, buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, recvd *uint32, overlapped *Overlapped) (err error) = mswsock.AcceptEx\n//sys\tGetAcceptExSockaddrs(buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, lrsa **RawSockaddrAny, lrsalen *int32, rrsa **RawSockaddrAny, rrsalen *int32) = mswsock.GetAcceptExSockaddrs\n//sys\tWSARecv(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSARecv\n//sys\tWSASend(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSASend\n//sys\tWSARecvFrom(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32,  from *RawSockaddrAny, fromlen *int32, overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSARecvFrom"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 605,
   "Snippet": "//sys\tconnect(s Handle, name unsafe.Pointer, namelen int32) (err error) [failretval==socket_error] = ws2_32.connect\n//sys\tgetsockname(s Handle, rsa *RawSockaddrAny, addrlen *int32) (err error) [failretval==socket_error] = ws2_32.getsockname\n//sys\tgetpeername(s Handle, rsa *RawSockaddrAny, addrlen *int32) (err error) [failretval==socket_error] = ws2_32.getpeername\n//sys\tlisten(s Handle, backlog int32) (err error) [failretval==socket_error] = ws2_32.listen\n//sys\tshutdown(s Handle, how int32) (err error) [failretval==socket_error] = ws2_32.shutdown"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 597,
   "Snippet": "\n//sys\tWSAStartup(verreq uint32, data *WSAData) (sockerr error) = ws2_32.WSAStartup\n//sys\tWSACleanup() (err error) [failretval==socket_error] = ws2_32.WSACleanup\n//sys\tWSAIoctl(s Handle, iocc uint32, inbuf *byte, cbif uint32, outbuf *byte, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr) (err error) [failretval==socket_error] = ws2_32.WSAIoctl\n//sys\tsocket(af int32, typ int32, protocol int32) (handle Handle, err error) [failretval==InvalidHandle] = ws2_32.socket"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 603,
   "Snippet": "//sys\tGetsockopt(s Handle, level int32, optname int32, optval *byte, optlen *int32) (err error) [failretval==socket_error] = ws2_32.getsockopt\n//sys\tbind(s Handle, name unsafe.Pointer, namelen int32) (err error) [failretval==socket_error] = ws2_32.bind\n//sys\tconnect(s Handle, name unsafe.Pointer, namelen int32) (err error) [failretval==socket_error] = ws2_32.connect\n//sys\tgetsockname(s Handle, rsa *RawSockaddrAny, addrlen *int32) (err error) [failretval==socket_error] = ws2_32.getsockname\n//sys\tgetpeername(s Handle, rsa *RawSockaddrAny, addrlen *int32) (err error) [failretval==socket_error] = ws2_32.getpeername"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 606,
   "Snippet": "//sys\tgetsockname(s Handle, rsa *RawSockaddrAny, addrlen *int32) (err error) [failretval==socket_error] = ws2_32.getsockname\n//sys\tgetpeername(s Handle, rsa *RawSockaddrAny, addrlen *int32) (err error) [failretval==socket_error] = ws2_32.getpeername\n//sys\tlisten(s Handle, backlog int32) (err error) [failretval==socket_error] = ws2_32.listen\n//sys\tshutdown(s Handle, how int32) (err error) [failretval==socket_error] = ws2_32.shutdown\n//sys\tClosesocket(s Handle) (err error) [failretval==socket_error] = ws2_32.closesocket"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 604,
   "Snippet": "//sys\tbind(s Handle, name unsafe.Pointer, namelen int32) (err error) [failretval==socket_error] = ws2_32.bind\n//sys\tconnect(s Handle, name unsafe.Pointer, namelen int32) (err error) [failretval==socket_error] = ws2_32.connect\n//sys\tgetsockname(s Handle, rsa *RawSockaddrAny, addrlen *int32) (err error) [failretval==socket_error] = ws2_32.getsockname\n//sys\tgetpeername(s Handle, rsa *RawSockaddrAny, addrlen *int32) (err error) [failretval==socket_error] = ws2_32.getpeername\n//sys\tlisten(s Handle, backlog int32) (err error) [failretval==socket_error] = ws2_32.listen"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 614,
   "Snippet": "//sys\tWSASend(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSASend\n//sys\tWSARecvFrom(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32,  from *RawSockaddrAny, fromlen *int32, overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSARecvFrom\n//sys\tWSASendTo(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to *RawSockaddrAny, tolen int32,  overlapped *Overlapped, croutine *byte) (err error) [failretval==socket_error] = ws2_32.WSASendTo\n//sys\tGetHostByName(name string) (h *Hostent, err error) [failretval==nil] = ws2_32.gethostbyname\n//sys\tGetServByName(name string, proto string) (s *Servent, err error) [failretval==nil] = ws2_32.getservbyname"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 342,
   "Snippet": "\tif e != nil {\n\t\tif e == ERROR_BROKEN_PIPE {\n\t\t\t// NOTE(brainman): work around ERROR_BROKEN_PIPE is returned on reading EOF from stdin\n\t\t\treturn 0, nil\n\t\t}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/syscall_windows.go",
   "Line": 186,
   "Snippet": "//sys\tSetEnvironmentVariable(name *uint16, value *uint16) (err error) = kernel32.SetEnvironmentVariableW\n//sys\tSetFileTime(handle Handle, ctime *Filetime, atime *Filetime, wtime *Filetime) (err error)\n//sys\tGetFileAttributes(name *uint16) (attrs uint32, err error) [failretval==INVALID_FILE_ATTRIBUTES] = kernel32.GetFileAttributesW\n//sys\tSetFileAttributes(name *uint16, attrs uint32) (err error) = kernel32.SetFileAttributesW\n//sys\tGetFileAttributesEx(name *uint16, level uint32, info *byte) (err error) = kernel32.GetFileAttributesExW"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/windows/types_windows.go",
   "Line": 823,
   "Snippet": "const SIO_GET_INTERFACE_LIST = 0x4004747F\n\n// TODO(mattn): SockaddrGen is union of sockaddr/sockaddr_in/sockaddr_in6_old.\n// will be fixed to change variable type as suitable.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/ssh/keys.go",
   "Line": 434,
   "Snippet": "\n\t// Per RFC 4253, section 6.6,\n\t// The value for 'dss_signature_blob' is encoded as a string containing\n\t// r, followed by s (which are 160-bit integers, without lengths or\n\t// padding, unsigned, and in network byte order)."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/ssh/handshake.go",
   "Line": 562,
   "Snippet": "\t//\n\t// RFC 4253 section 7 defines the kex and the agreement method for\n\t// first_kex_packet_follows. It states that the guessed packet\n\t// should be ignored if the \"kex algorithm and/or the host\n\t// key algorithm is guessed wrong (server and client have"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 606,
   "Snippet": "//\n// @param[in,out]   data        A pointer to an application data specified by\n//                              yaml_emitter_set_output().\n// @param[in]       buffer      The buffer with bytes to be written.\n// @param[in]       size        The size of the buffer."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 411,
   "Snippet": "//\n// [in,out]   data        A pointer to an application data specified by\n//                        yaml_parser_set_input().\n// [out]      buffer      The buffer to write the data from the source.\n// [in]       size        The size of the buffer."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 643,
   "Snippet": "// The emitter structure.\n//\n// All members are internal.  Manage the structure using the @c yaml_emitter_\n// family of functions.\ntype yaml_emitter_t struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 524,
   "Snippet": "//\n// All members are internal. Manage the structure using the\n// yaml_parser_ family of functions.\ntype yaml_parser_t struct {\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/apic.go",
   "Line": 103,
   "Snippet": "}\n\n// yaml_writer_write_handler uses emitter.output_writer to write the\n// emitted text.\nfunc yaml_writer_write_handler(emitter *yaml_emitter_t, buffer []byte) error {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yaml.go",
   "Line": 169,
   "Snippet": "// The field tag format accepted is:\n//\n//     `(...) yaml:\"[\u003ckey\u003e][,\u003cflag1\u003e[,\u003cflag2\u003e]]\" (...)`\n//\n// The following flags are currently supported:"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 724,
   "Snippet": "\n// Parse the productions:\n// block_mapping        ::= BLOCK-MAPPING_START\n//\n//                          ((KEY block_node_or_indentless_sequence?)?"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 728,
   "Snippet": "//                          ((KEY block_node_or_indentless_sequence?)?\n//\n//                          (VALUE block_node_or_indentless_sequence?)?)*\n//                           ***** *\n//                          BLOCK-END"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 726,
   "Snippet": "// block_mapping        ::= BLOCK-MAPPING_START\n//\n//                          ((KEY block_node_or_indentless_sequence?)?\n//\n//                          (VALUE block_node_or_indentless_sequence?)?)*"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 279,
   "Snippet": "\n// Parse the productions:\n// explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*\n//                                                    ***********\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 670,
   "Snippet": "//                          ((KEY block_node_or_indentless_sequence?)?\n//                            *** *\n//                          (VALUE block_node_or_indentless_sequence?)?)*\n//\n//                          BLOCK-END"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 668,
   "Snippet": "// block_mapping        ::= BLOCK-MAPPING_START\n//                          *******************\n//                          ((KEY block_node_or_indentless_sequence?)?\n//                            *** *\n//                          (VALUE block_node_or_indentless_sequence?)?)*"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 666,
   "Snippet": "\n// Parse the productions:\n// block_mapping        ::= BLOCK-MAPPING_START\n//                          *******************\n//                          ((KEY block_node_or_indentless_sequence?)?"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 830,
   "Snippet": "//\n// Parse the productions:\n// flow_sequence_entry  ::= flow_node | KEY flow_node? (VALUE flow_node?)?\n//                                      *** *\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 851,
   "Snippet": "\n// Parse the productions:\n// flow_sequence_entry  ::= flow_node | KEY flow_node? (VALUE flow_node?)?\n//                                                      ***** *\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 301,
   "Snippet": "\n// Parse the productions:\n// implicit_document    ::= block_node DOCUMENT-END*\n//                                     *************\n// explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 303,
   "Snippet": "// implicit_document    ::= block_node DOCUMENT-END*\n//                                     *************\n// explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*\n//\nfunc yaml_parser_parse_document_end(parser *yaml_parser_t, event *yaml_event_t) bool {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 172,
   "Snippet": "\n// Parse the production:\n// stream   ::= STREAM-START implicit_document? explicit_document* STREAM-END\n//              ************\nfunc yaml_parser_parse_stream_start(parser *yaml_parser_t, event *yaml_event_t) bool {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 629,
   "Snippet": "\n// Parse the productions:\n// indentless_sequence  ::= (BLOCK-ENTRY block_node?)+\n//                           *********** *\nfunc yaml_parser_parse_indentless_sequence_entry(parser *yaml_parser_t, event *yaml_event_t) bool {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 895,
   "Snippet": "// flow_mapping         ::= FLOW-MAPPING-START\n//                          ******************\n//                          (flow_mapping_entry FLOW-ENTRY)*\n//                           *                  **********\n//                          flow_mapping_entry?"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 901,
   "Snippet": "//                          FLOW-MAPPING-END\n//                          ****************\n// flow_mapping_entry   ::= flow_node | KEY flow_node? (VALUE flow_node?)?\n//                          *           *** *\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 897,
   "Snippet": "//                          (flow_mapping_entry FLOW-ENTRY)*\n//                           *                  **********\n//                          flow_mapping_entry?\n//                          ******************\n//                          FLOW-MAPPING-END"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 875,
   "Snippet": "\n// Parse the productions:\n// flow_sequence_entry  ::= flow_node | KEY flow_node? (VALUE flow_node?)?\n//                                                                      *\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 967,
   "Snippet": "\n// Parse the productions:\n// flow_mapping_entry   ::= flow_node | KEY flow_node? (VALUE flow_node?)?\n//                                   *                  ***** *\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 576,
   "Snippet": "\n// Parse the productions:\n// block_sequence ::= BLOCK-SEQUENCE-START (BLOCK-ENTRY block_node?)* BLOCK-END\n//                    ********************  *********** *             *********\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 761,
   "Snippet": "// flow_sequence        ::= FLOW-SEQUENCE-START\n//                          *******************\n//                          (flow_sequence_entry FLOW-ENTRY)*\n//                           *                   **********\n//                          flow_sequence_entry?"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 767,
   "Snippet": "//                          FLOW-SEQUENCE-END\n//                          *****************\n// flow_sequence_entry  ::= flow_node | KEY flow_node? (VALUE flow_node?)?\n//                          *\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 763,
   "Snippet": "//                          (flow_sequence_entry FLOW-ENTRY)*\n//                           *                   **********\n//                          flow_sequence_entry?\n//                          *\n//                          FLOW-SEQUENCE-END"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 357,
   "Snippet": "// block_content        ::= block_collection | flow_collection | SCALAR\n//                                                               ******\n// flow_content         ::= flow_collection | SCALAR\n//                                            ******\nfunc yaml_parser_parse_node(parser *yaml_parser_t, event *yaml_event_t, block, indentless_sequence bool) bool {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 355,
   "Snippet": "// properties           ::= TAG ANCHOR? | ANCHOR TAG?\n//                          *************************\n// block_content        ::= block_collection | flow_collection | SCALAR\n//                                                               ******\n// flow_content         ::= flow_collection | SCALAR"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 334,
   "Snippet": "\n// Parse the productions:\n// block_node_or_indentless_sequence    ::=\n//                          ALIAS\n//                          *****"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 339,
   "Snippet": "//                          | properties (block_content | indentless_block_sequence)?\n//                            **********  *\n//                          | block_content | indentless_block_sequence\n//                            *\n// block_node           ::= ALIAS"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 337,
   "Snippet": "//                          ALIAS\n//                          *****\n//                          | properties (block_content | indentless_block_sequence)?\n//                            **********  *\n//                          | block_content | indentless_block_sequence"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 196,
   "Snippet": "// implicit_document    ::= block_node DOCUMENT-END*\n//                          *\n// explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*\n//                          *************************\nfunc yaml_parser_parse_document_start(parser *yaml_parser_t, event *yaml_event_t, implicit bool) bool {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/parserc.go",
   "Line": 194,
   "Snippet": "\n// Parse the productions:\n// implicit_document    ::= block_node DOCUMENT-END*\n//                          *\n// explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/go-ini/ini/parser.go",
   "Line": 55,
   "Snippet": "\n// BOM handles header of UTF-8, UTF-16 LE and UTF-16 BE's BOM format.\n// http://en.wikipedia.org/wiki/Byte_order_mark#Representations_of_byte_order_marks_by_encoding\nfunc (p *parser) BOM() error {\n\tmask, err := p.buf.Peek(2)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/spf13/viper/viper.go",
   "Line": 628,
   "Snippet": "// override, flag, env, config file, key/value store, default\n//\n// Get returns an interface. For a specific value use one of the Get____ methods.\nfunc Get(key string) interface{} { return v.Get(key) }\nfunc (v *Viper) Get(key string) interface{} {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/emirpasic/gods/trees/binaryheap/binaryheap.go",
   "Line": 53,
   "Snippet": "\t\theap.bubbleUp()\n\t} else {\n\t\t// Reference: https://en.wikipedia.org/wiki/Binary_heap#Building_a_heap\n\t\tfor _, value := range values {\n\t\t\theap.list.Add(value)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/emirpasic/gods/lists/arraylist/arraylist.go",
   "Line": 9,
   "Snippet": "// Structure is not thread safe.\n//\n// Reference: https://en.wikipedia.org/wiki/List_%28abstract_data_type%29\npackage arraylist\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/doc.go",
   "Line": 37,
   "Snippet": "// that maps to the US East (N. Virginia) region. Additional regions are available\n// and are activated by default. For more information, see Activating and Deactivating\n// AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/doc.go",
   "Line": 50,
   "Snippet": "// successfully made to STS, who made the request, when it was made, and so\n// on. To learn more about CloudTrail, including how to turn it on and find\n// your log files, see the AWS CloudTrail User Guide (http://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html).\n//\n// See https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15 for more information on this service."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/doc.go",
   "Line": 10,
   "Snippet": "// Management (IAM) users or for users that you authenticate (federated users).\n// This guide provides descriptions of the STS API. For more detailed information\n// about using this service, go to Temporary Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html).\n//\n// As an alternative to using the API, you can use one of the AWS SDKs, which"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/doc.go",
   "Line": 21,
   "Snippet": "//\n// For information about setting up signatures and authorization through the\n// API, go to Signing AWS API Requests (http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html)\n// in the AWS General Reference. For general information about the Query API,\n// go to Making Query Requests (http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 344,
   "Snippet": "\t\tif !envCfg.EnableSharedConfig {\n\t\t\t// The shared config file (~/.aws/config) is only loaded if instructed\n\t\t\t// to load via the envConfig.EnableSharedConfig (AWS_SDK_LOAD_CONFIG).\n\t\t\tcfgFiles = cfgFiles[1:]\n\t\t}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 258,
   "Snippet": "\t}\n\n\t// Only use AWS_CA_BUNDLE if session option is not provided.\n\tif len(envCfg.CustomCABundle) != 0 \u0026\u0026 opts.CustomCABundle == nil {\n\t\tf, err := os.Open(envCfg.CustomCABundle)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/shared_config.go",
   "Line": 176,
   "Snippet": "\tsection, err := file.IniData.GetSection(profile)\n\tif err != nil {\n\t\t// Fallback to to alternate profile name: profile \u003cname\u003e\n\t\tsection, err = file.IniData.GetSection(fmt.Sprintf(\"profile %s\", profile))\n\t\tif err != nil {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 134,
   "Snippet": "\tprofileEnvKeys = []string{\n\t\t\"AWS_PROFILE\",\n\t\t\"AWS_DEFAULT_PROFILE\", // Only read if AWS_SDK_LOAD_CONFIG is also set\n\t}\n\tsharedCredsFileEnvKey = []string{"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 130,
   "Snippet": "\tregionEnvKeys = []string{\n\t\t\"AWS_REGION\",\n\t\t\"AWS_DEFAULT_REGION\", // Only read if AWS_SDK_LOAD_CONFIG is also set\n\t}\n\tprofileEnvKeys = []string{"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/doc.go",
   "Line": 1,
   "Snippet": "\n/*\nPackage session provides configuration for the SDK's service clients.\n\nSessions can be shared across all service clients that share the same base\nconfiguration.  The Session is built from the SDK's default configuration and\nrequest handlers.\n\nSessions should be cached when possible, because creating a new Session will\nload all configuration values from the environment, and config files each time\nthe Session is created. Sharing the Session value across all of your service\nclients will ensure the configuration is loaded the fewest number of times possible.\n\nConcurrency\n\nSessions are safe to use concurrently as long as the Session is not being\nmodified. The SDK will not modify the Session once the Session has been created.\nCreating service clients concurrently from a shared Session is safe.\n\nSessions from Shared Config\n\nSessions can be created using the method above that will only load the\nadditional config if the AWS_SDK_LOAD_CONFIG environment variable is set.\nAlternatively you can explicitly create a Session with shared config enabled.\nTo do this you can use NewSessionWithOptions to configure how the Session will\nbe created. Using the NewSessionWithOptions with SharedConfigState set to\nSharedConfigEnable will create the session as if the AWS_SDK_LOAD_CONFIG\nenvironment variable was set.\n\nCreating Sessions\n\nWhen creating Sessions optional aws.Config values can be passed in that will\noverride the default, or loaded config values the Session is being created\nwith. This allows you to provide additional, or case based, configuration\nas needed.\n\nBy default NewSession will only load credentials from the shared credentials\nfile (~/.aws/credentials). If the AWS_SDK_LOAD_CONFIG environment variable is\nset to a truthy value the Session will be created from the configuration\nvalues from the shared config (~/.aws/config) and shared credentials\n(~/.aws/credentials) files. See the section Sessions from Shared Config for\nmore information.\n\nCreate a Session with the default config and request handlers. With credentials\nregion, and profile loaded from the environment and shared config automatically.\nRequires the AWS_PROFILE to be set, or \"default\" is used.\n\n\t// Create Session\n\tsess := session.Must(session.NewSession())\n\n\t// Create a Session with a custom region\n\tsess := session.Must(session.NewSession(\u0026aws.Config{\n\t\tRegion: aws.String(\"us-east-1\"),\n\t}))\n\n\t// Create a S3 client instance from a session\n\tsess := session.Must(session.NewSession())\n\n\tsvc := s3.New(sess)\n\nCreate Session With Option Overrides\n\nIn addition to NewSession, Sessions can be created using NewSessionWithOptions.\nThis func allows you to control and override how the Session will be created\nthrough code instead of being driven by environment variables only.\n\nUse NewSessionWithOptions when you want to provide the config profile, or\noverride the shared config state (AWS_SDK_LOAD_CONFIG).\n\n\t// Equivalent to session.NewSession()\n\tsess := session.Must(session.NewSessionWithOptions(session.Options{\n\t\t// Options\n\t}))\n\n\t// Specify profile to load for the session's config\n\tsess := session.Must(session.NewSessionWithOptions(session.Options{\n\t\t Profile: \"profile_name\",\n\t}))\n\n\t// Specify profile for config and region for requests\n\tsess := session.Must(session.NewSessionWithOptions(session.Options{\n\t\t Config: aws.Config{Region: aws.String(\"us-east-1\")},\n\t\t Profile: \"profile_name\",\n\t}))\n\n\t// Force enable Shared Config support\n\tsess := session.Must(session.NewSessionWithOptions(session.Options{\n\t\tSharedConfigState: session.SharedConfigEnable,\n\t}))\n\nAdding Handlers\n\nYou can add handlers to a session for processing HTTP requests. All service\nclients that use the session inherit the handlers. For example, the following\nhandler logs every request and its payload made by a service client:\n\n\t// Create a session, and add additional handlers for all service\n\t// clients created with the Session to inherit. Adds logging handler.\n\tsess := session.Must(session.NewSession())\n\n\tsess.Handlers.Send.PushFront(func(r *request.Request) {\n\t\t// Log every request made and its payload\n\t\tlogger.Println(\"Request: %s/%s, Payload: %s\",\n\t\t\tr.ClientInfo.ServiceName, r.Operation, r.Params)\n\t})\n\nDeprecated \"New\" function\n\nThe New session function has been deprecated because it does not provide good\nway to return errors that occur when loading the configuration files and values.\nBecause of this, NewSession was created so errors can be retrieved when\ncreating a session fails.\n\nShared Config Fields\n\nBy default the SDK will only load the shared credentials file's (~/.aws/credentials)\ncredentials values, and all other config is provided by the environment variables,\nSDK defaults, and user provided aws.Config values.\n\nIf the AWS_SDK_LOAD_CONFIG environment variable is set, or SharedConfigEnable\noption is used to create the Session the full shared config values will be\nloaded. This includes credentials, region, and support for assume role. In\naddition the Session will load its configuration from both the shared config\nfile (~/.aws/config) and shared credentials file (~/.aws/credentials). Both\nfiles have the same format.\n\nIf both config files are present the configuration from both files will be\nread. The Session will be created from configuration values from the shared\ncredentials file (~/.aws/credentials) over those in the shared config file (~/.aws/config).\n\nCredentials are the values the SDK should use for authenticating requests with\nAWS Services. They are from a configuration file will need to include both\naws_access_key_id and aws_secret_access_key must be provided together in the\nsame file to be considered valid. The values will be ignored if not a complete\ngroup. aws_session_token is an optional field that can be provided if both of\nthe other two fields are also provided.\n\n\taws_access_key_id = AKID\n\taws_secret_access_key = SECRET\n\taws_session_token = TOKEN\n\nAssume Role values allow you to configure the SDK to assume an IAM role using\na set of credentials provided in a config file via the source_profile field.\nBoth \"role_arn\" and \"source_profile\" are required. The SDK supports assuming\na role with MFA token if the session option AssumeRoleTokenProvider\nis set.\n\n\trole_arn = arn:aws:iam::\u003caccount_number\u003e:role/\u003crole_name\u003e\n\tsource_profile = profile_with_creds\n\texternal_id = 1234\n\tmfa_serial = \u003cserial or mfa arn\u003e\n\trole_session_name = session_name\n\nRegion is the region the SDK should use for looking up AWS service endpoints\nand signing requests.\n\n\tregion = us-east-1\n\nAssume Role with MFA token\n\nTo create a session with support for assuming an IAM role with MFA set the\nsession option AssumeRoleTokenProvider to a function that will prompt for the\nMFA token code when the SDK assumes the role and refreshes the role's credentials.\nThis allows you to configure the SDK via the shared config to assumea role\nwith MFA tokens.\n\nIn order for the SDK to assume a role with MFA the SharedConfigState\nsession option must be set to SharedConfigEnable, or AWS_SDK_LOAD_CONFIG\nenvironment variable set.\n\nThe shared configuration instructs the SDK to assume an IAM role with MFA\nwhen the mfa_serial configuration field is set in the shared config\n(~/.aws/config) or shared credentials (~/.aws/credentials) file.\n\nIf mfa_serial is set in the configuration, the SDK will assume the role, and\nthe AssumeRoleTokenProvider session option is not set an an error will\nbe returned when creating the session.\n\n    sess := session.Must(session.NewSessionWithOptions(session.Options{\n        AssumeRoleTokenProvider: stscreds.StdinTokenProvider,\n    }))\n\n    // Create service client value configured for credentials\n    // from assumed role.\n    svc := s3.New(sess)\n\nTo setup assume role outside of a session see the stscrds.AssumeRoleProvider\ndocumentation.\n\nEnvironment Variables\n\nWhen a Session is created several environment variables can be set to adjust\nhow the SDK functions, and what configuration data it loads when creating\nSessions. All environment values are optional, but some values like credentials\nrequire multiple of the values to set or the partial values will be ignored.\nAll environment variable values are strings unless otherwise noted.\n\nEnvironment configuration values. If set both Access Key ID and Secret Access\nKey must be provided. Session Token and optionally also be provided, but is\nnot required.\n\n\t# Access Key ID\n\tAWS_ACCESS_KEY_ID=AKID\n\tAWS_ACCESS_KEY=AKID # only read if AWS_ACCESS_KEY_ID is not set.\n\n\t# Secret Access Key\n\tAWS_SECRET_ACCESS_KEY=SECRET\n\tAWS_SECRET_KEY=SECRET=SECRET # only read if AWS_SECRET_ACCESS_KEY is not set.\n\n\t# Session Token\n\tAWS_SESSION_TOKEN=TOKEN\n\nRegion value will instruct the SDK where to make service API requests to. If is\nnot provided in the environment the region must be provided before a service\nclient request is made.\n\n\tAWS_REGION=us-east-1\n\n\t# AWS_DEFAULT_REGION is only read if AWS_SDK_LOAD_CONFIG is also set,\n\t# and AWS_REGION is not also set.\n\tAWS_DEFAULT_REGION=us-east-1\n\nProfile name the SDK should load use when loading shared config from the\nconfiguration files. If not provided \"default\" will be used as the profile name.\n\n\tAWS_PROFILE=my_profile\n\n\t# AWS_DEFAULT_PROFILE is only read if AWS_SDK_LOAD_CONFIG is also set,\n\t# and AWS_PROFILE is not also set.\n\tAWS_DEFAULT_PROFILE=my_profile\n\nSDK load config instructs the SDK to load the shared config in addition to\nshared credentials. This also expands the configuration loaded so the shared\ncredentials will have parity with the shared config file. This also enables\nRegion and Profile support for the AWS_DEFAULT_REGION and AWS_DEFAULT_PROFILE\nenv values as well.\n\n\tAWS_SDK_LOAD_CONFIG=1\n\nShared credentials file path can be set to instruct the SDK to use an alternative\nfile for the shared credentials. If not set the file will be loaded from\n$HOME/.aws/credentials on Linux/Unix based systems, and\n%USERPROFILE%\\.aws\\credentials on Windows.\n\n\tAWS_SHARED_CREDENTIALS_FILE=$HOME/my_shared_credentials\n\nShared config file path can be set to instruct the SDK to use an alternative\nfile for the shared config. If not set the file will be loaded from\n$HOME/.aws/config on Linux/Unix based systems, and\n%USERPROFILE%\\.aws\\config on Windows.\n\n\tAWS_CONFIG_FILE=$HOME/my_shared_config\n\nPath to a custom Credentials Authority (CA) bundle PEM file that the SDK\nwill use instead of the default system's root CA bundle. Use this only\nif you want to replace the CA bundle the SDK uses for TLS requests.\n\n\tAWS_CA_BUNDLE=$HOME/my_custom_ca_bundle\n\nEnabling this option will attempt to merge the Transport into the SDK's HTTP\nclient. If the client's Transport is not a http.Transport an error will be\nreturned. If the Transport's TLS config is set this option will cause the SDK\nto overwrite the Transport's TLS config's  RootCAs value. If the CA bundle file\ncontains multiple certificates all of them will be loaded.\n\nThe Session option CustomCABundle is also available when creating sessions\nto also enable this feature. CustomCABundle session option field has priority\nover the AWS_CA_BUNDLE environment variable, and will be used if both are set.\n\nSetting a custom HTTPClient in the aws.Config options will override this setting.\nTo use this option and custom HTTP client, the HTTP client needs to be provided\nwhen creating the session. Not the service client.\n*/\npackage session"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/ec2metadata/service.go",
   "Line": 5,
   "Snippet": "//\n// This package's client can be disabled completely by setting the environment\n// variable \"AWS_EC2_METADATA_DISABLED=true\". This environment variable set to\n// true instructs the SDK to disable the EC2 Metadata client. The client cannot\n// be used while the environemnt variable is set to true, (case insensitive)."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/private/protocol/idempotency.go",
   "Line": 68,
   "Snippet": "// UUIDVersion4 returns a Version 4 random UUID from the byte slice provided\nfunc UUIDVersion4(u []byte) string {\n\t// https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29\n\t// 13th character is \"4\"\n\tu[6] = (u[6] | 0x40) \u0026 0x4F"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/fsnotify/fsnotify/kqueue.go",
   "Line": 150,
   "Snippet": "}\n\n// Watch all events (except NOTE_EXTEND, NOTE_LINK, NOTE_REVOKE)\nconst noteAllEvents = unix.NOTE_DELETE | unix.NOTE_WRITE | unix.NOTE_ATTRIB | unix.NOTE_RENAME\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/cldr/resolve.go",
   "Line": 8,
   "Snippet": "\n// This file implements the various inheritance constructs defined by LDML.\n// See http://www.unicode.org/reports/tr35/#Inheritance_and_Validity\n// for more details.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/cldr/collate.go",
   "Line": 69,
   "Snippet": "\t\t\tvar ch byte\n\t\t\tswitch ch, s = s[0], s[1:]; ch {\n\t\t\tcase '\u0026': // followed by \u003canchor\u003e or '[' \u003ckey\u003e ']'\n\t\t\t\tif s = skipSpace(s); consume(\u0026s, '[') {\n\t\t\t\t\ts = chk(parseSpecialAnchor(p, s))"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/norm/forminfo.go",
   "Line": 25,
   "Snippet": "// The byte sequence is followed by a trailing and leading CCC if the values\n// for these are not zero.  The value of v determines which ccc are appended\n// to the sequences.  For v \u003c firstCCC, there are none, for v \u003e= firstCCC,\n// the sequence is followed by a trailing ccc, and for v \u003e= firstLeadingCC\n// there is an additional leading ccc. The value of tccc itself is the"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/norm/forminfo.go",
   "Line": 19,
   "Snippet": "// into a byte array of UTF-8 decomposition sequences and additional info and\n// has the form:\n//    \u003cheader\u003e \u003cdecomp_byte\u003e* [\u003ctccc\u003e [\u003clccc\u003e]]\n// The header contains the number of bytes in the decomposition (excluding this\n// length byte). The two most significant bits of this length byte correspond"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/norm/maketables.go",
   "Line": 836,
   "Snippet": "\t\t\t\t// segment breaking in iteration, most likely on improper use), but\n\t\t\t\t// reconsider if more characters are added.\n\t\t\t\t// U+FF9E HALFWIDTH KATAKANA VOICED SOUND MARK;Lm;0;L;\u003cnarrow\u003e 3099;;;;N;;;;;\n\t\t\t\t// U+FF9F HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK;Lm;0;L;\u003cnarrow\u003e 309A;;;;N;;;;;\n\t\t\t\t// U+3133 HANGUL LETTER KIYEOK-SIOS;Lo;0;L;\u003ccompat\u003e 11AA;;;;N;HANGUL LETTER GIYEOG SIOS;;;;"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/norm/maketables.go",
   "Line": 838,
   "Snippet": "\t\t\t\t// U+FF9E HALFWIDTH KATAKANA VOICED SOUND MARK;Lm;0;L;\u003cnarrow\u003e 3099;;;;N;;;;;\n\t\t\t\t// U+FF9F HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK;Lm;0;L;\u003cnarrow\u003e 309A;;;;N;;;;;\n\t\t\t\t// U+3133 HANGUL LETTER KIYEOK-SIOS;Lo;0;L;\u003ccompat\u003e 11AA;;;;N;HANGUL LETTER GIYEOG SIOS;;;;\n\t\t\t\t// U+318E HANGUL LETTER ARAEAE;Lo;0;L;\u003ccompat\u003e 11A1;;;;N;HANGUL LETTER ALAE AE;;;;\n\t\t\t\t// U+FFA3 HALFWIDTH HANGUL LETTER KIYEOK-SIOS;Lo;0;L;\u003cnarrow\u003e 3133;;;;N;HALFWIDTH HANGUL LETTER GIYEOG SIOS;;;;"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/norm/maketables.go",
   "Line": 840,
   "Snippet": "\t\t\t\t// U+3133 HANGUL LETTER KIYEOK-SIOS;Lo;0;L;\u003ccompat\u003e 11AA;;;;N;HANGUL LETTER GIYEOG SIOS;;;;\n\t\t\t\t// U+318E HANGUL LETTER ARAEAE;Lo;0;L;\u003ccompat\u003e 11A1;;;;N;HANGUL LETTER ALAE AE;;;;\n\t\t\t\t// U+FFA3 HALFWIDTH HANGUL LETTER KIYEOK-SIOS;Lo;0;L;\u003cnarrow\u003e 3133;;;;N;HALFWIDTH HANGUL LETTER GIYEOG SIOS;;;;\n\t\t\t\t// U+FFDC HALFWIDTH HANGUL LETTER I;Lo;0;L;\u003cnarrow\u003e 3163;;;;N;;;;;\n\t\t\t\tif i != 0xFF9E \u0026\u0026 i != 0xFF9F \u0026\u0026 !(0x3133 \u003c= i \u0026\u0026 i \u003c= 0x318E) \u0026\u0026 !(0xFFA3 \u003c= i \u0026\u0026 i \u003c= 0xFFDC) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/norm/maketables.go",
   "Line": 841,
   "Snippet": "\t\t\t\t// U+318E HANGUL LETTER ARAEAE;Lo;0;L;\u003ccompat\u003e 11A1;;;;N;HANGUL LETTER ALAE AE;;;;\n\t\t\t\t// U+FFA3 HALFWIDTH HANGUL LETTER KIYEOK-SIOS;Lo;0;L;\u003cnarrow\u003e 3133;;;;N;HALFWIDTH HANGUL LETTER GIYEOG SIOS;;;;\n\t\t\t\t// U+FFDC HALFWIDTH HANGUL LETTER I;Lo;0;L;\u003cnarrow\u003e 3163;;;;N;;;;;\n\t\t\t\tif i != 0xFF9E \u0026\u0026 i != 0xFF9F \u0026\u0026 !(0x3133 \u003c= i \u0026\u0026 i \u003c= 0x318E) \u0026\u0026 !(0xFFA3 \u003c= i \u0026\u0026 i \u003c= 0xFFDC) {\n\t\t\t\t\tlog.Fatalf(\"%U: nLead was %v; want %v\", i, a, b)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/norm/maketables.go",
   "Line": 839,
   "Snippet": "\t\t\t\t// U+FF9F HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK;Lm;0;L;\u003cnarrow\u003e 309A;;;;N;;;;;\n\t\t\t\t// U+3133 HANGUL LETTER KIYEOK-SIOS;Lo;0;L;\u003ccompat\u003e 11AA;;;;N;HANGUL LETTER GIYEOG SIOS;;;;\n\t\t\t\t// U+318E HANGUL LETTER ARAEAE;Lo;0;L;\u003ccompat\u003e 11A1;;;;N;HANGUL LETTER ALAE AE;;;;\n\t\t\t\t// U+FFA3 HALFWIDTH HANGUL LETTER KIYEOK-SIOS;Lo;0;L;\u003cnarrow\u003e 3133;;;;N;HALFWIDTH HANGUL LETTER GIYEOG SIOS;;;;\n\t\t\t\t// U+FFDC HALFWIDTH HANGUL LETTER I;Lo;0;L;\u003cnarrow\u003e 3163;;;;N;;;;;"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/norm/maketables.go",
   "Line": 837,
   "Snippet": "\t\t\t\t// reconsider if more characters are added.\n\t\t\t\t// U+FF9E HALFWIDTH KATAKANA VOICED SOUND MARK;Lm;0;L;\u003cnarrow\u003e 3099;;;;N;;;;;\n\t\t\t\t// U+FF9F HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK;Lm;0;L;\u003cnarrow\u003e 309A;;;;N;;;;;\n\t\t\t\t// U+3133 HANGUL LETTER KIYEOK-SIOS;Lo;0;L;\u003ccompat\u003e 11AA;;;;N;HANGUL LETTER GIYEOG SIOS;;;;\n\t\t\t\t// U+318E HANGUL LETTER ARAEAE;Lo;0;L;\u003ccompat\u003e 11A1;;;;N;HANGUL LETTER ALAE AE;;;;"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/ssh/knownhosts/knownhosts.go",
   "Line": 28,
   "Snippet": "\n// See the sshd manpage\n// (http://man.openbsd.org/sshd#SSH_KNOWN_HOSTS_FILE_FORMAT) for\n// background.\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/submodule.go",
   "Line": 329,
   "Snippet": "}\n\n// String is equivalent to `git submodule status \u003csubmodule\u003e`\n//\n// This will print the SHA-1 of the currently checked out commit for a"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 40,
   "Snippet": "//   (possibly empty), which different from the ones in \"a(...)\".\n//\n//     \\ to     -   a\u003c\u003e  a\u003c1\u003e  a\u003c2\u003e  a()  a(...)  a(;;;)\n// from \\\n// -           00    01    02    03   04     05      06"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 31,
   "Snippet": "//\n// - \"-\": nothing, no file or directory\n// - a\u003c\u003e: an empty file named \"a\".\n// - a\u003c1\u003e: a file named \"a\", with \"1\" as its contents.\n// - a\u003c2\u003e: a file named \"a\", with \"2\" as its contents."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 32,
   "Snippet": "// - \"-\": nothing, no file or directory\n// - a\u003c\u003e: an empty file named \"a\".\n// - a\u003c1\u003e: a file named \"a\", with \"1\" as its contents.\n// - a\u003c2\u003e: a file named \"a\", with \"2\" as its contents.\n// - a(): an empty dir named \"a\"."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 44,
   "Snippet": "// -           00    01    02    03   04     05      06\n// a\u003c\u003e         10    11    12    13   14     15      16\n// a\u003c1\u003e        20    21    22    23   24     25      26\n// a\u003c2\u003e        30    31    32    33   34     35      36\n// a()         40    41    42    43   44     45      46"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 45,
   "Snippet": "// a\u003c\u003e         10    11    12    13   14     15      16\n// a\u003c1\u003e        20    21    22    23   24     25      26\n// a\u003c2\u003e        30    31    32    33   34     35      36\n// a()         40    41    42    43   44     45      46\n// a(...)      50    51    52    53   54     55      56"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 33,
   "Snippet": "// - a\u003c\u003e: an empty file named \"a\".\n// - a\u003c1\u003e: a file named \"a\", with \"1\" as its contents.\n// - a\u003c2\u003e: a file named \"a\", with \"2\" as its contents.\n// - a(): an empty dir named \"a\".\n// - a(...): a dir named \"a\", with some files and/or dirs inside (possibly"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 43,
   "Snippet": "// from \\\n// -           00    01    02    03   04     05      06\n// a\u003c\u003e         10    11    12    13   14     15      16\n// a\u003c1\u003e        20    21    22    23   24     25      26\n// a\u003c2\u003e        30    31    32    33   34     35      36"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 214,
   "Snippet": "// 1 0 0 1 1 0 |   a\u003c\u003e  | a(...) | G  |  f  | delete(from); insert(to); NN\n// 1 0 0 1 1 1 |   a\u003c\u003e  |    a() | F  |  f  | delete(from); insert(to); NN\n// 1 0 1 0 0 0 | a(...) |  a\u003c1\u003e  | J' |  f  | delete(from); insert(to); NN\n// 1 0 1 0 0 1 | a(...) |   a\u003c\u003e  | G' |  f  | delete(from); insert(to); NN\n// 1 0 1 0 1 0 |    a() |  a\u003c1\u003e  | I' |  f  | delete(from); insert(to); NN"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 210,
   "Snippet": "// 1 0 0 0 1 0 |   a\u003c\u003e  |  a\u003c1\u003e  | E  |  e  | modify(from, to); NN\n// 1 0 0 0 1 1 |  ----  |  ----  |    |  e  |\n// 1 0 0 1 0 0 |  a\u003c1\u003e  | a(...) | J  |  f  | delete(from); insert(to); NN\n// 1 0 0 1 0 1 |  a\u003c1\u003e  |    a() | I  |  f  | delete(from); insert(to); NN\n// 1 0 0 1 1 0 |   a\u003c\u003e  | a(...) | G  |  f  | delete(from); insert(to); NN"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 213,
   "Snippet": "// 1 0 0 1 0 1 |  a\u003c1\u003e  |    a() | I  |  f  | delete(from); insert(to); NN\n// 1 0 0 1 1 0 |   a\u003c\u003e  | a(...) | G  |  f  | delete(from); insert(to); NN\n// 1 0 0 1 1 1 |   a\u003c\u003e  |    a() | F  |  f  | delete(from); insert(to); NN\n// 1 0 1 0 0 0 | a(...) |  a\u003c1\u003e  | J' |  f  | delete(from); insert(to); NN\n// 1 0 1 0 0 1 | a(...) |   a\u003c\u003e  | G' |  f  | delete(from); insert(to); NN"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 207,
   "Snippet": "// 0 1 1 1 1 1 |        |        |    |     | }\n// 1 0 0 0 0 0 |  a\u003c1\u003e  |  a\u003c2\u003e  | H  |  e  | modify(from, to); NN\n// 1 0 0 0 0 1 |  a\u003c1\u003e  |   a\u003c\u003e  | E' |  e  | modify(from, to); NN\n// 1 0 0 0 1 0 |   a\u003c\u003e  |  a\u003c1\u003e  | E  |  e  | modify(from, to); NN\n// 1 0 0 0 1 1 |  ----  |  ----  |    |  e  |"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 211,
   "Snippet": "// 1 0 0 0 1 1 |  ----  |  ----  |    |  e  |\n// 1 0 0 1 0 0 |  a\u003c1\u003e  | a(...) | J  |  f  | delete(from); insert(to); NN\n// 1 0 0 1 0 1 |  a\u003c1\u003e  |    a() | I  |  f  | delete(from); insert(to); NN\n// 1 0 0 1 1 0 |   a\u003c\u003e  | a(...) | G  |  f  | delete(from); insert(to); NN\n// 1 0 0 1 1 1 |   a\u003c\u003e  |    a() | F  |  f  | delete(from); insert(to); NN"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 216,
   "Snippet": "// 1 0 1 0 0 0 | a(...) |  a\u003c1\u003e  | J' |  f  | delete(from); insert(to); NN\n// 1 0 1 0 0 1 | a(...) |   a\u003c\u003e  | G' |  f  | delete(from); insert(to); NN\n// 1 0 1 0 1 0 |    a() |  a\u003c1\u003e  | I' |  f  | delete(from); insert(to); NN\n// 1 0 1 0 1 1 |    a() |   a\u003c\u003e  | F' |  f  | delete(from); insert(to); NN\n// 1 0 1 1 0 0 | a(...) | a(;;;) | L  |  g  | nothing; SS"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 222,
   "Snippet": "// 1 0 1 1 1 0 |    a() | a(...) | K  |  i  | insertChildren(to); NN\n// 1 0 1 1 1 1 |  ----  |  ----  |    |     |\n// 1 1 0 0 0 0 |  a\u003c1\u003e  |  a\u003c1\u003e  | B  |  b  | nothing; NN\n// 1 1 0 0 0 1 |  ----  |  ----  |    |  b  |\n// 1 1 0 0 1 0 |  ----  |  ----  |    |  b  |"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 208,
   "Snippet": "// 1 0 0 0 0 0 |  a\u003c1\u003e  |  a\u003c2\u003e  | H  |  e  | modify(from, to); NN\n// 1 0 0 0 0 1 |  a\u003c1\u003e  |   a\u003c\u003e  | E' |  e  | modify(from, to); NN\n// 1 0 0 0 1 0 |   a\u003c\u003e  |  a\u003c1\u003e  | E  |  e  | modify(from, to); NN\n// 1 0 0 0 1 1 |  ----  |  ----  |    |  e  |\n// 1 0 0 1 0 0 |  a\u003c1\u003e  | a(...) | J  |  f  | delete(from); insert(to); NN"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 217,
   "Snippet": "// 1 0 1 0 0 1 | a(...) |   a\u003c\u003e  | G' |  f  | delete(from); insert(to); NN\n// 1 0 1 0 1 0 |    a() |  a\u003c1\u003e  | I' |  f  | delete(from); insert(to); NN\n// 1 0 1 0 1 1 |    a() |   a\u003c\u003e  | F' |  f  | delete(from); insert(to); NN\n// 1 0 1 1 0 0 | a(...) | a(;;;) | L  |  g  | nothing; SS\n// 1 0 1 1 0 1 | a(...) |    a() | K' |  h  | deleteChidren(from); NN"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 212,
   "Snippet": "// 1 0 0 1 0 0 |  a\u003c1\u003e  | a(...) | J  |  f  | delete(from); insert(to); NN\n// 1 0 0 1 0 1 |  a\u003c1\u003e  |    a() | I  |  f  | delete(from); insert(to); NN\n// 1 0 0 1 1 0 |   a\u003c\u003e  | a(...) | G  |  f  | delete(from); insert(to); NN\n// 1 0 0 1 1 1 |   a\u003c\u003e  |    a() | F  |  f  | delete(from); insert(to); NN\n// 1 0 1 0 0 0 | a(...) |  a\u003c1\u003e  | J' |  f  | delete(from); insert(to); NN"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 206,
   "Snippet": "//     .       |        |        |    |     |    }\n// 0 1 1 1 1 1 |        |        |    |     | }\n// 1 0 0 0 0 0 |  a\u003c1\u003e  |  a\u003c2\u003e  | H  |  e  | modify(from, to); NN\n// 1 0 0 0 0 1 |  a\u003c1\u003e  |   a\u003c\u003e  | E' |  e  | modify(from, to); NN\n// 1 0 0 0 1 0 |   a\u003c\u003e  |  a\u003c1\u003e  | E  |  e  | modify(from, to); NN"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 225,
   "Snippet": "// 1 1 0 0 0 1 |  ----  |  ----  |    |  b  |\n// 1 1 0 0 1 0 |  ----  |  ----  |    |  b  |\n// 1 1 0 0 1 1 |   a\u003c\u003e  |   a\u003c\u003e  | B  |  b  | nothing; NN\n// 1 1 0 1 0 0 |  ----  |  ----  |    |  b  |\n// 1 1 0 1 0 1 |  ----  |  ----  |    |  b  |"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/difftree.go",
   "Line": 215,
   "Snippet": "// 1 0 0 1 1 1 |   a\u003c\u003e  |    a() | F  |  f  | delete(from); insert(to); NN\n// 1 0 1 0 0 0 | a(...) |  a\u003c1\u003e  | J' |  f  | delete(from); insert(to); NN\n// 1 0 1 0 0 1 | a(...) |   a\u003c\u003e  | G' |  f  | delete(from); insert(to); NN\n// 1 0 1 0 1 0 |    a() |  a\u003c1\u003e  | I' |  f  | delete(from); insert(to); NN\n// 1 0 1 0 1 1 |    a() |   a\u003c\u003e  | F' |  f  | delete(from); insert(to); NN"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/object/patch.go",
   "Line": 270,
   "Snippet": "\tleftTextLength := padLength + longestLength + padLength\n\n\t// \u003cpad\u003e\u003cnumber\u003e\u003cpad\u003e\u003c+++++/-----\u003e\u003cnewline\u003e\n\t// Excluding number length here.\n\trightTextLength := padLength + padLength + newlineLength"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/object/patch.go",
   "Line": 264,
   "Snippet": "\n\t// Parts of the output:\n\t// \u003cpad\u003e\u003cfilename\u003e\u003cpad\u003e|\u003cpad\u003e\u003cchangeNumber\u003e\u003cpad\u003e\u003c+++/---\u003e\u003cnewline\u003e\n\t// example: \" main.go | 10 +++++++--- \"\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/object/patch.go",
   "Line": 267,
   "Snippet": "\t// example: \" main.go | 10 +++++++--- \"\n\n\t// \u003cpad\u003e\u003cfilename\u003e\u003cpad\u003e\n\tleftTextLength := padLength + longestLength + padLength\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/jbenet/go-context/io/ctxio.go",
   "Line": 95,
   "Snippet": "//\n// Furthermore, in order to protect your memory from being read\n// _before_ you've cancelled the context, this io.Reader will\n// allocate a buffer of the same size, and **copy** into the client's\n// if the read succeeds in time."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/jbenet/go-context/io/ctxio.go",
   "Line": 90,
   "Snippet": "// Note well: this wrapper DOES NOT ACTUALLY cancel the underlying\n// write-- there is no way to do that with the standard go io\n// interface. So the read and write _will_ happen or hang. So, use\n// this sparingly, make sure to cancel the read or write as necesary\n// (e.g. closing a connection whose context is up, etc.)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/jbenet/go-context/io/ctxio.go",
   "Line": 40,
   "Snippet": "// Note well: this wrapper DOES NOT ACTUALLY cancel the underlying\n// write-- there is no way to do that with the standard go io\n// interface. So the read and write _will_ happen or hang. So, use\n// this sparingly, make sure to cancel the read or write as necesary\n// (e.g. closing a connection whose context is up, etc.)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/jbenet/go-context/io/ctxio.go",
   "Line": 45,
   "Snippet": "//\n// Furthermore, in order to protect your memory from being read\n// _after_ you've cancelled the context, this io.Writer will\n// first make a **copy** of the buffer.\nfunc NewWriter(ctx context.Context, w io.Writer) *ctxWriter {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/go-ini/ini/struct.go",
   "Line": 32,
   "Snippet": "// Built-in name getters.\nvar (\n\t// AllCapsUnderscore converts to format ALL_CAPS_UNDERSCORE.\n\tAllCapsUnderscore NameMapper = func(raw string) string {\n\t\tnewstr := make([]rune, 0, len(raw))"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/signer/v4/v4.go",
   "Line": 17,
   "Snippet": "// The signer does require the URL.Opaque field to be set in the form of:\n//\n//     \"//\u003chostname\u003e/\u003cpath\u003e\"\n//\n//     // e.g."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/private/protocol/restxml/restxml.go",
   "Line": 5,
   "Snippet": "package restxml\n\n//go:generate go run -tags codegen ../../../models/protocol_tests/generate.go ../../../models/protocol_tests/input/rest-xml.json build_test.go\n//go:generate go run -tags codegen ../../../models/protocol_tests/generate.go ../../../models/protocol_tests/output/rest-xml.json unmarshal_test.go\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/private/protocol/restxml/restxml.go",
   "Line": 6,
   "Snippet": "\n//go:generate go run -tags codegen ../../../models/protocol_tests/generate.go ../../../models/protocol_tests/input/rest-xml.json build_test.go\n//go:generate go run -tags codegen ../../../models/protocol_tests/generate.go ../../../models/protocol_tests/output/rest-xml.json unmarshal_test.go\n\nimport ("
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/private/protocol/query/build.go",
   "Line": 4,
   "Snippet": "package query\n\n//go:generate go run -tags codegen ../../../models/protocol_tests/generate.go ../../../models/protocol_tests/input/query.json build_test.go\n\nimport ("
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/private/protocol/query/unmarshal.go",
   "Line": 3,
   "Snippet": "package query\n\n//go:generate go run -tags codegen ../../../models/protocol_tests/generate.go ../../../models/protocol_tests/output/query.json unmarshal_test.go\n\nimport ("
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/sergi/go-diff/diffmatchpatch/diff.go",
   "Line": 812,
   "Snippet": "\n// DiffCleanupSemanticLossless looks for single edits surrounded on both sides by equalities which can be shifted sideways to align the edit to a word boundary.\n// E.g: The c\u003cins\u003eat c\u003c/ins\u003eame. -\u003e The \u003cins\u003ecat \u003c/ins\u003ecame.\nfunc (dmp *DiffMatchPatch) DiffCleanupSemanticLossless(diffs []Diff) []Diff {\n\tpointer := 1"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/pmezard/go-difflib/difflib/difflib.go",
   "Line": 81,
   "Snippet": "// ordinary text files, or maybe \"\u003cP\u003e\" lines in HTML files).  That may be\n// because this is the only method of the 3 that has a *concept* of\n// \"junk\" \u003cwink\u003e.\n//\n// Timing:  Basic R-O is cubic time worst case and quadratic time expected"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/pmezard/go-difflib/difflib/difflib.go",
   "Line": 79,
   "Snippet": "// reports than does diff.  This method appears to be the least vulnerable\n// to synching up on blocks of \"junk lines\", though (like blank lines in\n// ordinary text files, or maybe \"\u003cP\u003e\" lines in HTML files).  That may be\n// because this is the only method of the 3 that has a *concept* of\n// \"junk\" \u003cwink\u003e."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/language/language.go",
   "Line": 544,
   "Snippet": "// TypeForKey returns the type associated with the given key, where key and type\n// are of the allowed values defined for the Unicode locale extension ('u') in\n// http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers.\n// TypeForKey will traverse the inheritance chain to get the correct value.\nfunc (t Tag) TypeForKey(key string) string {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/language/language.go",
   "Line": 560,
   "Snippet": "// SetTypeForKey returns a new Tag with the key set to type, where key and type\n// are of the allowed values defined for the Unicode locale extension ('u') in\n// http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers.\n// An empty value removes an existing pair with the same key.\nfunc (t Tag) SetTypeForKey(key, value string) (Tag, error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/language/parse.go",
   "Line": 238,
   "Snippet": "// value. All other values are preserved. It accepts tags in the BCP 47 format\n// and extensions to this standard defined in\n// http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers.\n// The resulting tag is canonicalized using the the canonicalization type c.\nfunc (c CanonType) Parse(s string) (t Tag, err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/language/parse.go",
   "Line": 226,
   "Snippet": "// value. All other values are preserved. It accepts tags in the BCP 47 format\n// and extensions to this standard defined in\n// http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers.\n// The resulting tag is canonicalized using the default canonicalization type.\nfunc Parse(s string) (t Tag, err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/language/parse.go",
   "Line": 749,
   "Snippet": "\n// nextExtension finds the next extension within the string, searching\n// for the -\u003cchar\u003e- pattern from position p.\n// In the fast majority of cases, language tags will have at most\n// one extension and extensions tend to be small."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_dragonfly.go",
   "Line": 16,
   "Snippet": "package unix\n\n/*\n#define KERNEL\n#include \u003cdirent.h\u003e\n#include \u003cfcntl.h\u003e\n#include \u003cpoll.h\u003e\n#include \u003csignal.h\u003e\n#include \u003ctermios.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csys/event.h\u003e\n#include \u003csys/mman.h\u003e\n#include \u003csys/mount.h\u003e\n#include \u003csys/param.h\u003e\n#include \u003csys/ptrace.h\u003e\n#include \u003csys/resource.h\u003e\n#include \u003csys/select.h\u003e\n#include \u003csys/signal.h\u003e\n#include \u003csys/socket.h\u003e\n#include \u003csys/stat.h\u003e\n#include \u003csys/time.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/un.h\u003e\n#include \u003csys/utsname.h\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cnet/bpf.h\u003e\n#include \u003cnet/if.h\u003e\n#include \u003cnet/if_dl.h\u003e\n#include \u003cnet/route.h\u003e\n#include \u003cnetinet/in.h\u003e\n#include \u003cnetinet/icmp6.h\u003e\n#include \u003cnetinet/tcp.h\u003e\n\nenum {\n\tsizeofPtr = sizeof(void*),\n};\n\nunion sockaddr_all {\n\tstruct sockaddr s1;\t// this one gets used for fields\n\tstruct sockaddr_in s2;\t// these pad it out\n\tstruct sockaddr_in6 s3;\n\tstruct sockaddr_un s4;\n\tstruct sockaddr_dl s5;\n};\n\nstruct sockaddr_any {\n\tstruct sockaddr addr;\n\tchar pad[sizeof(union sockaddr_all) - sizeof(struct sockaddr)];\n};\n\n*/\nimport \"C\"\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_openbsd_amd64.go",
   "Line": 36,
   "Snippet": "\n// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions\n// of openbsd/amd64 the syscall is called sysctl instead of __sysctl.\nconst SYS___SYSCTL = SYS_SYSCTL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_openbsd_amd64.go",
   "Line": 35,
   "Snippet": "}\n\n// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions\n// of openbsd/amd64 the syscall is called sysctl instead of __sysctl.\nconst SYS___SYSCTL = SYS_SYSCTL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/fcntl.go",
   "Line": 25,
   "Snippet": "}\n\n// FcntlFlock performs a fcntl syscall for the F_GETLK, F_SETLK or F_SETLKW command.\nfunc FcntlFlock(fd uintptr, cmd int, lk *Flock_t) error {\n\t_, _, errno := Syscall(fcntl64Syscall, fd, uintptr(cmd), uintptr(unsafe.Pointer(lk)))"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/fcntl.go",
   "Line": 12,
   "Snippet": "\n// fcntl64Syscall is usually SYS_FCNTL, but is overridden on 32-bit Linux\n// systems by flock_linux_32bit.go to be SYS_FCNTL64.\nvar fcntl64Syscall uintptr = SYS_FCNTL\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_netbsd.go",
   "Line": 16,
   "Snippet": "package unix\n\n/*\n#define KERNEL\n#include \u003cdirent.h\u003e\n#include \u003cfcntl.h\u003e\n#include \u003cpoll.h\u003e\n#include \u003csignal.h\u003e\n#include \u003ctermios.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csys/param.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/event.h\u003e\n#include \u003csys/mman.h\u003e\n#include \u003csys/mount.h\u003e\n#include \u003csys/ptrace.h\u003e\n#include \u003csys/resource.h\u003e\n#include \u003csys/select.h\u003e\n#include \u003csys/signal.h\u003e\n#include \u003csys/socket.h\u003e\n#include \u003csys/stat.h\u003e\n#include \u003csys/sysctl.h\u003e\n#include \u003csys/time.h\u003e\n#include \u003csys/uio.h\u003e\n#include \u003csys/un.h\u003e\n#include \u003csys/utsname.h\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cnet/bpf.h\u003e\n#include \u003cnet/if.h\u003e\n#include \u003cnet/if_dl.h\u003e\n#include \u003cnet/route.h\u003e\n#include \u003cnetinet/in.h\u003e\n#include \u003cnetinet/icmp6.h\u003e\n#include \u003cnetinet/tcp.h\u003e\n\nenum {\n\tsizeofPtr = sizeof(void*),\n};\n\nunion sockaddr_all {\n\tstruct sockaddr s1;\t// this one gets used for fields\n\tstruct sockaddr_in s2;\t// these pad it out\n\tstruct sockaddr_in6 s3;\n\tstruct sockaddr_un s4;\n\tstruct sockaddr_dl s5;\n};\n\nstruct sockaddr_any {\n\tstruct sockaddr addr;\n\tchar pad[sizeof(union sockaddr_all) - sizeof(struct sockaddr)];\n};\n\n*/\nimport \"C\"\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 52,
   "Snippet": "}\n\n// Translate \"kern.hostname\" to []_C_int{0,1,2,3}.\nfunc nametomib(name string) (mib []_C_int, err error) {\n\tconst siz = unsafe.Sizeof(mib[0])"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_openbsd.go",
   "Line": 46,
   "Snippet": "}\n\n//sysnb pipe(p *[2]_C_int) (err error)\nfunc Pipe(p []int) (err error) {\n\tif len(p) != 2 {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 32,
   "Snippet": "}\n\n// Translate \"kern.hostname\" to []_C_int{0,1,2,3}.\nfunc nametomib(name string) (mib []_C_int, err error) {\n\tconst siz = unsafe.Sizeof(mib[0])"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin_arm.go",
   "Line": 65,
   "Snippet": "\n// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions\n// of darwin/arm the syscall is called sysctl instead of __sysctl.\nconst SYS___SYSCTL = SYS_SYSCTL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin_arm.go",
   "Line": 64,
   "Snippet": "func Syscall9(num, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err syscall.Errno) // sic\n\n// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions\n// of darwin/arm the syscall is called sysctl instead of __sysctl.\nconst SYS___SYSCTL = SYS_SYSCTL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux_s390x.go",
   "Line": 127,
   "Snippet": "\n// Linux on s390x uses the old mmap interface, which requires arguments to be passed in a struct.\n// mmap2 also requires arguments to be passed in a struct; it is currently not exposed in \u003casm/unistd.h\u003e.\nfunc mmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error) {\n\tmmap_args := [6]uintptr{addr, length, uintptr(prot), uintptr(flags), uintptr(fd), uintptr(offset)}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 929,
   "Snippet": "// KeyctlGetKeyringID implements the KEYCTL_GET_KEYRING_ID command.\n// See the full documentation at:\n// http://man7.org/linux/man-pages/man3/keyctl_get_keyring_ID.3.html\nfunc KeyctlGetKeyringID(id int, create bool) (ringid int, err error) {\n\tcreateInt := 0"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 927,
   "Snippet": "// Keyctl commands with special signatures.\n\n// KeyctlGetKeyringID implements the KEYCTL_GET_KEYRING_ID command.\n// See the full documentation at:\n// http://man7.org/linux/man-pages/man3/keyctl_get_keyring_ID.3.html"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 987,
   "Snippet": "// from KEYCTL_READ's behavior which always returns the requested payload size.\n// See the full documentation at:\n// http://man7.org/linux/man-pages/man3/keyctl_dh_compute.3.html\nfunc KeyctlDHCompute(params *KeyctlDHParams, buffer []byte) (size int, err error) {\n\treturn keyctlDH(KEYCTL_DH_COMPUTE, params, buffer)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 979,
   "Snippet": "//sys\tkeyctlDH(cmd int, arg2 *KeyctlDHParams, buf []byte) (ret int, err error) = SYS_KEYCTL\n\n// KeyctlDHCompute implements the KEYCTL_DH_COMPUTE command. This command\n// computes a Diffie-Hellman shared secret based on the provide params. The\n// secret is written to the provided buffer and the returned size is the number"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 972,
   "Snippet": "// of Iovec (each of which represents a buffer) instead of a single buffer.\n// See the full documentation at:\n// http://man7.org/linux/man-pages/man3/keyctl_instantiate_iov.3.html\nfunc KeyctlInstantiateIOV(id int, payload []Iovec, ringid int) error {\n\treturn keyctlIOV(KEYCTL_INSTANTIATE_IOV, id, payload, ringid)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 968,
   "Snippet": "//sys\tkeyctlIOV(cmd int, arg2 int, payload []Iovec, arg5 int) (err error) = SYS_KEYCTL\n\n// KeyctlInstantiateIOV implements the KEYCTL_INSTANTIATE_IOV command. This\n// command is similar to KEYCTL_INSTANTIATE, except that the payload is a slice\n// of Iovec (each of which represents a buffer) instead of a single buffer."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 509,
   "Snippet": "// Client example:\n//\n//      fd, _ := Socket(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM)\n//      _ = Connect(fd, \u0026SockaddrRFCOMM{\n//      \tChannel: 1,"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 497,
   "Snippet": "// Server example:\n//\n//      fd, _ := Socket(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM)\n//      _ = unix.Bind(fd, \u0026unix.SockaddrRFCOMM{\n//      \tChannel: 1,"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 588,
   "Snippet": "//\n//      // Open a socket to perform SHA1 hashing.\n//      fd, _ := unix.Socket(unix.AF_ALG, unix.SOCK_SEQPACKET, 0)\n//      addr := \u0026unix.SockaddrALG{Type: \"hash\", Name: \"sha1\"}\n//      unix.Bind(fd, addr)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 593,
   "Snippet": "//      // Note: unix.Accept does not work at this time; must invoke accept()\n//      // manually using unix.Syscall.\n//      hashfd, _, _ := unix.Syscall(unix.SYS_ACCEPT, uintptr(fd), 0, 0)\n//\n// Once a file descriptor has been returned from Accept, it may be used to"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 535,
   "Snippet": "// SockaddrCAN implements the Sockaddr interface for AF_CAN type sockets.\n// The RxID and TxID fields are used for transport protocol addressing in\n// (CAN_TP16, CAN_TP20, CAN_MCNET, and CAN_ISOTP), they can be left with\n// zero values for CAN_RAW and CAN_BCM sockets as they have no meaning.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 536,
   "Snippet": "// The RxID and TxID fields are used for transport protocol addressing in\n// (CAN_TP16, CAN_TP20, CAN_MCNET, and CAN_ISOTP), they can be left with\n// zero values for CAN_RAW and CAN_BCM sockets as they have no meaning.\n//\n// The SockaddrCAN struct must be bound to the socket file descriptor"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 542,
   "Snippet": "//\n//      // Read one raw CAN frame\n//      fd, _ := Socket(AF_CAN, SOCK_RAW, CAN_RAW)\n//      addr := \u0026SockaddrCAN{Ifindex: index}\n//      Bind(fd, addr)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 900,
   "Snippet": "\n// KeyctlString calls keyctl commands which return a string.\n// These commands are KEYCTL_DESCRIBE and KEYCTL_GET_SECURITY.\nfunc KeyctlString(cmd int, id int) (string, error) {\n\t// We must loop as the string data may change in between the syscalls."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 952,
   "Snippet": "// KeyctlJoinSessionKeyring implements the KEYCTL_JOIN_SESSION_KEYRING command.\n// See the full documentation at:\n// http://man7.org/linux/man-pages/man3/keyctl_join_session_keyring.3.html\nfunc KeyctlJoinSessionKeyring(name string) (ringid int, err error) {\n\treturn keyctlJoin(KEYCTL_JOIN_SESSION_KEYRING, name)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 950,
   "Snippet": "//sys\tkeyctlJoin(cmd int, arg2 string) (ret int, err error) = SYS_KEYCTL\n\n// KeyctlJoinSessionKeyring implements the KEYCTL_JOIN_SESSION_KEYRING command.\n// See the full documentation at:\n// http://man7.org/linux/man-pages/man3/keyctl_join_session_keyring.3.html"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_freebsd.go",
   "Line": 16,
   "Snippet": "package unix\n\n/*\n#define KERNEL\n#include \u003cdirent.h\u003e\n#include \u003cfcntl.h\u003e\n#include \u003cpoll.h\u003e\n#include \u003csignal.h\u003e\n#include \u003ctermios.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csys/capability.h\u003e\n#include \u003csys/event.h\u003e\n#include \u003csys/mman.h\u003e\n#include \u003csys/mount.h\u003e\n#include \u003csys/param.h\u003e\n#include \u003csys/ptrace.h\u003e\n#include \u003csys/resource.h\u003e\n#include \u003csys/select.h\u003e\n#include \u003csys/signal.h\u003e\n#include \u003csys/socket.h\u003e\n#include \u003csys/stat.h\u003e\n#include \u003csys/time.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/un.h\u003e\n#include \u003csys/utsname.h\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cnet/bpf.h\u003e\n#include \u003cnet/if.h\u003e\n#include \u003cnet/if_dl.h\u003e\n#include \u003cnet/route.h\u003e\n#include \u003cnetinet/in.h\u003e\n#include \u003cnetinet/icmp6.h\u003e\n#include \u003cnetinet/tcp.h\u003e\n\nenum {\n\tsizeofPtr = sizeof(void*),\n};\n\nunion sockaddr_all {\n\tstruct sockaddr s1;\t// this one gets used for fields\n\tstruct sockaddr_in s2;\t// these pad it out\n\tstruct sockaddr_in6 s3;\n\tstruct sockaddr_un s4;\n\tstruct sockaddr_dl s5;\n};\n\nstruct sockaddr_any {\n\tstruct sockaddr addr;\n\tchar pad[sizeof(union sockaddr_all) - sizeof(struct sockaddr)];\n};\n\n// This structure is a duplicate of stat on FreeBSD 8-STABLE.\n// See /usr/include/sys/stat.h.\nstruct stat8 {\n#undef st_atimespec\tst_atim\n#undef st_mtimespec\tst_mtim\n#undef st_ctimespec\tst_ctim\n#undef st_birthtimespec\tst_birthtim\n\t__dev_t   st_dev;\n\tino_t     st_ino;\n\tmode_t    st_mode;\n\tnlink_t   st_nlink;\n\tuid_t     st_uid;\n\tgid_t     st_gid;\n\t__dev_t   st_rdev;\n#if __BSD_VISIBLE\n\tstruct  timespec st_atimespec;\n\tstruct  timespec st_mtimespec;\n\tstruct  timespec st_ctimespec;\n#else\n\ttime_t    st_atime;\n\tlong      __st_atimensec;\n\ttime_t    st_mtime;\n\tlong      __st_mtimensec;\n\ttime_t    st_ctime;\n\tlong      __st_ctimensec;\n#endif\n\toff_t     st_size;\n\tblkcnt_t st_blocks;\n\tblksize_t st_blksize;\n\tfflags_t  st_flags;\n\t__uint32_t st_gen;\n\t__int32_t st_lspare;\n#if __BSD_VISIBLE\n\tstruct timespec st_birthtimespec;\n\tunsigned int :(8 / 2) * (16 - (int)sizeof(struct timespec));\n\tunsigned int :(8 / 2) * (16 - (int)sizeof(struct timespec));\n#else\n\ttime_t    st_birthtime;\n\tlong      st_birthtimensec;\n\tunsigned int :(8 / 2) * (16 - (int)sizeof(struct __timespec));\n\tunsigned int :(8 / 2) * (16 - (int)sizeof(struct __timespec));\n#endif\n};\n\n// This structure is a duplicate of if_data on FreeBSD 8-STABLE.\n// See /usr/include/net/if.h.\nstruct if_data8 {\n\tu_char  ifi_type;\n\tu_char  ifi_physical;\n\tu_char  ifi_addrlen;\n\tu_char  ifi_hdrlen;\n\tu_char  ifi_link_state;\n\tu_char  ifi_spare_char1;\n\tu_char  ifi_spare_char2;\n\tu_char  ifi_datalen;\n\tu_long  ifi_mtu;\n\tu_long  ifi_metric;\n\tu_long  ifi_baudrate;\n\tu_long  ifi_ipackets;\n\tu_long  ifi_ierrors;\n\tu_long  ifi_opackets;\n\tu_long  ifi_oerrors;\n\tu_long  ifi_collisions;\n\tu_long  ifi_ibytes;\n\tu_long  ifi_obytes;\n\tu_long  ifi_imcasts;\n\tu_long  ifi_omcasts;\n\tu_long  ifi_iqdrops;\n\tu_long  ifi_noproto;\n\tu_long  ifi_hwassist;\n// FIXME: these are now unions, so maybe need to change definitions?\n#undef ifi_epoch\n\ttime_t  ifi_epoch;\n#undef ifi_lastchange\n\tstruct  timeval ifi_lastchange;\n};\n\n// This structure is a duplicate of if_msghdr on FreeBSD 8-STABLE.\n// See /usr/include/net/if.h.\nstruct if_msghdr8 {\n\tu_short ifm_msglen;\n\tu_char  ifm_version;\n\tu_char  ifm_type;\n\tint     ifm_addrs;\n\tint     ifm_flags;\n\tu_short ifm_index;\n\tstruct  if_data8 ifm_data;\n};\n*/\nimport \"C\"\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin_arm64.go",
   "Line": 66,
   "Snippet": "func Syscall9(num, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err syscall.Errno) // sic\n\n// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions\n// of darwin/arm64 the syscall is called sysctl instead of __sysctl.\nconst SYS___SYSCTL = SYS_SYSCTL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin_arm64.go",
   "Line": 67,
   "Snippet": "\n// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions\n// of darwin/arm64 the syscall is called sysctl instead of __sysctl.\nconst SYS___SYSCTL = SYS_SYSCTL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 32,
   "Snippet": "}\n\n// Translate \"kern.hostname\" to []_C_int{0,1,2,3}.\nfunc nametomib(name string) (mib []_C_int, err error) {\n\tconst siz = unsafe.Sizeof(mib[0])"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_solaris.go",
   "Line": 325,
   "Snippet": "}\n\n// FcntlFlock performs a fcntl syscall for the F_GETLK, F_SETLK or F_SETLKW command.\nfunc FcntlFlock(fd uintptr, cmd int, lk *Flock_t) error {\n\t_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(\u0026procfcntl)), 3, uintptr(fd), uintptr(cmd), uintptr(unsafe.Pointer(lk)), 0, 0, 0)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_darwin.go",
   "Line": 16,
   "Snippet": "package unix\n\n/*\n#define __DARWIN_UNIX03 0\n#define KERNEL\n#define _DARWIN_USE_64_BIT_INODE\n#include \u003cdirent.h\u003e\n#include \u003cfcntl.h\u003e\n#include \u003cpoll.h\u003e\n#include \u003csignal.h\u003e\n#include \u003ctermios.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cmach/mach.h\u003e\n#include \u003cmach/message.h\u003e\n#include \u003csys/event.h\u003e\n#include \u003csys/mman.h\u003e\n#include \u003csys/mount.h\u003e\n#include \u003csys/param.h\u003e\n#include \u003csys/ptrace.h\u003e\n#include \u003csys/resource.h\u003e\n#include \u003csys/select.h\u003e\n#include \u003csys/signal.h\u003e\n#include \u003csys/socket.h\u003e\n#include \u003csys/stat.h\u003e\n#include \u003csys/time.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/uio.h\u003e\n#include \u003csys/un.h\u003e\n#include \u003csys/utsname.h\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cnet/bpf.h\u003e\n#include \u003cnet/if.h\u003e\n#include \u003cnet/if_dl.h\u003e\n#include \u003cnet/if_var.h\u003e\n#include \u003cnet/route.h\u003e\n#include \u003cnetinet/in.h\u003e\n#include \u003cnetinet/icmp6.h\u003e\n#include \u003cnetinet/tcp.h\u003e\n\nenum {\n\tsizeofPtr = sizeof(void*),\n};\n\nunion sockaddr_all {\n\tstruct sockaddr s1;\t// this one gets used for fields\n\tstruct sockaddr_in s2;\t// these pad it out\n\tstruct sockaddr_in6 s3;\n\tstruct sockaddr_un s4;\n\tstruct sockaddr_dl s5;\n};\n\nstruct sockaddr_any {\n\tstruct sockaddr addr;\n\tchar pad[sizeof(union sockaddr_all) - sizeof(struct sockaddr)];\n};\n\n*/\nimport \"C\"\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_openbsd.go",
   "Line": 16,
   "Snippet": "package unix\n\n/*\n#define KERNEL\n#include \u003cdirent.h\u003e\n#include \u003cfcntl.h\u003e\n#include \u003cpoll.h\u003e\n#include \u003csignal.h\u003e\n#include \u003ctermios.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csys/param.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/event.h\u003e\n#include \u003csys/mman.h\u003e\n#include \u003csys/mount.h\u003e\n#include \u003csys/ptrace.h\u003e\n#include \u003csys/resource.h\u003e\n#include \u003csys/select.h\u003e\n#include \u003csys/signal.h\u003e\n#include \u003csys/socket.h\u003e\n#include \u003csys/stat.h\u003e\n#include \u003csys/time.h\u003e\n#include \u003csys/uio.h\u003e\n#include \u003csys/un.h\u003e\n#include \u003csys/utsname.h\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cnet/bpf.h\u003e\n#include \u003cnet/if.h\u003e\n#include \u003cnet/if_dl.h\u003e\n#include \u003cnet/route.h\u003e\n#include \u003cnetinet/in.h\u003e\n#include \u003cnetinet/icmp6.h\u003e\n#include \u003cnetinet/tcp.h\u003e\n\nenum {\n\tsizeofPtr = sizeof(void*),\n};\n\nunion sockaddr_all {\n\tstruct sockaddr s1;\t// this one gets used for fields\n\tstruct sockaddr_in s2;\t// these pad it out\n\tstruct sockaddr_in6 s3;\n\tstruct sockaddr_un s4;\n\tstruct sockaddr_dl s5;\n};\n\nstruct sockaddr_any {\n\tstruct sockaddr addr;\n\tchar pad[sizeof(union sockaddr_all) - sizeof(struct sockaddr)];\n};\n\n*/\nimport \"C\"\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/types_solaris.go",
   "Line": 16,
   "Snippet": "package unix\n\n/*\n#define KERNEL\n// These defines ensure that builds done on newer versions of Solaris are\n// backwards-compatible with older versions of Solaris and\n// OpenSolaris-based derivatives.\n#define __USE_SUNOS_SOCKETS__          // msghdr\n#define __USE_LEGACY_PROTOTYPES__      // iovec\n#include \u003cdirent.h\u003e\n#include \u003cfcntl.h\u003e\n#include \u003cnetdb.h\u003e\n#include \u003climits.h\u003e\n#include \u003cpoll.h\u003e\n#include \u003csignal.h\u003e\n#include \u003ctermios.h\u003e\n#include \u003ctermio.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csys/mman.h\u003e\n#include \u003csys/mount.h\u003e\n#include \u003csys/param.h\u003e\n#include \u003csys/resource.h\u003e\n#include \u003csys/select.h\u003e\n#include \u003csys/signal.h\u003e\n#include \u003csys/socket.h\u003e\n#include \u003csys/stat.h\u003e\n#include \u003csys/statvfs.h\u003e\n#include \u003csys/time.h\u003e\n#include \u003csys/times.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/utsname.h\u003e\n#include \u003csys/un.h\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cnet/bpf.h\u003e\n#include \u003cnet/if.h\u003e\n#include \u003cnet/if_dl.h\u003e\n#include \u003cnet/route.h\u003e\n#include \u003cnetinet/in.h\u003e\n#include \u003cnetinet/icmp6.h\u003e\n#include \u003cnetinet/tcp.h\u003e\n#include \u003custat.h\u003e\n#include \u003cutime.h\u003e\n\nenum {\n\tsizeofPtr = sizeof(void*),\n};\n\nunion sockaddr_all {\n\tstruct sockaddr s1;\t// this one gets used for fields\n\tstruct sockaddr_in s2;\t// these pad it out\n\tstruct sockaddr_in6 s3;\n\tstruct sockaddr_un s4;\n\tstruct sockaddr_dl s5;\n};\n\nstruct sockaddr_any {\n\tstruct sockaddr addr;\n\tchar pad[sizeof(union sockaddr_all) - sizeof(struct sockaddr)];\n};\n\n*/\nimport \"C\"\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin_amd64.go",
   "Line": 67,
   "Snippet": "\n// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions\n// of darwin/amd64 the syscall is called sysctl instead of __sysctl.\nconst SYS___SYSCTL = SYS_SYSCTL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin_amd64.go",
   "Line": 66,
   "Snippet": "func Syscall9(num, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err syscall.Errno)\n\n// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions\n// of darwin/amd64 the syscall is called sysctl instead of __sysctl.\nconst SYS___SYSCTL = SYS_SYSCTL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/cap_freebsd.go",
   "Line": 184,
   "Snippet": "\n// CapRightsGet returns a CapRights structure containing the operations permitted on fd.\n// See man cap_rights_get(3) and rights(4).\nfunc CapRightsGet(fd uintptr) (*CapRights, error) {\n\tr, err := CapRightsInit(nil)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/cap_freebsd.go",
   "Line": 163,
   "Snippet": "\n// CapRightsInit returns a pointer to an initialised CapRights structure filled with rights.\n// See man cap_rights_init(3) and rights(4).\nfunc CapRightsInit(rights []uint64) (*CapRights, error) {\n\tvar r CapRights"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/cap_freebsd.go",
   "Line": 178,
   "Snippet": "// CapRightsLimit reduces the operations permitted on fd to at most those contained in rights.\n// The capability rights on fd can never be increased by CapRightsLimit.\n// See man cap_rights_limit(2) and rights(4).\nfunc CapRightsLimit(fd uintptr, rights *CapRights) error {\n\treturn capRightsLimit(int(fd), rights)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin_386.go",
   "Line": 66,
   "Snippet": "func Syscall9(num, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err syscall.Errno)\n\n// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions\n// of darwin/386 the syscall is called sysctl instead of __sysctl.\nconst SYS___SYSCTL = SYS_SYSCTL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin_386.go",
   "Line": 67,
   "Snippet": "\n// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions\n// of darwin/386 the syscall is called sysctl instead of __sysctl.\nconst SYS___SYSCTL = SYS_SYSCTL"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/openpgp/keys.go",
   "Line": 463,
   "Snippet": "// NewEntity returns an Entity that contains a fresh RSA/RSA keypair with a\n// single identity composed of the given full name, comment and email, any of\n// which may be empty but must not contain any of \"()\u003c\u003e\\x00\".\n// If config is nil, sensible defaults will be used.\nfunc NewEntity(name, comment, email string, config *packet.Config) (*Entity, error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/ssh/client_auth.go",
   "Line": 519,
   "Snippet": "// authentication (e.g. Keyboard-Interactive, Password, etc) where the user\n// could mistype their response resulting in the server issuing a\n// SSH_MSG_USERAUTH_FAILURE (rfc4252 #8 [password] and rfc4256 #3.4\n// [keyboard-interactive]); Without this decorator, the non-retryable\n// AuthMethod would be removed from future consideration, and never tried again"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/ssh/streamlocal.go",
   "Line": 27,
   "Snippet": "}\n\n// streamLocalChannelForwardMsg is a struct used for SSH2_MSG_GLOBAL_REQUEST message\n// with \"streamlocal-forward@openssh.com\"/\"cancel-streamlocal-forward@openssh.com\" string.\ntype streamLocalChannelForwardMsg struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/ssh/streamlocal.go",
   "Line": 9,
   "Snippet": ")\n\n// streamLocalChannelOpenDirectMsg is a struct used for SSH_MSG_CHANNEL_OPEN message\n// with \"direct-streamlocal@openssh.com\" string.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/ssh/streamlocal.go",
   "Line": 20,
   "Snippet": "}\n\n// forwardedStreamLocalPayload is a struct used for SSH_MSG_CHANNEL_OPEN message\n// with \"forwarded-streamlocal@openssh.com\" string.\ntype forwardedStreamLocalPayload struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/reference.go",
   "Line": 19,
   "Snippet": "\n// RefRevParseRules are a set of rules to parse references into short names.\n// These are the same rules as used by git in shorten_unambiguous_ref.\n// See: https://github.com/git/git/blob/e0aaa1b6532cfce93d87af9bc813fb2e7a7ce9d7/refs.c#L417\nvar RefRevParseRules = []string{"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/doc.go",
   "Line": 3,
   "Snippet": "package packp\n\n/*\n\nA nice way to trace the real data transmitted and received by git, use:\n\nGIT_TRACE_PACKET=true git ls-remote http://github.com/src-d/go-git\nGIT_TRACE_PACKET=true git clone http://github.com/src-d/go-git\n\nHere follows a copy of the current protocol specification at the time of\nthis writing.\n\n(Please notice that most http git servers will add a flush-pkt after the\nfirst pkt-line when using HTTP smart.)\n\n\nDocumentation Common to Pack and Http Protocols\n===============================================\n\nABNF Notation\n-------------\n\nABNF notation as described by RFC 5234 is used within the protocol documents,\nexcept the following replacement core rules are used:\n----\n  HEXDIG    =  DIGIT / \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\"\n----\n\nWe also define the following common rules:\n----\n  NUL       =  %x00\n  zero-id   =  40*\"0\"\n  obj-id    =  40*(HEXDIGIT)\n\n  refname  =  \"HEAD\"\n  refname /=  \"refs/\" \u003csee discussion below\u003e\n----\n\nA refname is a hierarchical octet string beginning with \"refs/\" and\nnot violating the 'git-check-ref-format' command's validation rules.\nMore specifically, they:\n\n. They can include slash `/` for hierarchical (directory)\n  grouping, but no slash-separated component can begin with a\n  dot `.`.\n\n. They must contain at least one `/`. This enforces the presence of a\n  category like `heads/`, `tags/` etc. but the actual names are not\n  restricted.\n\n. They cannot have two consecutive dots `..` anywhere.\n\n. They cannot have ASCII control characters (i.e. bytes whose\n  values are lower than \\040, or \\177 `DEL`), space, tilde `~`,\n  caret `^`, colon `:`, question-mark `?`, asterisk `*`,\n  or open bracket `[` anywhere.\n\n. They cannot end with a slash `/` or a dot `.`.\n\n. They cannot end with the sequence `.lock`.\n\n. They cannot contain a sequence `@{`.\n\n. They cannot contain a `\\\\`.\n\n\npkt-line Format\n---------------\n\nMuch (but not all) of the payload is described around pkt-lines.\n\nA pkt-line is a variable length binary string.  The first four bytes\nof the line, the pkt-len, indicates the total length of the line,\nin hexadecimal.  The pkt-len includes the 4 bytes used to contain\nthe length's hexadecimal representation.\n\nA pkt-line MAY contain binary data, so implementors MUST ensure\npkt-line parsing/formatting routines are 8-bit clean.\n\nA non-binary line SHOULD BE terminated by an LF, which if present\nMUST be included in the total length. Receivers MUST treat pkt-lines\nwith non-binary data the same whether or not they contain the trailing\nLF (stripping the LF if present, and not complaining when it is\nmissing).\n\nThe maximum length of a pkt-line's data component is 65516 bytes.\nImplementations MUST NOT send pkt-line whose length exceeds 65520\n(65516 bytes of payload + 4 bytes of length data).\n\nImplementations SHOULD NOT send an empty pkt-line (\"0004\").\n\nA pkt-line with a length field of 0 (\"0000\"), called a flush-pkt,\nis a special case and MUST be handled differently than an empty\npkt-line (\"0004\").\n\n----\n  pkt-line     =  data-pkt / flush-pkt\n\n  data-pkt     =  pkt-len pkt-payload\n  pkt-len      =  4*(HEXDIG)\n  pkt-payload  =  (pkt-len - 4)*(OCTET)\n\n  flush-pkt    = \"0000\"\n----\n\nExamples (as C-style strings):\n\n----\n  pkt-line          actual value\n  ---------------------------------\n  \"0006a\\n\"         \"a\\n\"\n  \"0005a\"           \"a\"\n  \"000bfoobar\\n\"    \"foobar\\n\"\n  \"0004\"            \"\"\n----\n\nPackfile transfer protocols\n===========================\n\nGit supports transferring data in packfiles over the ssh://, git://, http:// and\nfile:// transports.  There exist two sets of protocols, one for pushing\ndata from a client to a server and another for fetching data from a\nserver to a client.  The three transports (ssh, git, file) use the same\nprotocol to transfer data. http is documented in http-protocol.txt.\n\nThe processes invoked in the canonical Git implementation are 'upload-pack'\non the server side and 'fetch-pack' on the client side for fetching data;\nthen 'receive-pack' on the server and 'send-pack' on the client for pushing\ndata.  The protocol functions to have a server tell a client what is\ncurrently on the server, then for the two to negotiate the smallest amount\nof data to send in order to fully update one or the other.\n\npkt-line Format\n---------------\n\nThe descriptions below build on the pkt-line format described in\nprotocol-common.txt. When the grammar indicate `PKT-LINE(...)`, unless\notherwise noted the usual pkt-line LF rules apply: the sender SHOULD\ninclude a LF, but the receiver MUST NOT complain if it is not present.\n\nTransports\n----------\nThere are three transports over which the packfile protocol is\ninitiated.  The Git transport is a simple, unauthenticated server that\ntakes the command (almost always 'upload-pack', though Git\nservers can be configured to be globally writable, in which 'receive-\npack' initiation is also allowed) with which the client wishes to\ncommunicate and executes it and connects it to the requesting\nprocess.\n\nIn the SSH transport, the client just runs the 'upload-pack'\nor 'receive-pack' process on the server over the SSH protocol and then\ncommunicates with that invoked process over the SSH connection.\n\nThe file:// transport runs the 'upload-pack' or 'receive-pack'\nprocess locally and communicates with it over a pipe.\n\nGit Transport\n-------------\n\nThe Git transport starts off by sending the command and repository\non the wire using the pkt-line format, followed by a NUL byte and a\nhostname parameter, terminated by a NUL byte.\n\n   0032git-upload-pack /project.git\\0host=myserver.com\\0\n\n--\n   git-proto-request = request-command SP pathname NUL [ host-parameter NUL ]\n   request-command   = \"git-upload-pack\" / \"git-receive-pack\" /\n\t\t       \"git-upload-archive\"   ; case sensitive\n   pathname          = *( %x01-ff ) ; exclude NUL\n   host-parameter    = \"host=\" hostname [ \":\" port ]\n--\n\nOnly host-parameter is allowed in the git-proto-request. Clients\nMUST NOT attempt to send additional parameters. It is used for the\ngit-daemon name based virtual hosting.  See --interpolated-path\noption to git daemon, with the %H/%CH format characters.\n\nBasically what the Git client is doing to connect to an 'upload-pack'\nprocess on the server side over the Git protocol is this:\n\n   $ echo -e -n \\\n     \"0039git-upload-pack /schacon/gitbook.git\\0host=example.com\\0\" |\n     nc -v example.com 9418\n\nIf the server refuses the request for some reasons, it could abort\ngracefully with an error message.\n\n----\n  error-line     =  PKT-LINE(\"ERR\" SP explanation-text)\n----\n\n\nSSH Transport\n-------------\n\nInitiating the upload-pack or receive-pack processes over SSH is\nexecuting the binary on the server via SSH remote execution.\nIt is basically equivalent to running this:\n\n   $ ssh git.example.com \"git-upload-pack '/project.git'\"\n\nFor a server to support Git pushing and pulling for a given user over\nSSH, that user needs to be able to execute one or both of those\ncommands via the SSH shell that they are provided on login.  On some\nsystems, that shell access is limited to only being able to run those\ntwo commands, or even just one of them.\n\nIn an ssh:// format URI, it's absolute in the URI, so the '/' after\nthe host name (or port number) is sent as an argument, which is then\nread by the remote git-upload-pack exactly as is, so it's effectively\nan absolute path in the remote filesystem.\n\n       git clone ssh://user@example.com/project.git\n\t\t    |\n\t\t    v\n    ssh user@example.com \"git-upload-pack '/project.git'\"\n\nIn a \"user@host:path\" format URI, its relative to the user's home\ndirectory, because the Git client will run:\n\n     git clone user@example.com:project.git\n\t\t    |\n\t\t    v\n  ssh user@example.com \"git-upload-pack 'project.git'\"\n\nThe exception is if a '~' is used, in which case\nwe execute it without the leading '/'.\n\n      ssh://user@example.com/~alice/project.git,\n\t\t     |\n\t\t     v\n   ssh user@example.com \"git-upload-pack '~alice/project.git'\"\n\nA few things to remember here:\n\n- The \"command name\" is spelled with dash (e.g. git-upload-pack), but\n  this can be overridden by the client;\n\n- The repository path is always quoted with single quotes.\n\nFetching Data From a Server\n---------------------------\n\nWhen one Git repository wants to get data that a second repository\nhas, the first can 'fetch' from the second.  This operation determines\nwhat data the server has that the client does not then streams that\ndata down to the client in packfile format.\n\n\nReference Discovery\n-------------------\n\nWhen the client initially connects the server will immediately respond\nwith a listing of each reference it has (all branches and tags) along\nwith the object name that each reference currently points to.\n\n   $ echo -e -n \"0039git-upload-pack /schacon/gitbook.git\\0host=example.com\\0\" |\n      nc -v example.com 9418\n   00887217a7c7e582c46cec22a130adf4b9d7d950fba0 HEAD\\0multi_ack thin-pack\n\t\tside-band side-band-64k ofs-delta shallow no-progress include-tag\n   00441d3fcd5ced445d1abc402225c0b8a1299641f497 refs/heads/integration\n   003f7217a7c7e582c46cec22a130adf4b9d7d950fba0 refs/heads/master\n   003cb88d2441cac0977faf98efc80305012112238d9d refs/tags/v0.9\n   003c525128480b96c89e6418b1e40909bf6c5b2d580f refs/tags/v1.0\n   003fe92df48743b7bc7d26bcaabfddde0a1e20cae47c refs/tags/v1.0^{}\n   0000\n\nThe returned response is a pkt-line stream describing each ref and\nits current value.  The stream MUST be sorted by name according to\nthe C locale ordering.\n\nIf HEAD is a valid ref, HEAD MUST appear as the first advertised\nref.  If HEAD is not a valid ref, HEAD MUST NOT appear in the\nadvertisement list at all, but other refs may still appear.\n\nThe stream MUST include capability declarations behind a NUL on the\nfirst ref. The peeled value of a ref (that is \"ref^{}\") MUST be\nimmediately after the ref itself, if presented. A conforming server\nMUST peel the ref if it's an annotated tag.\n\n----\n  advertised-refs  =  (no-refs / list-of-refs)\n\t\t      *shallow\n\t\t      flush-pkt\n\n  no-refs          =  PKT-LINE(zero-id SP \"capabilities^{}\"\n\t\t      NUL capability-list)\n\n  list-of-refs     =  first-ref *other-ref\n  first-ref        =  PKT-LINE(obj-id SP refname\n\t\t      NUL capability-list)\n\n  other-ref        =  PKT-LINE(other-tip / other-peeled)\n  other-tip        =  obj-id SP refname\n  other-peeled     =  obj-id SP refname \"^{}\"\n\n  shallow          =  PKT-LINE(\"shallow\" SP obj-id)\n\n  capability-list  =  capability *(SP capability)\n  capability       =  1*(LC_ALPHA / DIGIT / \"-\" / \"_\")\n  LC_ALPHA         =  %x61-7A\n----\n\nServer and client MUST use lowercase for obj-id, both MUST treat obj-id\nas case-insensitive.\n\nSee protocol-capabilities.txt for a list of allowed server capabilities\nand descriptions.\n\nPackfile Negotiation\n--------------------\nAfter reference and capabilities discovery, the client can decide to\nterminate the connection by sending a flush-pkt, telling the server it can\nnow gracefully terminate, and disconnect, when it does not need any pack\ndata. This can happen with the ls-remote command, and also can happen when\nthe client already is up-to-date.\n\nOtherwise, it enters the negotiation phase, where the client and\nserver determine what the minimal packfile necessary for transport is,\nby telling the server what objects it wants, its shallow objects\n(if any), and the maximum commit depth it wants (if any).  The client\nwill also send a list of the capabilities it wants to be in effect,\nout of what the server said it could do with the first 'want' line.\n\n----\n  upload-request    =  want-list\n\t\t       *shallow-line\n\t\t       *1depth-request\n\t\t       flush-pkt\n\n  want-list         =  first-want\n\t\t       *additional-want\n\n  shallow-line      =  PKT-LINE(\"shallow\" SP obj-id)\n\n  depth-request     =  PKT-LINE(\"deepen\" SP depth) /\n\t\t       PKT-LINE(\"deepen-since\" SP timestamp) /\n\t\t       PKT-LINE(\"deepen-not\" SP ref)\n\n  first-want        =  PKT-LINE(\"want\" SP obj-id SP capability-list)\n  additional-want   =  PKT-LINE(\"want\" SP obj-id)\n\n  depth             =  1*DIGIT\n----\n\nClients MUST send all the obj-ids it wants from the reference\ndiscovery phase as 'want' lines. Clients MUST send at least one\n'want' command in the request body. Clients MUST NOT mention an\nobj-id in a 'want' command which did not appear in the response\nobtained through ref discovery.\n\nThe client MUST write all obj-ids which it only has shallow copies\nof (meaning that it does not have the parents of a commit) as\n'shallow' lines so that the server is aware of the limitations of\nthe client's history.\n\nThe client now sends the maximum commit history depth it wants for\nthis transaction, which is the number of commits it wants from the\ntip of the history, if any, as a 'deepen' line.  A depth of 0 is the\nsame as not making a depth request. The client does not want to receive\nany commits beyond this depth, nor does it want objects needed only to\ncomplete those commits. Commits whose parents are not received as a\nresult are defined as shallow and marked as such in the server. This\ninformation is sent back to the client in the next step.\n\nOnce all the 'want's and 'shallow's (and optional 'deepen') are\ntransferred, clients MUST send a flush-pkt, to tell the server side\nthat it is done sending the list.\n\nOtherwise, if the client sent a positive depth request, the server\nwill determine which commits will and will not be shallow and\nsend this information to the client. If the client did not request\na positive depth, this step is skipped.\n\n----\n  shallow-update   =  *shallow-line\n\t\t      *unshallow-line\n\t\t      flush-pkt\n\n  shallow-line     =  PKT-LINE(\"shallow\" SP obj-id)\n\n  unshallow-line   =  PKT-LINE(\"unshallow\" SP obj-id)\n----\n\nIf the client has requested a positive depth, the server will compute\nthe set of commits which are no deeper than the desired depth. The set\nof commits start at the client's wants.\n\nThe server writes 'shallow' lines for each\ncommit whose parents will not be sent as a result. The server writes\nan 'unshallow' line for each commit which the client has indicated is\nshallow, but is no longer shallow at the currently requested depth\n(that is, its parents will now be sent). The server MUST NOT mark\nas unshallow anything which the client has not indicated was shallow.\n\nNow the client will send a list of the obj-ids it has using 'have'\nlines, so the server can make a packfile that only contains the objects\nthat the client needs. In multi_ack mode, the canonical implementation\nwill send up to 32 of these at a time, then will send a flush-pkt. The\ncanonical implementation will skip ahead and send the next 32 immediately,\nso that there is always a block of 32 \"in-flight on the wire\" at a time.\n\n----\n  upload-haves      =  have-list\n\t\t       compute-end\n\n  have-list         =  *have-line\n  have-line         =  PKT-LINE(\"have\" SP obj-id)\n  compute-end       =  flush-pkt / PKT-LINE(\"done\")\n----\n\nIf the server reads 'have' lines, it then will respond by ACKing any\nof the obj-ids the client said it had that the server also has. The\nserver will ACK obj-ids differently depending on which ack mode is\nchosen by the client.\n\nIn multi_ack mode:\n\n  * the server will respond with 'ACK obj-id continue' for any common\n    commits.\n\n  * once the server has found an acceptable common base commit and is\n    ready to make a packfile, it will blindly ACK all 'have' obj-ids\n    back to the client.\n\n  * the server will then send a 'NAK' and then wait for another response\n    from the client - either a 'done' or another list of 'have' lines.\n\nIn multi_ack_detailed mode:\n\n  * the server will differentiate the ACKs where it is signaling\n    that it is ready to send data with 'ACK obj-id ready' lines, and\n    signals the identified common commits with 'ACK obj-id common' lines.\n\nWithout either multi_ack or multi_ack_detailed:\n\n * upload-pack sends \"ACK obj-id\" on the first common object it finds.\n   After that it says nothing until the client gives it a \"done\".\n\n * upload-pack sends \"NAK\" on a flush-pkt if no common object\n   has been found yet.  If one has been found, and thus an ACK\n   was already sent, it's silent on the flush-pkt.\n\nAfter the client has gotten enough ACK responses that it can determine\nthat the server has enough information to send an efficient packfile\n(in the canonical implementation, this is determined when it has received\nenough ACKs that it can color everything left in the --date-order queue\nas common with the server, or the --date-order queue is empty), or the\nclient determines that it wants to give up (in the canonical implementation,\nthis is determined when the client sends 256 'have' lines without getting\nany of them ACKed by the server - meaning there is nothing in common and\nthe server should just send all of its objects), then the client will send\na 'done' command.  The 'done' command signals to the server that the client\nis ready to receive its packfile data.\n\nHowever, the 256 limit *only* turns on in the canonical client\nimplementation if we have received at least one \"ACK %s continue\"\nduring a prior round.  This helps to ensure that at least one common\nancestor is found before we give up entirely.\n\nOnce the 'done' line is read from the client, the server will either\nsend a final 'ACK obj-id' or it will send a 'NAK'. 'obj-id' is the object\nname of the last commit determined to be common. The server only sends\nACK after 'done' if there is at least one common base and multi_ack or\nmulti_ack_detailed is enabled. The server always sends NAK after 'done'\nif there is no common base found.\n\nThen the server will start sending its packfile data.\n\n----\n  server-response = *ack_multi ack / nak\n  ack_multi       = PKT-LINE(\"ACK\" SP obj-id ack_status)\n  ack_status      = \"continue\" / \"common\" / \"ready\"\n  ack             = PKT-LINE(\"ACK\" SP obj-id)\n  nak             = PKT-LINE(\"NAK\")\n----\n\nA simple clone may look like this (with no 'have' lines):\n\n----\n   C: 0054want 74730d410fcb6603ace96f1dc55ea6196122532d multi_ack \\\n     side-band-64k ofs-delta\\n\n   C: 0032want 7d1665144a3a975c05f1f43902ddaf084e784dbe\\n\n   C: 0032want 5a3f6be755bbb7deae50065988cbfa1ffa9ab68a\\n\n   C: 0032want 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01\\n\n   C: 0032want 74730d410fcb6603ace96f1dc55ea6196122532d\\n\n   C: 0000\n   C: 0009done\\n\n\n   S: 0008NAK\\n\n   S: [PACKFILE]\n----\n\nAn incremental update (fetch) response might look like this:\n\n----\n   C: 0054want 74730d410fcb6603ace96f1dc55ea6196122532d multi_ack \\\n     side-band-64k ofs-delta\\n\n   C: 0032want 7d1665144a3a975c05f1f43902ddaf084e784dbe\\n\n   C: 0032want 5a3f6be755bbb7deae50065988cbfa1ffa9ab68a\\n\n   C: 0000\n   C: 0032have 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01\\n\n   C: [30 more have lines]\n   C: 0032have 74730d410fcb6603ace96f1dc55ea6196122532d\\n\n   C: 0000\n\n   S: 003aACK 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01 continue\\n\n   S: 003aACK 74730d410fcb6603ace96f1dc55ea6196122532d continue\\n\n   S: 0008NAK\\n\n\n   C: 0009done\\n\n\n   S: 0031ACK 74730d410fcb6603ace96f1dc55ea6196122532d\\n\n   S: [PACKFILE]\n----\n\n\nPackfile Data\n-------------\n\nNow that the client and server have finished negotiation about what\nthe minimal amount of data that needs to be sent to the client is, the server\nwill construct and send the required data in packfile format.\n\nSee pack-format.txt for what the packfile itself actually looks like.\n\nIf 'side-band' or 'side-band-64k' capabilities have been specified by\nthe client, the server will send the packfile data multiplexed.\n\nEach packet starting with the packet-line length of the amount of data\nthat follows, followed by a single byte specifying the sideband the\nfollowing data is coming in on.\n\nIn 'side-band' mode, it will send up to 999 data bytes plus 1 control\ncode, for a total of up to 1000 bytes in a pkt-line.  In 'side-band-64k'\nmode it will send up to 65519 data bytes plus 1 control code, for a\ntotal of up to 65520 bytes in a pkt-line.\n\nThe sideband byte will be a '1', '2' or a '3'. Sideband '1' will contain\npackfile data, sideband '2' will be used for progress information that the\nclient will generally print to stderr and sideband '3' is used for error\ninformation.\n\nIf no 'side-band' capability was specified, the server will stream the\nentire packfile without multiplexing.\n\n\nPushing Data To a Server\n------------------------\n\nPushing data to a server will invoke the 'receive-pack' process on the\nserver, which will allow the client to tell it which references it should\nupdate and then send all the data the server will need for those new\nreferences to be complete.  Once all the data is received and validated,\nthe server will then update its references to what the client specified.\n\nAuthentication\n--------------\n\nThe protocol itself contains no authentication mechanisms.  That is to be\nhandled by the transport, such as SSH, before the 'receive-pack' process is\ninvoked.  If 'receive-pack' is configured over the Git transport, those\nrepositories will be writable by anyone who can access that port (9418) as\nthat transport is unauthenticated.\n\nReference Discovery\n-------------------\n\nThe reference discovery phase is done nearly the same way as it is in the\nfetching protocol. Each reference obj-id and name on the server is sent\nin packet-line format to the client, followed by a flush-pkt.  The only\nreal difference is that the capability listing is different - the only\npossible values are 'report-status', 'delete-refs', 'ofs-delta' and\n'push-options'.\n\nReference Update Request and Packfile Transfer\n----------------------------------------------\n\nOnce the client knows what references the server is at, it can send a\nlist of reference update requests.  For each reference on the server\nthat it wants to update, it sends a line listing the obj-id currently on\nthe server, the obj-id the client would like to update it to and the name\nof the reference.\n\nThis list is followed by a flush-pkt. Then the push options are transmitted\none per packet followed by another flush-pkt. After that the packfile that\nshould contain all the objects that the server will need to complete the new\nreferences will be sent.\n\n----\n  update-request    =  *shallow ( command-list | push-cert ) [packfile]\n\n  shallow           =  PKT-LINE(\"shallow\" SP obj-id)\n\n  command-list      =  PKT-LINE(command NUL capability-list)\n\t\t       *PKT-LINE(command)\n\t\t       flush-pkt\n\n  command           =  create / delete / update\n  create            =  zero-id SP new-id  SP name\n  delete            =  old-id  SP zero-id SP name\n  update            =  old-id  SP new-id  SP name\n\n  old-id            =  obj-id\n  new-id            =  obj-id\n\n  push-cert         = PKT-LINE(\"push-cert\" NUL capability-list LF)\n\t\t      PKT-LINE(\"certificate version 0.1\" LF)\n\t\t      PKT-LINE(\"pusher\" SP ident LF)\n\t\t      PKT-LINE(\"pushee\" SP url LF)\n\t\t      PKT-LINE(\"nonce\" SP nonce LF)\n\t\t      PKT-LINE(LF)\n\t\t      *PKT-LINE(command LF)\n\t\t      *PKT-LINE(gpg-signature-lines LF)\n\t\t      PKT-LINE(\"push-cert-end\" LF)\n\n  packfile          = \"PACK\" 28*(OCTET)\n----\n\nIf the receiving end does not support delete-refs, the sending end MUST\nNOT ask for delete command.\n\nIf the receiving end does not support push-cert, the sending end\nMUST NOT send a push-cert command.  When a push-cert command is\nsent, command-list MUST NOT be sent; the commands recorded in the\npush certificate is used instead.\n\nThe packfile MUST NOT be sent if the only command used is 'delete'.\n\nA packfile MUST be sent if either create or update command is used,\neven if the server already has all the necessary objects.  In this\ncase the client MUST send an empty packfile.   The only time this\nis likely to happen is if the client is creating\na new branch or a tag that points to an existing obj-id.\n\nThe server will receive the packfile, unpack it, then validate each\nreference that is being updated that it hasn't changed while the request\nwas being processed (the obj-id is still the same as the old-id), and\nit will run any update hooks to make sure that the update is acceptable.\nIf all of that is fine, the server will then update the references.\n\nPush Certificate\n----------------\n\nA push certificate begins with a set of header lines.  After the\nheader and an empty line, the protocol commands follow, one per\nline. Note that the trailing LF in push-cert PKT-LINEs is _not_\noptional; it must be present.\n\nCurrently, the following header fields are defined:\n\n`pusher` ident::\n\tIdentify the GPG key in \"Human Readable Name \u003cemail@address\u003e\"\n\tformat.\n\n`pushee` url::\n\tThe repository URL (anonymized, if the URL contains\n\tauthentication material) the user who ran `git push`\n\tintended to push into.\n\n`nonce` nonce::\n\tThe 'nonce' string the receiving repository asked the\n\tpushing user to include in the certificate, to prevent\n\treplay attacks.\n\nThe GPG signature lines are a detached signature for the contents\nrecorded in the push certificate before the signature block begins.\nThe detached signature is used to certify that the commands were\ngiven by the pusher, who must be the signer.\n\nReport Status\n-------------\n\nAfter receiving the pack data from the sender, the receiver sends a\nreport if 'report-status' capability is in effect.\nIt is a short listing of what happened in that update.  It will first\nlist the status of the packfile unpacking as either 'unpack ok' or\n'unpack [error]'.  Then it will list the status for each of the references\nthat it tried to update.  Each line is either 'ok [refname]' if the\nupdate was successful, or 'ng [refname] [error]' if the update was not.\n\n----\n  report-status     = unpack-status\n\t\t      1*(command-status)\n\t\t      flush-pkt\n\n  unpack-status     = PKT-LINE(\"unpack\" SP unpack-result)\n  unpack-result     = \"ok\" / error-msg\n\n  command-status    = command-ok / command-fail\n  command-ok        = PKT-LINE(\"ok\" SP refname)\n  command-fail      = PKT-LINE(\"ng\" SP refname SP error-msg)\n\n  error-msg         = 1*(OCTECT) ; where not \"ok\"\n----\n\nUpdates can be unsuccessful for a number of reasons.  The reference can have\nchanged since the reference discovery phase was originally sent, meaning\nsomeone pushed in the meantime.  The reference being pushed could be a\nnon-fast-forward reference and the update hooks or configuration could be\nset to not allow that, etc.  Also, some references can be updated while others\ncan be rejected.\n\nAn example client/server communication might look like this:\n\n----\n   S: 007c74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/local\\0report-status delete-refs ofs-delta\\n\n   S: 003e7d1665144a3a975c05f1f43902ddaf084e784dbe refs/heads/debug\\n\n   S: 003f74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/master\\n\n   S: 003f74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/team\\n\n   S: 0000\n\n   C: 003e7d1665144a3a975c05f1f43902ddaf084e784dbe 74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/debug\\n\n   C: 003e74730d410fcb6603ace96f1dc55ea6196122532d 5a3f6be755bbb7deae50065988cbfa1ffa9ab68a refs/heads/master\\n\n   C: 0000\n   C: [PACKDATA]\n\n   S: 000eunpack ok\\n\n   S: 0018ok refs/heads/debug\\n\n   S: 002ang refs/heads/master non-fast-forward\\n\n----\n*/\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/srvresp.go",
   "Line": 24,
   "Snippet": "// the request was done with multi_ack or multi_ack_detailed capabilities.\nfunc (r *ServerResponse) Decode(reader *bufio.Reader, isMultiACK bool) error {\n\t// TODO: implement support for multi_ack or multi_ack_detailed responses\n\tif isMultiACK {\n\t\treturn errors.New(\"multi_ack and multi_ack_detailed are not supported\")"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/format/index/doc.go",
   "Line": 217,
   "Snippet": "//\n//      - 160-bit SHA-1 of the shared index file. The shared index file path\n//        is $GIT_DIR/sharedindex.\u003cSHA-1\u003e. If all 160 bits are zero, the\n//        index does not require a shared index file.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/format/index/doc.go",
   "Line": 288,
   "Snippet": "//\n//      - An ewah bitmap, the n-th bit records \"check-only\" bit of\n//        read_directory_recursive() for the n-th directory.\n//\n//      - An ewah bitmap, the n-th bit indicates whether SHA-1 and stat data"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/format/index/doc.go",
   "Line": 256,
   "Snippet": "//      - Stat data of plumbing.excludesfile\n//\n//      - 32-bit dir_flags (see struct dir_struct)\n//\n//      - 160-bit SHA-1 of $GIT_DIR/info/exclude. Null SHA-1 means the file"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/options.go",
   "Line": 281,
   "Snippet": "\tMergeReset\n\t// SoftReset does not touch the index file or the working tree at all (but\n\t// resets the head to \u003ccommit\u003e, just like all modes do). This leaves all\n\t// your changed files \"Changes to be committed\", as git status would put it.\n\tSoftReset"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/storage/filesystem/dotgit/dotgit.go",
   "Line": 470,
   "Snippet": "\n\t// File mode is retrieved from a constant defined in the target specific\n\t// files (dotgit_rewrite_packed_refs_*). Some modes are not available\n\t// in all filesystems.\n\topenFlags := d.openAndLockPackedRefsMode()"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/config/refspec.go",
   "Line": 22,
   "Snippet": "\n// RefSpec is a mapping from local branches to remote references\n// The format of the refspec is an optional +, followed by \u003csrc\u003e:\u003cdst\u003e, where\n// \u003csrc\u003e is the pattern for references on the remote side and \u003cdst\u003e is where\n// those references will be written locally. The + tells Git to update the"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/config/refspec.go",
   "Line": 23,
   "Snippet": "// RefSpec is a mapping from local branches to remote references\n// The format of the refspec is an optional +, followed by \u003csrc\u003e:\u003cdst\u003e, where\n// \u003csrc\u003e is the pattern for references on the remote side and \u003cdst\u003e is where\n// those references will be written locally. The + tells Git to update the\n// reference even if it isn’t a fast-forward."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/s3/api.go",
   "Line": 16005,
   "Snippet": "\n// Container for the transition rule that describes when noncurrent objects\n// transition to the STANDARD_IA, ONEZONE_IA or GLACIER storage class. If your\n// bucket is versioning-enabled (or versioning is suspended), you can set this\n// action to request that Amazon S3 transition noncurrent object versions to"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/s3/api.go",
   "Line": 16008,
   "Snippet": "// bucket is versioning-enabled (or versioning is suspended), you can set this\n// action to request that Amazon S3 transition noncurrent object versions to\n// the STANDARD_IA, ONEZONE_IA or GLACIER storage class at a specific period\n// in the object's lifetime.\ntype NoncurrentVersionTransition struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 666,
   "Snippet": "//    * Whether the request was denied due to an explicit deny or due to the\n//    absence of an explicit allow. For more information, see Determining Whether\n//    a Request is Allowed or Denied (http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-denyallow)\n//    in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 272,
   "Snippet": "// duration setting for the role. This setting can have a value from 1 hour\n// to 12 hours. To learn how to view the maximum value for your role, see View\n// the Maximum Session Duration Setting for a Role (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session)\n// in the IAM User Guide. The maximum session duration limit applies when you\n// use the AssumeRole* API operations or the assume-role* CLI operations but"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 325,
   "Snippet": "//    in the IAM User Guide.\n//\n//    * Creating a Role for SAML 2.0 Federation (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_saml.html)\n//    in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 322,
   "Snippet": "//    in the IAM User Guide.\n//\n//    * Configuring a Relying Party and Claims (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml_relying-party.html)\n//    in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 295,
   "Snippet": "// permissions that are in excess of those allowed by the access policy of the\n// role that is being assumed. For more information, see Permissions for AssumeRole,\n// AssumeRoleWithSAML, and AssumeRoleWithWebIdentity (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 257,
   "Snippet": "// with the other APIs that produce temporary credentials, see Requesting Temporary\n// Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)\n// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 256,
   "Snippet": "// without user-specific credentials or configuration. For a comparison of AssumeRoleWithSAML\n// with the other APIs that produce temporary credentials, see Requesting Temporary\n// Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)\n// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)\n// in the IAM User Guide."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 276,
   "Snippet": "// use the AssumeRole* API operations or the assume-role* CLI operations but\n// does not apply when you use those operations to create a console URL. For\n// more information, see Using IAM Roles (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 316,
   "Snippet": "// For more information, see the following resources:\n//\n//    * About SAML 2.0-based Federation (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html)\n//    in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 364,
   "Snippet": "//   asked to generate credentials. The account administrator must use the IAM\n//   console to activate STS in that region. For more information, see Activating\n//   and Deactivating AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)\n//   in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 319,
   "Snippet": "//    in the IAM User Guide.\n//\n//    * Creating SAML Identity Providers (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml.html)\n//    in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1059,
   "Snippet": "//   asked to generate credentials. The account administrator must use the IAM\n//   console to activate STS in that region. For more information, see Activating\n//   and Deactivating AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)\n//   in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1011,
   "Snippet": "// with the other APIs that produce temporary credentials, see Requesting Temporary\n// Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)\n// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1010,
   "Snippet": "// code, then the API returns an access denied error. For a comparison of GetSessionToken\n// with the other APIs that produce temporary credentials, see Requesting Temporary\n// Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)\n// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)\n// in the IAM User Guide."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1044,
   "Snippet": "//\n// For more information about using GetSessionToken to create temporary credentials,\n// go to Temporary Credentials for Users in Untrusted Environments (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getsessiontoken)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 840,
   "Snippet": "// For a comparison of GetFederationToken with the other APIs that produce temporary\n// credentials, see Requesting Temporary Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)\n// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 931,
   "Snippet": "//   asked to generate credentials. The account administrator must use the IAM\n//   console to activate STS in that region. For more information, see Activating\n//   and Deactivating AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)\n//   in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 848,
   "Snippet": "// use Amazon Cognito (http://aws.amazon.com/cognito/) or AssumeRoleWithWebIdentity.\n// For more information, see Federation Through a Web-based Identity Provider\n// (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity).\n//\n// The GetFederationToken action must be called by using the long-term AWS security"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 908,
   "Snippet": "// For information about using GetFederationToken to create temporary security\n// credentials, see GetFederationToken—Federation Through a Custom Identity\n// Broker (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getfederationtoken).\n//\n// Returns awserr.Error for service API and SDK errors. Use runtime type assertions"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 905,
   "Snippet": "//\n// For more information about how permissions work, see Permissions for GetFederationToken\n// (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_getfederationtoken.html).\n// For information about using GetFederationToken to create temporary security\n// credentials, see GetFederationToken—Federation Through a Custom Identity"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 839,
   "Snippet": "// credentials can be safely stored, usually in a server-based application.\n// For a comparison of GetFederationToken with the other APIs that produce temporary\n// credentials, see Requesting Temporary Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)\n// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)\n// in the IAM User Guide."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 492,
   "Snippet": "// of those allowed by the access policy of the role that is being assumed.\n// For more information, see Permissions for AssumeRole, AssumeRoleWithSAML,\n// and AssumeRoleWithWebIdentity (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 470,
   "Snippet": "// This setting can have a value from 1 hour to 12 hours. To learn how to view\n// the maximum value for your role, see View the Maximum Session Duration Setting\n// for a Role (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session)\n// in the IAM User Guide. The maximum session duration limit applies when you\n// use the AssumeRole* API operations or the assume-role* CLI operations but"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 457,
   "Snippet": "// For a comparison of AssumeRoleWithWebIdentity with the other APIs that produce\n// temporary credentials, see Requesting Temporary Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)\n// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 474,
   "Snippet": "// use the AssumeRole* API operations or the assume-role* CLI operations but\n// does not apply when you use those operations to create a console URL. For\n// more information, see Using IAM Roles (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 511,
   "Snippet": "// API, see the following resources:\n//\n//    * Using Web Identity Federation APIs for Mobile Apps (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc_manual.html)\n//    and Federation Through a Web-based Identity Provider (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity).\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 512,
   "Snippet": "//\n//    * Using Web Identity Federation APIs for Mobile Apps (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc_manual.html)\n//    and Federation Through a Web-based Identity Provider (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity).\n//\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 456,
   "Snippet": "// of the caller is validated by using a token from the web identity provider.\n// For a comparison of AssumeRoleWithWebIdentity with the other APIs that produce\n// temporary credentials, see Requesting Temporary Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)\n// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)\n// in the IAM User Guide."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 575,
   "Snippet": "//   asked to generate credentials. The account administrator must use the IAM\n//   console to activate STS in that region. For more information, see Activating\n//   and Deactivating AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)\n//   in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 97,
   "Snippet": "// This setting can have a value from 1 hour to 12 hours. To learn how to view\n// the maximum value for your role, see View the Maximum Session Duration Setting\n// for a Role (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session)\n// in the IAM User Guide. The maximum session duration limit applies when you\n// use the AssumeRole* API operations or the assume-role* CLI operations but"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 88,
   "Snippet": "// that user. With those temporary security credentials, you construct a sign-in\n// URL that users can use to access the console. For more information, see Common\n// Scenarios for Temporary Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html#sts-introduction)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 101,
   "Snippet": "// use the AssumeRole* API operations or the assume-role* CLI operations but\n// does not apply when you use those operations to create a console URL. For\n// more information, see Using IAM Roles (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 63,
   "Snippet": "// AssumeRole with the other APIs that produce temporary credentials, see Requesting\n// Temporary Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)\n// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 119,
   "Snippet": "// of those allowed by the access policy of the role that is being assumed.\n// For more information, see Permissions for AssumeRole, AssumeRoleWithSAML,\n// and AssumeRoleWithWebIdentity (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html)\n// in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 182,
   "Snippet": "//   asked to generate credentials. The account administrator must use the IAM\n//   console to activate STS in that region. For more information, see Activating\n//   and Deactivating AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)\n//   in the IAM User Guide.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 62,
   "Snippet": "// use AssumeRole for cross-account access or federation. For a comparison of\n// AssumeRole with the other APIs that produce temporary credentials, see Requesting\n// Temporary Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)\n// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)\n// in the IAM User Guide."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 102,
   "Snippet": "// be read concurrently, but it should not be written to concurrently.\n//\n// If the AWS_SDK_LOAD_CONFIG environment variable is set to a truthy value\n// the shared config file (~/.aws/config) will also be loaded in addition to\n// the shared credentials file (~/.aws/credentials). Values set in both the"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 41,
   "Snippet": "// read concurrently, but it should not be written to concurrently.\n//\n// If the AWS_SDK_LOAD_CONFIG environment is set to a truthy value, the New\n// method could now encounter an error when loading the configuration. When\n// The environment variable is set, and an error occurs, New will return a"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 48,
   "Snippet": "// session.\n//\n// If the AWS_SDK_LOAD_CONFIG environment variable is set to a truthy value\n// the shared config file (~/.aws/config) will also be loaded, in addition to\n// the shared credentials file (~/.aws/credentials). Values set in both the"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 214,
   "Snippet": "// values to configure how the Session is created.\n//\n// If the AWS_SDK_LOAD_CONFIG environment variable is set to a truthy value\n// the shared config file (~/.aws/config) will also be loaded in addition to\n// the shared credentials file (~/.aws/credentials). Values set in both the"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/shared_config.go",
   "Line": 172,
   "Snippet": "// for incomplete grouped values in the config. Such as credentials. For example\n// if a config file only includes aws_access_key_id but no aws_secret_access_key\n// the aws_access_key_id will be ignored.\nfunc (cfg *sharedConfig) setFromIniFile(profile string, file sharedConfigFile) error {\n\tsection, err := file.IniData.GetSection(profile)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/shared_config.go",
   "Line": 171,
   "Snippet": "// Only loads complete logically grouped values, and will not set fields in cfg\n// for incomplete grouped values in the config. Such as credentials. For example\n// if a config file only includes aws_access_key_id but no aws_secret_access_key\n// the aws_access_key_id will be ignored.\nfunc (cfg *sharedConfig) setFromIniFile(profile string, file sharedConfigFile) error {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 159,
   "Snippet": "//\n// Loads the shared configuration in addition to the SDK's specific configuration.\n// This will load the same values as `loadEnvConfig` if the `AWS_SDK_LOAD_CONFIG`\n// environment variable is set.\nfunc loadSharedEnvConfig() envConfig {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 147,
   "Snippet": "// See `envConfig` for the values that will be retrieved.\n//\n// If the environment variable `AWS_SDK_LOAD_CONFIG` is set to a truthy value\n// the shared SDK config will be loaded in addition to the SDK's specific\n// configuration values."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/credentials/env_provider.go",
   "Line": 33,
   "Snippet": "// * Access Key ID:     AWS_ACCESS_KEY_ID or AWS_ACCESS_KEY\n//\n// * Secret Access Key: AWS_SECRET_ACCESS_KEY or AWS_SECRET_KEY\ntype EnvProvider struct {\n\tretrieved bool"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/credentials/env_provider.go",
   "Line": 31,
   "Snippet": "// Environment variables used:\n//\n// * Access Key ID:     AWS_ACCESS_KEY_ID or AWS_ACCESS_KEY\n//\n// * Secret Access Key: AWS_SECRET_ACCESS_KEY or AWS_SECRET_KEY"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/corehandlers/user_agent.go",
   "Line": 25,
   "Snippet": "// execution environment to the user agent.\n//\n// If the environment variable AWS_EXECUTION_ENV is set, its value will be\n// appended to the user agent string.\nvar AddHostExecEnvUserAgentHander = request.NamedHandler{"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/cldr/collate.go",
   "Line": 101,
   "Snippet": "\n// parseSpecialAnchor parses the anchor syntax which is either of the form\n//    ['before' \u003clevel\u003e] \u003canchor\u003e\n// or\n//    [\u003clabel\u003e]"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/cldr/collate.go",
   "Line": 103,
   "Snippet": "//    ['before' \u003clevel\u003e] \u003canchor\u003e\n// or\n//    [\u003clabel\u003e]\n// The starting should already be consumed.\nfunc parseSpecialAnchor(p RuleProcessor, s string) (tail string, err error) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/norm/maketables.go",
   "Line": 133,
   "Snippet": "\n// In UnicodeData.txt, some ranges are marked like this:\n//\t3400;\u003cCJK Ideograph Extension A, First\u003e;Lo;0;L;;;;;N;;;;;\n//\t4DB5;\u003cCJK Ideograph Extension A, Last\u003e;Lo;0;L;;;;;N;;;;;\n// parseCharacter keeps a state variable indicating the weirdness."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/norm/maketables.go",
   "Line": 134,
   "Snippet": "// In UnicodeData.txt, some ranges are marked like this:\n//\t3400;\u003cCJK Ideograph Extension A, First\u003e;Lo;0;L;;;;;N;;;;;\n//\t4DB5;\u003cCJK Ideograph Extension A, Last\u003e;Lo;0;L;;;;;N;;;;;\n// parseCharacter keeps a state variable indicating the weirdness.\ntype State int"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 12,
   "Snippet": "\tSYS_FORK           = 2   // { int sys_fork(void); }\n\tSYS_READ           = 3   // { ssize_t sys_read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE          = 4   // { ssize_t sys_write(int fd, const void *buf, \\\n\tSYS_OPEN           = 5   // { int sys_open(const char *path, \\\n\tSYS_CLOSE          = 6   // { int sys_close(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 31,
   "Snippet": "\tSYS_UNMOUNT        = 22  // { int sys_unmount(const char *path, int flags); }\n\tSYS_SETUID         = 23  // { int sys_setuid(uid_t uid); }\n\tSYS_GETUID         = 24  // { uid_t sys_getuid(void); }\n\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }\n\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 125,
   "Snippet": "\tSYS_SHUTDOWN       = 134 // { int sys_shutdown(int s, int how); }\n\tSYS_SOCKETPAIR     = 135 // { int sys_socketpair(int domain, int type, \\\n\tSYS_MKDIR          = 136 // { int sys_mkdir(const char *path, mode_t mode); }\n\tSYS_RMDIR          = 137 // { int sys_rmdir(const char *path); }\n\tSYS_ADJTIME        = 140 // { int sys_adjtime(const struct timeval *delta, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 98,
   "Snippet": "\tSYS_NANOSLEEP      = 91  // { int sys_nanosleep(const struct timespec *rqtp, \\\n\tSYS_FCNTL          = 92  // { int sys_fcntl(int fd, int cmd, ... void *arg); }\n\tSYS___THRSLEEP     = 94  // { int sys___thrsleep(const volatile void *ident, \\\n\tSYS_FSYNC          = 95  // { int sys_fsync(int fd); }\n\tSYS_SETPRIORITY    = 96  // { int sys_setpriority(int which, id_t who, int prio); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 55,
   "Snippet": "\tSYS_SIGACTION      = 46  // { int sys_sigaction(int signum, \\\n\tSYS_GETGID         = 47  // { gid_t sys_getgid(void); }\n\tSYS_SIGPROCMASK    = 48  // { int sys_sigprocmask(int how, sigset_t mask); }\n\tSYS_GETLOGIN       = 49  // { int sys_getlogin(char *namebuf, u_int namelen); }\n\tSYS_SETLOGIN       = 50  // { int sys_setlogin(const char *namebuf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 67,
   "Snippet": "\tSYS_READLINK       = 58  // { int sys_readlink(const char *path, char *buf, \\\n\tSYS_EXECVE         = 59  // { int sys_execve(const char *path, \\\n\tSYS_UMASK          = 60  // { mode_t sys_umask(mode_t newmask); }\n\tSYS_CHROOT         = 61  // { int sys_chroot(const char *path); }\n\tSYS_GETFSSTAT      = 62  // { int sys_getfsstat(struct statfs *buf, size_t bufsize, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 136,
   "Snippet": "\tSYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void *buf, \\\n\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }\n\tSYS_SETEGID        = 182 // { int sys_setegid(gid_t egid); }\n\tSYS_SETEUID        = 183 // { int sys_seteuid(uid_t euid); }\n\tSYS_PATHCONF       = 191 // { long sys_pathconf(const char *path, int name); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 152,
   "Snippet": "\tSYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid); }\n\tSYS_UTRACE         = 209 // { int sys_utrace(const char *label, const void *addr, \\\n\tSYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg); }\n\tSYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg); }\n\tSYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 21,
   "Snippet": "\tSYS_CHDIR          = 12  // { int sys_chdir(const char *path); }\n\tSYS_FCHDIR         = 13  // { int sys_fchdir(int fd); }\n\tSYS_MKNOD          = 14  // { int sys_mknod(const char *path, mode_t mode, \\\n\tSYS_CHMOD          = 15  // { int sys_chmod(const char *path, mode_t mode); }\n\tSYS_CHOWN          = 16  // { int sys_chown(const char *path, uid_t uid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 163,
   "Snippet": "\tSYS_LCHOWN         = 254 // { int sys_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID         = 255 // { pid_t sys_getsid(pid_t pid); }\n\tSYS_MSYNC          = 256 // { int sys_msync(void *addr, size_t len, int flags); }\n\tSYS_PIPE           = 263 // { int sys_pipe(int *fdp); }\n\tSYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t *fhp, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 56,
   "Snippet": "\tSYS_GETGID         = 47  // { gid_t sys_getgid(void); }\n\tSYS_SIGPROCMASK    = 48  // { int sys_sigprocmask(int how, sigset_t mask); }\n\tSYS_GETLOGIN       = 49  // { int sys_getlogin(char *namebuf, u_int namelen); }\n\tSYS_SETLOGIN       = 50  // { int sys_setlogin(const char *namebuf); }\n\tSYS_ACCT           = 51  // { int sys_acct(const char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 69,
   "Snippet": "\tSYS_UMASK          = 60  // { mode_t sys_umask(mode_t newmask); }\n\tSYS_CHROOT         = 61  // { int sys_chroot(const char *path); }\n\tSYS_GETFSSTAT      = 62  // { int sys_getfsstat(struct statfs *buf, size_t bufsize, \\\n\tSYS_STATFS         = 63  // { int sys_statfs(const char *path, \\\n\tSYS_FSTATFS        = 64  // { int sys_fstatfs(int fd, struct statfs *buf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 23,
   "Snippet": "\tSYS_MKNOD          = 14  // { int sys_mknod(const char *path, mode_t mode, \\\n\tSYS_CHMOD          = 15  // { int sys_chmod(const char *path, mode_t mode); }\n\tSYS_CHOWN          = 16  // { int sys_chown(const char *path, uid_t uid, \\\n\tSYS_OBREAK         = 17  // { int sys_obreak(char *nsize); } break\n\tSYS_GETDTABLECOUNT = 18  // { int sys_getdtablecount(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 190,
   "Snippet": "\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\\n\tSYS___GETCWD       = 304 // { int sys___getcwd(char *buf, size_t len); }\n\tSYS_ADJFREQ        = 305 // { int sys_adjfreq(const int64_t *freq, \\\n\tSYS_SETRTABLE      = 310 // { int sys_setrtable(int rtableid); }\n\tSYS_GETRTABLE      = 311 // { int sys_getrtable(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 188,
   "Snippet": "\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\\n\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }\n\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\\n\tSYS___GETCWD       = 304 // { int sys___getcwd(char *buf, size_t len); }\n\tSYS_ADJFREQ        = 305 // { int sys_adjfreq(const int64_t *freq, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 36,
   "Snippet": "\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\\n\tSYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, \\\n\tSYS_RECVFROM       = 29  // { ssize_t sys_recvfrom(int s, void *buf, size_t len, \\\n\tSYS_ACCEPT         = 30  // { int sys_accept(int s, struct sockaddr *name, \\\n\tSYS_GETPEERNAME    = 31  // { int sys_getpeername(int fdes, struct sockaddr *asa, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 187,
   "Snippet": "\tSYS_GETTHRID       = 299 // { pid_t sys_getthrid(void); }\n\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\\n\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }\n\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\\n\tSYS___GETCWD       = 304 // { int sys___getcwd(char *buf, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 30,
   "Snippet": "\tSYS_MOUNT          = 21  // { int sys_mount(const char *type, const char *path, \\\n\tSYS_UNMOUNT        = 22  // { int sys_unmount(const char *path, int flags); }\n\tSYS_SETUID         = 23  // { int sys_setuid(uid_t uid); }\n\tSYS_GETUID         = 24  // { uid_t sys_getuid(void); }\n\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 117,
   "Snippet": "\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID       = 127 // { int sys_setregid(gid_t rgid, gid_t egid); }\n\tSYS_RENAME         = 128 // { int sys_rename(const char *from, const char *to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 115,
   "Snippet": "\tSYS_READV          = 120 // { ssize_t sys_readv(int fd, \\\n\tSYS_WRITEV         = 121 // { ssize_t sys_writev(int fd, \\\n\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 181,
   "Snippet": "\tSYS_SEMOP          = 290 // { int sys_semop(int semid, struct sembuf *sops, \\\n\tSYS_FHSTAT         = 294 // { int sys_fhstat(const fhandle_t *fhp, \\\n\tSYS___SEMCTL       = 295 // { int sys___semctl(int semid, int semnum, int cmd, \\\n\tSYS_SHMCTL         = 296 // { int sys_shmctl(int shmid, int cmd, \\\n\tSYS_MSGCTL         = 297 // { int sys_msgctl(int msqid, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 154,
   "Snippet": "\tSYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg); }\n\tSYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg); }\n\tSYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, \\\n\tSYS_MSGRCV         = 227 // { int sys_msgrcv(int msqid, void *msgp, size_t msgsz, \\\n\tSYS_SHMAT          = 228 // { void *sys_shmat(int shmid, const void *shmaddr, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 118,
   "Snippet": "\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID       = 127 // { int sys_setregid(gid_t rgid, gid_t egid); }\n\tSYS_RENAME         = 128 // { int sys_rename(const char *from, const char *to); }\n\tSYS_FLOCK          = 131 // { int sys_flock(int fd, int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 50,
   "Snippet": "\tSYS_DUP            = 41  // { int sys_dup(int fd); }\n\tSYS_FSTATAT        = 42  // { int sys_fstatat(int fd, const char *path, \\\n\tSYS_GETEGID        = 43  // { gid_t sys_getegid(void); }\n\tSYS_PROFIL         = 44  // { int sys_profil(caddr_t samples, size_t size, \\\n\tSYS_KTRACE         = 45  // { int sys_ktrace(const char *fname, int ops, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 150,
   "Snippet": "\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK        = 204 // { int sys_munlock(const void *addr, size_t len); }\n\tSYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid); }\n\tSYS_UTRACE         = 209 // { int sys_utrace(const char *label, const void *addr, \\\n\tSYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 173,
   "Snippet": "\tSYS_GETRESUID      = 281 // { int sys_getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_MQUERY         = 286 // { void *sys_mquery(void *addr, size_t len, int prot, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 116,
   "Snippet": "\tSYS_WRITEV         = 121 // { ssize_t sys_writev(int fd, \\\n\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID       = 127 // { int sys_setregid(gid_t rgid, gid_t egid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 72,
   "Snippet": "\tSYS_STATFS         = 63  // { int sys_statfs(const char *path, \\\n\tSYS_FSTATFS        = 64  // { int sys_fstatfs(int fd, struct statfs *buf); }\n\tSYS_FHSTATFS       = 65  // { int sys_fhstatfs(const fhandle_t *fhp, \\\n\tSYS_VFORK          = 66  // { int sys_vfork(void); }\n\tSYS_GETTIMEOFDAY   = 67  // { int sys_gettimeofday(struct timeval *tp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 82,
   "Snippet": "\tSYS_MUNMAP         = 73  // { int sys_munmap(void *addr, size_t len); }\n\tSYS_MPROTECT       = 74  // { int sys_mprotect(void *addr, size_t len, \\\n\tSYS_MADVISE        = 75  // { int sys_madvise(void *addr, size_t len, \\\n\tSYS_UTIMES         = 76  // { int sys_utimes(const char *path, \\\n\tSYS_FUTIMES        = 77  // { int sys_futimes(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 158,
   "Snippet": "\tSYS_SHMAT          = 228 // { void *sys_shmat(int shmid, const void *shmaddr, \\\n\tSYS_SHMDT          = 230 // { int sys_shmdt(const void *shmaddr); }\n\tSYS_MINHERIT       = 250 // { int sys_minherit(void *addr, size_t len, \\\n\tSYS_POLL           = 252 // { int sys_poll(struct pollfd *fds, \\\n\tSYS_ISSETUGID      = 253 // { int sys_issetugid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 147,
   "Snippet": "\tSYS_TRUNCATE       = 200 // { int sys_truncate(const char *path, int pad, \\\n\tSYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length); }\n\tSYS___SYSCTL       = 202 // { int sys___sysctl(const int *name, u_int namelen, \\\n\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK        = 204 // { int sys_munlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 93,
   "Snippet": "\tSYS_FUTIMENS       = 85  // { int sys_futimens(int fd, \\\n\tSYS_CLOCK_GETTIME  = 87  // { int sys_clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME  = 88  // { int sys_clock_settime(clockid_t clock_id, \\\n\tSYS_CLOCK_GETRES   = 89  // { int sys_clock_getres(clockid_t clock_id, \\\n\tSYS_DUP2           = 90  // { int sys_dup2(int from, int to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 178,
   "Snippet": "\tSYS_CLOSEFROM      = 287 // { int sys_closefrom(int fd); }\n\tSYS_SIGALTSTACK    = 288 // { int sys_sigaltstack(const struct sigaltstack *nss, \\\n\tSYS_SHMGET         = 289 // { int sys_shmget(key_t key, size_t size, int shmflg); }\n\tSYS_SEMOP          = 290 // { int sys_semop(int semid, struct sembuf *sops, \\\n\tSYS_FHSTAT         = 294 // { int sys_fhstat(const fhandle_t *fhp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 144,
   "Snippet": "\tSYS_SETRLIMIT      = 195 // { int sys_setrlimit(int which, \\\n\tSYS_MMAP           = 197 // { void *sys_mmap(void *addr, size_t len, int prot, \\\n\tSYS_LSEEK          = 199 // { off_t sys_lseek(int fd, int pad, off_t offset, \\\n\tSYS_TRUNCATE       = 200 // { int sys_truncate(const char *path, int pad, \\\n\tSYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 33,
   "Snippet": "\tSYS_GETUID         = 24  // { uid_t sys_getuid(void); }\n\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }\n\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\\n\tSYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 133,
   "Snippet": "\tSYS_GETFH          = 161 // { int sys_getfh(const char *fname, fhandle_t *fhp); }\n\tSYS_SYSARCH        = 165 // { int sys_sysarch(int op, void *parms); }\n\tSYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void *buf, \\\n\tSYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void *buf, \\\n\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 201,
   "Snippet": "\tSYS_MKNODAT        = 320 // { int sys_mknodat(int fd, const char *path, \\\n\tSYS_OPENAT         = 321 // { int sys_openat(int fd, const char *path, int flags, \\\n\tSYS_READLINKAT     = 322 // { ssize_t sys_readlinkat(int fd, const char *path, \\\n\tSYS_RENAMEAT       = 323 // { int sys_renameat(int fromfd, const char *from, \\\n\tSYS_SYMLINKAT      = 324 // { int sys_symlinkat(const char *path, int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 78,
   "Snippet": "\tSYS_SETITIMER      = 69  // { int sys_setitimer(int which, \\\n\tSYS_GETITIMER      = 70  // { int sys_getitimer(int which, \\\n\tSYS_SELECT         = 71  // { int sys_select(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_KEVENT         = 72  // { int sys_kevent(int fd, \\\n\tSYS_MUNMAP         = 73  // { int sys_munmap(void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 161,
   "Snippet": "\tSYS_POLL           = 252 // { int sys_poll(struct pollfd *fds, \\\n\tSYS_ISSETUGID      = 253 // { int sys_issetugid(void); }\n\tSYS_LCHOWN         = 254 // { int sys_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID         = 255 // { pid_t sys_getsid(pid_t pid); }\n\tSYS_MSYNC          = 256 // { int sys_msync(void *addr, size_t len, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 162,
   "Snippet": "\tSYS_ISSETUGID      = 253 // { int sys_issetugid(void); }\n\tSYS_LCHOWN         = 254 // { int sys_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID         = 255 // { pid_t sys_getsid(pid_t pid); }\n\tSYS_MSYNC          = 256 // { int sys_msync(void *addr, size_t len, int flags); }\n\tSYS_PIPE           = 263 // { int sys_pipe(int *fdp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 27,
   "Snippet": "\tSYS_GETDTABLECOUNT = 18  // { int sys_getdtablecount(void); }\n\tSYS_GETRUSAGE      = 19  // { int sys_getrusage(int who, \\\n\tSYS_GETPID         = 20  // { pid_t sys_getpid(void); }\n\tSYS_MOUNT          = 21  // { int sys_mount(const char *type, const char *path, \\\n\tSYS_UNMOUNT        = 22  // { int sys_unmount(const char *path, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 34,
   "Snippet": "\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }\n\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\\n\tSYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, \\\n\tSYS_RECVFROM       = 29  // { ssize_t sys_recvfrom(int s, void *buf, size_t len, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 189,
   "Snippet": "\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }\n\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\\n\tSYS___GETCWD       = 304 // { int sys___getcwd(char *buf, size_t len); }\n\tSYS_ADJFREQ        = 305 // { int sys_adjfreq(const int64_t *freq, \\\n\tSYS_SETRTABLE      = 310 // { int sys_setrtable(int rtableid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 114,
   "Snippet": "\tSYS_GETSOCKOPT     = 118 // { int sys_getsockopt(int s, int level, int name, \\\n\tSYS_READV          = 120 // { ssize_t sys_readv(int fd, \\\n\tSYS_WRITEV         = 121 // { ssize_t sys_writev(int fd, \\\n\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 113,
   "Snippet": "\tSYS_SIGSUSPEND     = 111 // { int sys_sigsuspend(int mask); }\n\tSYS_GETSOCKOPT     = 118 // { int sys_getsockopt(int s, int level, int name, \\\n\tSYS_READV          = 120 // { ssize_t sys_readv(int fd, \\\n\tSYS_WRITEV         = 121 // { ssize_t sys_writev(int fd, \\\n\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 22,
   "Snippet": "\tSYS_FCHDIR         = 13  // { int sys_fchdir(int fd); }\n\tSYS_MKNOD          = 14  // { int sys_mknod(const char *path, mode_t mode, \\\n\tSYS_CHMOD          = 15  // { int sys_chmod(const char *path, mode_t mode); }\n\tSYS_CHOWN          = 16  // { int sys_chown(const char *path, uid_t uid, \\\n\tSYS_OBREAK         = 17  // { int sys_obreak(char *nsize); } break"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 134,
   "Snippet": "\tSYS_SYSARCH        = 165 // { int sys_sysarch(int op, void *parms); }\n\tSYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void *buf, \\\n\tSYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void *buf, \\\n\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }\n\tSYS_SETEGID        = 182 // { int sys_setegid(gid_t egid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 85,
   "Snippet": "\tSYS_UTIMES         = 76  // { int sys_utimes(const char *path, \\\n\tSYS_FUTIMES        = 77  // { int sys_futimes(int fd, \\\n\tSYS_MINCORE        = 78  // { int sys_mincore(void *addr, size_t len, \\\n\tSYS_GETGROUPS      = 79  // { int sys_getgroups(int gidsetsize, \\\n\tSYS_SETGROUPS      = 80  // { int sys_setgroups(int gidsetsize, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 185,
   "Snippet": "\tSYS_MSGCTL         = 297 // { int sys_msgctl(int msqid, int cmd, \\\n\tSYS_SCHED_YIELD    = 298 // { int sys_sched_yield(void); }\n\tSYS_GETTHRID       = 299 // { pid_t sys_getthrid(void); }\n\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\\n\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 104,
   "Snippet": "\tSYS_CONNECT        = 98  // { int sys_connect(int s, const struct sockaddr *name, \\\n\tSYS_GETDENTS       = 99  // { int sys_getdents(int fd, void *buf, size_t buflen); }\n\tSYS_GETPRIORITY    = 100 // { int sys_getpriority(int which, id_t who); }\n\tSYS_SIGRETURN      = 103 // { int sys_sigreturn(struct sigcontext *sigcntxp); }\n\tSYS_BIND           = 104 // { int sys_bind(int s, const struct sockaddr *name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 92,
   "Snippet": "\tSYS_UTIMENSAT      = 84  // { int sys_utimensat(int fd, const char *path, \\\n\tSYS_FUTIMENS       = 85  // { int sys_futimens(int fd, \\\n\tSYS_CLOCK_GETTIME  = 87  // { int sys_clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME  = 88  // { int sys_clock_settime(clockid_t clock_id, \\\n\tSYS_CLOCK_GETRES   = 89  // { int sys_clock_getres(clockid_t clock_id, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 186,
   "Snippet": "\tSYS_SCHED_YIELD    = 298 // { int sys_sched_yield(void); }\n\tSYS_GETTHRID       = 299 // { pid_t sys_getthrid(void); }\n\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\\n\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }\n\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 146,
   "Snippet": "\tSYS_LSEEK          = 199 // { off_t sys_lseek(int fd, int pad, off_t offset, \\\n\tSYS_TRUNCATE       = 200 // { int sys_truncate(const char *path, int pad, \\\n\tSYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length); }\n\tSYS___SYSCTL       = 202 // { int sys___sysctl(const int *name, u_int namelen, \\\n\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 103,
   "Snippet": "\tSYS_SOCKET         = 97  // { int sys_socket(int domain, int type, int protocol); }\n\tSYS_CONNECT        = 98  // { int sys_connect(int s, const struct sockaddr *name, \\\n\tSYS_GETDENTS       = 99  // { int sys_getdents(int fd, void *buf, size_t buflen); }\n\tSYS_GETPRIORITY    = 100 // { int sys_getpriority(int which, id_t who); }\n\tSYS_SIGRETURN      = 103 // { int sys_sigreturn(struct sigcontext *sigcntxp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 135,
   "Snippet": "\tSYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void *buf, \\\n\tSYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void *buf, \\\n\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }\n\tSYS_SETEGID        = 182 // { int sys_setegid(gid_t egid); }\n\tSYS_SETEUID        = 183 // { int sys_seteuid(uid_t euid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 11,
   "Snippet": "\tSYS_EXIT           = 1   // { void sys_exit(int rval); }\n\tSYS_FORK           = 2   // { int sys_fork(void); }\n\tSYS_READ           = 3   // { ssize_t sys_read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE          = 4   // { ssize_t sys_write(int fd, const void *buf, \\\n\tSYS_OPEN           = 5   // { int sys_open(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 46,
   "Snippet": "\tSYS_KILL           = 37  // { int sys_kill(int pid, int signum); }\n\tSYS_STAT           = 38  // { int sys_stat(const char *path, struct stat *ub); }\n\tSYS_GETPPID        = 39  // { pid_t sys_getppid(void); }\n\tSYS_LSTAT          = 40  // { int sys_lstat(const char *path, struct stat *ub); }\n\tSYS_DUP            = 41  // { int sys_dup(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 41,
   "Snippet": "\tSYS_GETSOCKNAME    = 32  // { int sys_getsockname(int fdes, struct sockaddr *asa, \\\n\tSYS_ACCESS         = 33  // { int sys_access(const char *path, int flags); }\n\tSYS_CHFLAGS        = 34  // { int sys_chflags(const char *path, u_int flags); }\n\tSYS_FCHFLAGS       = 35  // { int sys_fchflags(int fd, u_int flags); }\n\tSYS_SYNC           = 36  // { void sys_sync(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 81,
   "Snippet": "\tSYS_KEVENT         = 72  // { int sys_kevent(int fd, \\\n\tSYS_MUNMAP         = 73  // { int sys_munmap(void *addr, size_t len); }\n\tSYS_MPROTECT       = 74  // { int sys_mprotect(void *addr, size_t len, \\\n\tSYS_MADVISE        = 75  // { int sys_madvise(void *addr, size_t len, \\\n\tSYS_UTIMES         = 76  // { int sys_utimes(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 153,
   "Snippet": "\tSYS_UTRACE         = 209 // { int sys_utrace(const char *label, const void *addr, \\\n\tSYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg); }\n\tSYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg); }\n\tSYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, \\\n\tSYS_MSGRCV         = 227 // { int sys_msgrcv(int msqid, void *msgp, size_t msgsz, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 54,
   "Snippet": "\tSYS_KTRACE         = 45  // { int sys_ktrace(const char *fname, int ops, \\\n\tSYS_SIGACTION      = 46  // { int sys_sigaction(int signum, \\\n\tSYS_GETGID         = 47  // { gid_t sys_getgid(void); }\n\tSYS_SIGPROCMASK    = 48  // { int sys_sigprocmask(int how, sigset_t mask); }\n\tSYS_GETLOGIN       = 49  // { int sys_getlogin(char *namebuf, u_int namelen); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 131,
   "Snippet": "\tSYS_QUOTACTL       = 148 // { int sys_quotactl(const char *path, int cmd, \\\n\tSYS_NFSSVC         = 155 // { int sys_nfssvc(int flag, void *argp); }\n\tSYS_GETFH          = 161 // { int sys_getfh(const char *fname, fhandle_t *fhp); }\n\tSYS_SYSARCH        = 165 // { int sys_sysarch(int op, void *parms); }\n\tSYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void *buf, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 42,
   "Snippet": "\tSYS_ACCESS         = 33  // { int sys_access(const char *path, int flags); }\n\tSYS_CHFLAGS        = 34  // { int sys_chflags(const char *path, u_int flags); }\n\tSYS_FCHFLAGS       = 35  // { int sys_fchflags(int fd, u_int flags); }\n\tSYS_SYNC           = 36  // { void sys_sync(void); }\n\tSYS_KILL           = 37  // { int sys_kill(int pid, int signum); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 35,
   "Snippet": "\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\\n\tSYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, \\\n\tSYS_RECVFROM       = 29  // { ssize_t sys_recvfrom(int s, void *buf, size_t len, \\\n\tSYS_ACCEPT         = 30  // { int sys_accept(int s, struct sockaddr *name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 32,
   "Snippet": "\tSYS_SETUID         = 23  // { int sys_setuid(uid_t uid); }\n\tSYS_GETUID         = 24  // { uid_t sys_getuid(void); }\n\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }\n\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 175,
   "Snippet": "\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_MQUERY         = 286 // { void *sys_mquery(void *addr, size_t len, int prot, \\\n\tSYS_CLOSEFROM      = 287 // { int sys_closefrom(int fd); }\n\tSYS_SIGALTSTACK    = 288 // { int sys_sigaltstack(const struct sigaltstack *nss, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 184,
   "Snippet": "\tSYS_SHMCTL         = 296 // { int sys_shmctl(int shmid, int cmd, \\\n\tSYS_MSGCTL         = 297 // { int sys_msgctl(int msqid, int cmd, \\\n\tSYS_SCHED_YIELD    = 298 // { int sys_sched_yield(void); }\n\tSYS_GETTHRID       = 299 // { pid_t sys_getthrid(void); }\n\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 137,
   "Snippet": "\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }\n\tSYS_SETEGID        = 182 // { int sys_setegid(gid_t egid); }\n\tSYS_SETEUID        = 183 // { int sys_seteuid(uid_t euid); }\n\tSYS_PATHCONF       = 191 // { long sys_pathconf(const char *path, int name); }\n\tSYS_FPATHCONF      = 192 // { long sys_fpathconf(int fd, int name); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 51,
   "Snippet": "\tSYS_FSTATAT        = 42  // { int sys_fstatat(int fd, const char *path, \\\n\tSYS_GETEGID        = 43  // { gid_t sys_getegid(void); }\n\tSYS_PROFIL         = 44  // { int sys_profil(caddr_t samples, size_t size, \\\n\tSYS_KTRACE         = 45  // { int sys_ktrace(const char *fname, int ops, \\\n\tSYS_SIGACTION      = 46  // { int sys_sigaction(int signum, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 110,
   "Snippet": "\tSYS_LISTEN         = 106 // { int sys_listen(int s, int backlog); }\n\tSYS_PPOLL          = 109 // { int sys_ppoll(struct pollfd *fds, \\\n\tSYS_PSELECT        = 110 // { int sys_pselect(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_SIGSUSPEND     = 111 // { int sys_sigsuspend(int mask); }\n\tSYS_GETSOCKOPT     = 118 // { int sys_getsockopt(int s, int level, int name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 100,
   "Snippet": "\tSYS___THRSLEEP     = 94  // { int sys___thrsleep(const volatile void *ident, \\\n\tSYS_FSYNC          = 95  // { int sys_fsync(int fd); }\n\tSYS_SETPRIORITY    = 96  // { int sys_setpriority(int which, id_t who, int prio); }\n\tSYS_SOCKET         = 97  // { int sys_socket(int domain, int type, int protocol); }\n\tSYS_CONNECT        = 98  // { int sys_connect(int s, const struct sockaddr *name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 180,
   "Snippet": "\tSYS_SHMGET         = 289 // { int sys_shmget(key_t key, size_t size, int shmflg); }\n\tSYS_SEMOP          = 290 // { int sys_semop(int semid, struct sembuf *sops, \\\n\tSYS_FHSTAT         = 294 // { int sys_fhstat(const fhandle_t *fhp, \\\n\tSYS___SEMCTL       = 295 // { int sys___semctl(int semid, int semnum, int cmd, \\\n\tSYS_SHMCTL         = 296 // { int sys_shmctl(int shmid, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 174,
   "Snippet": "\tSYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_MQUERY         = 286 // { void *sys_mquery(void *addr, size_t len, int prot, \\\n\tSYS_CLOSEFROM      = 287 // { int sys_closefrom(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 149,
   "Snippet": "\tSYS___SYSCTL       = 202 // { int sys___sysctl(const int *name, u_int namelen, \\\n\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK        = 204 // { int sys_munlock(const void *addr, size_t len); }\n\tSYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid); }\n\tSYS_UTRACE         = 209 // { int sys_utrace(const char *label, const void *addr, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 15,
   "Snippet": "\tSYS_OPEN           = 5   // { int sys_open(const char *path, \\\n\tSYS_CLOSE          = 6   // { int sys_close(int fd); }\n\tSYS___TFORK        = 8   // { int sys___tfork(const struct __tfork *param, \\\n\tSYS_LINK           = 9   // { int sys_link(const char *path, const char *link); }\n\tSYS_UNLINK         = 10  // { int sys_unlink(const char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 206,
   "Snippet": "\tSYS_UNLINKAT       = 325 // { int sys_unlinkat(int fd, const char *path, \\\n\tSYS___SET_TCB      = 329 // { void sys___set_tcb(void *tcb); }\n\tSYS___GET_TCB      = 330 // { void *sys___get_tcb(void); }\n)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 122,
   "Snippet": "\tSYS_FLOCK          = 131 // { int sys_flock(int fd, int how); }\n\tSYS_MKFIFO         = 132 // { int sys_mkfifo(const char *path, mode_t mode); }\n\tSYS_SENDTO         = 133 // { ssize_t sys_sendto(int s, const void *buf, \\\n\tSYS_SHUTDOWN       = 134 // { int sys_shutdown(int s, int how); }\n\tSYS_SOCKETPAIR     = 135 // { int sys_socketpair(int domain, int type, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 155,
   "Snippet": "\tSYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg); }\n\tSYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, \\\n\tSYS_MSGRCV         = 227 // { int sys_msgrcv(int msqid, void *msgp, size_t msgsz, \\\n\tSYS_SHMAT          = 228 // { void *sys_shmat(int shmid, const void *shmaddr, \\\n\tSYS_SHMDT          = 230 // { int sys_shmdt(const void *shmaddr); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 205,
   "Snippet": "\tSYS_SYMLINKAT      = 324 // { int sys_symlinkat(const char *path, int fd, \\\n\tSYS_UNLINKAT       = 325 // { int sys_unlinkat(int fd, const char *path, \\\n\tSYS___SET_TCB      = 329 // { void sys___set_tcb(void *tcb); }\n\tSYS___GET_TCB      = 330 // { void *sys___get_tcb(void); }\n)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 89,
   "Snippet": "\tSYS_SETGROUPS      = 80  // { int sys_setgroups(int gidsetsize, \\\n\tSYS_GETPGRP        = 81  // { int sys_getpgrp(void); }\n\tSYS_SETPGID        = 82  // { int sys_setpgid(pid_t pid, int pgid); }\n\tSYS_UTIMENSAT      = 84  // { int sys_utimensat(int fd, const char *path, \\\n\tSYS_FUTIMENS       = 85  // { int sys_futimens(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 167,
   "Snippet": "\tSYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t *fhp, int flags); }\n\tSYS_PREADV         = 267 // { ssize_t sys_preadv(int fd, \\\n\tSYS_PWRITEV        = 268 // { ssize_t sys_pwritev(int fd, \\\n\tSYS_KQUEUE         = 269 // { int sys_kqueue(void); }\n\tSYS_MLOCKALL       = 271 // { int sys_mlockall(int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 18,
   "Snippet": "\tSYS_LINK           = 9   // { int sys_link(const char *path, const char *link); }\n\tSYS_UNLINK         = 10  // { int sys_unlink(const char *path); }\n\tSYS_WAIT4          = 11  // { pid_t sys_wait4(pid_t pid, int *status, \\\n\tSYS_CHDIR          = 12  // { int sys_chdir(const char *path); }\n\tSYS_FCHDIR         = 13  // { int sys_fchdir(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 121,
   "Snippet": "\tSYS_RENAME         = 128 // { int sys_rename(const char *from, const char *to); }\n\tSYS_FLOCK          = 131 // { int sys_flock(int fd, int how); }\n\tSYS_MKFIFO         = 132 // { int sys_mkfifo(const char *path, mode_t mode); }\n\tSYS_SENDTO         = 133 // { ssize_t sys_sendto(int s, const void *buf, \\\n\tSYS_SHUTDOWN       = 134 // { int sys_shutdown(int s, int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 165,
   "Snippet": "\tSYS_MSYNC          = 256 // { int sys_msync(void *addr, size_t len, int flags); }\n\tSYS_PIPE           = 263 // { int sys_pipe(int *fdp); }\n\tSYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t *fhp, int flags); }\n\tSYS_PREADV         = 267 // { ssize_t sys_preadv(int fd, \\\n\tSYS_PWRITEV        = 268 // { ssize_t sys_pwritev(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 94,
   "Snippet": "\tSYS_CLOCK_GETTIME  = 87  // { int sys_clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME  = 88  // { int sys_clock_settime(clockid_t clock_id, \\\n\tSYS_CLOCK_GETRES   = 89  // { int sys_clock_getres(clockid_t clock_id, \\\n\tSYS_DUP2           = 90  // { int sys_dup2(int from, int to); }\n\tSYS_NANOSLEEP      = 91  // { int sys_nanosleep(const struct timespec *rqtp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 166,
   "Snippet": "\tSYS_PIPE           = 263 // { int sys_pipe(int *fdp); }\n\tSYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t *fhp, int flags); }\n\tSYS_PREADV         = 267 // { ssize_t sys_preadv(int fd, \\\n\tSYS_PWRITEV        = 268 // { ssize_t sys_pwritev(int fd, \\\n\tSYS_KQUEUE         = 269 // { int sys_kqueue(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 143,
   "Snippet": "\tSYS_GETRLIMIT      = 194 // { int sys_getrlimit(int which, \\\n\tSYS_SETRLIMIT      = 195 // { int sys_setrlimit(int which, \\\n\tSYS_MMAP           = 197 // { void *sys_mmap(void *addr, size_t len, int prot, \\\n\tSYS_LSEEK          = 199 // { off_t sys_lseek(int fd, int pad, off_t offset, \\\n\tSYS_TRUNCATE       = 200 // { int sys_truncate(const char *path, int pad, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 171,
   "Snippet": "\tSYS_MLOCKALL       = 271 // { int sys_mlockall(int flags); }\n\tSYS_MUNLOCKALL     = 272 // { int sys_munlockall(void); }\n\tSYS_GETRESUID      = 281 // { int sys_getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 80,
   "Snippet": "\tSYS_SELECT         = 71  // { int sys_select(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_KEVENT         = 72  // { int sys_kevent(int fd, \\\n\tSYS_MUNMAP         = 73  // { int sys_munmap(void *addr, size_t len); }\n\tSYS_MPROTECT       = 74  // { int sys_mprotect(void *addr, size_t len, \\\n\tSYS_MADVISE        = 75  // { int sys_madvise(void *addr, size_t len, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 148,
   "Snippet": "\tSYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length); }\n\tSYS___SYSCTL       = 202 // { int sys___sysctl(const int *name, u_int namelen, \\\n\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK        = 204 // { int sys_munlock(const void *addr, size_t len); }\n\tSYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_386.go",
   "Line": 172,
   "Snippet": "\tSYS_MUNLOCKALL     = 272 // { int sys_munlockall(void); }\n\tSYS_GETRESUID      = 281 // { int sys_getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 140,
   "Snippet": "\tSYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }\n\tSYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 158,
   "Snippet": "\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }\n\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }\n\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }\n\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }\n\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 211,
   "Snippet": "\tSYS_GETDENTS             = 390 // { int|sys|30|getdents(int fd, char *buf, size_t count); }\n\tSYS_SOCKET               = 394 // { int|sys|30|socket(int domain, int type, int protocol); }\n\tSYS_GETFH                = 395 // { int|sys|30|getfh(const char *fname, void *fhp, size_t *fh_size); }\n\tSYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }\n\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 30,
   "Snippet": "\tSYS_RECVMSG              = 27  // { ssize_t|sys||recvmsg(int s, struct msghdr *msg, int flags); }\n\tSYS_SENDMSG              = 28  // { ssize_t|sys||sendmsg(int s, const struct msghdr *msg, int flags); }\n\tSYS_RECVFROM             = 29  // { ssize_t|sys||recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); }\n\tSYS_ACCEPT               = 30  // { int|sys||accept(int s, struct sockaddr *name, socklen_t *anamelen); }\n\tSYS_GETPEERNAME          = 31  // { int|sys||getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 22,
   "Snippet": "\tSYS_CHOWN                = 16  // { int|sys||chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_BREAK                = 17  // { int|sys||obreak(char *nsize); }\n\tSYS_GETPID               = 20  // { pid_t|sys||getpid_with_ppid(void); }\n\tSYS_UNMOUNT              = 22  // { int|sys||unmount(const char *path, int flags); }\n\tSYS_SETUID               = 23  // { int|sys||setuid(uid_t uid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 191,
   "Snippet": "\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 95,
   "Snippet": "\tSYS_SYSARCH              = 165 // { int|sys||sysarch(int op, void *parms); }\n\tSYS_PREAD                = 173 // { ssize_t|sys||pread(int fd, void *buf, size_t nbyte, int PAD, off_t offset); }\n\tSYS_PWRITE               = 174 // { ssize_t|sys||pwrite(int fd, const void *buf, size_t nbyte, int PAD, off_t offset); }\n\tSYS_NTP_ADJTIME          = 176 // { int|sys||ntp_adjtime(struct timex *tp); }\n\tSYS_SETGID               = 181 // { int|sys||setgid(gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 169,
   "Snippet": "\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }\n\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }\n\tSYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }\n\tSYS_PMC_GET_INFO         = 341 // { int|sys||pmc_get_info(int ctr, int op, void *args); }\n\tSYS_PMC_CONTROL          = 342 // { int|sys||pmc_control(int ctr, int op, void *args); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 124,
   "Snippet": "\tSYS_SHMDT                = 230 // { int|sys||shmdt(const void *shmaddr); }\n\tSYS_SHMGET               = 231 // { int|sys||shmget(key_t key, size_t size, int shmflg); }\n\tSYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }\n\tSYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }\n\tSYS_TIMER_GETOVERRUN     = 239 // { int|sys||timer_getoverrun(timer_t timerid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 244,
   "Snippet": "\tSYS_MSGCTL               = 444 // { int|sys|50|msgctl(int msqid, int cmd, struct msqid_ds *buf); }\n\tSYS_GETRUSAGE            = 445 // { int|sys|50|getrusage(int who, struct rusage *rusage); }\n\tSYS_TIMER_SETTIME        = 446 // { int|sys|50|timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }\n\tSYS_TIMER_GETTIME        = 447 // { int|sys|50|timer_gettime(timer_t timerid, struct itimerspec *value); }\n\tSYS_NTP_GETTIME          = 448 // { int|sys|50|ntp_gettime(struct ntptimeval *ntvp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 257,
   "Snippet": "\tSYS_RENAMEAT             = 458 // { int|sys||renameat(int fromfd, const char *from, int tofd, const char *to); }\n\tSYS_MKFIFOAT             = 459 // { int|sys||mkfifoat(int fd, const char *path, mode_t mode); }\n\tSYS_MKNODAT              = 460 // { int|sys||mknodat(int fd, const char *path, mode_t mode, uint32_t dev); }\n\tSYS_MKDIRAT              = 461 // { int|sys||mkdirat(int fd, const char *path, mode_t mode); }\n\tSYS_FACCESSAT            = 462 // { int|sys||faccessat(int fd, const char *path, int amode, int flag); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 105,
   "Snippet": "\tSYS_SETRLIMIT            = 195 // { int|sys||setrlimit(int which, const struct rlimit *rlp); }\n\tSYS_MMAP                 = 197 // { void *|sys||mmap(void *addr, size_t len, int prot, int flags, int fd, long PAD, off_t pos); }\n\tSYS_LSEEK                = 199 // { off_t|sys||lseek(int fd, int PAD, off_t offset, int whence); }\n\tSYS_TRUNCATE             = 200 // { int|sys||truncate(const char *path, int PAD, off_t length); }\n\tSYS_FTRUNCATE            = 201 // { int|sys||ftruncate(int fd, int PAD, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 125,
   "Snippet": "\tSYS_SHMGET               = 231 // { int|sys||shmget(key_t key, size_t size, int shmflg); }\n\tSYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }\n\tSYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }\n\tSYS_TIMER_GETOVERRUN     = 239 // { int|sys||timer_getoverrun(timer_t timerid); }\n\tSYS_FDATASYNC            = 241 // { int|sys||fdatasync(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 139,
   "Snippet": "\tSYS_MSYNC                = 277 // { int|sys|13|msync(void *addr, size_t len, int flags); }\n\tSYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 67,
   "Snippet": "\tSYS_SETGROUPS            = 80  // { int|sys||setgroups(int gidsetsize, const gid_t *gidset); }\n\tSYS_GETPGRP              = 81  // { int|sys||getpgrp(void); }\n\tSYS_SETPGID              = 82  // { int|sys||setpgid(pid_t pid, pid_t pgid); }\n\tSYS_DUP2                 = 90  // { int|sys||dup2(int from, int to); }\n\tSYS_FCNTL                = 92  // { int|sys||fcntl(int fd, int cmd, ... void *arg); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 145,
   "Snippet": "\tSYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }\n\tSYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS_PWRITEV              = 290 // { ssize_t|sys||pwritev(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS___GETCWD             = 296 // { int|sys||__getcwd(char *bufp, size_t length); }\n\tSYS_FCHROOT              = 297 // { int|sys||fchroot(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 138,
   "Snippet": "\tSYS_LCHOWN               = 275 // { int|sys||lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_MSYNC                = 277 // { int|sys|13|msync(void *addr, size_t len, int flags); }\n\tSYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 194,
   "Snippet": "\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_LINK    = 372 // { ssize_t|sys||extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 228,
   "Snippet": "\tSYS_SETITIMER            = 425 // { int|sys|50|setitimer(int which, const struct itimerval *itv, struct itimerval *oitv); }\n\tSYS_GETITIMER            = 426 // { int|sys|50|getitimer(int which, struct itimerval *itv); }\n\tSYS_CLOCK_GETTIME        = 427 // { int|sys|50|clock_gettime(clockid_t clock_id, struct timespec *tp); }\n\tSYS_CLOCK_SETTIME        = 428 // { int|sys|50|clock_settime(clockid_t clock_id, const struct timespec *tp); }\n\tSYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 162,
   "Snippet": "\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }\n\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }\n\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }\n\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }\n\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 193,
   "Snippet": "\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 230,
   "Snippet": "\tSYS_CLOCK_GETTIME        = 427 // { int|sys|50|clock_gettime(clockid_t clock_id, struct timespec *tp); }\n\tSYS_CLOCK_SETTIME        = 428 // { int|sys|50|clock_settime(clockid_t clock_id, const struct timespec *tp); }\n\tSYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }\n\tSYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }\n\tSYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 195,
   "Snippet": "\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_LINK    = 372 // { ssize_t|sys||extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_SETXATTR             = 375 // { int|sys||setxattr(const char *path, const char *name, const void *value, size_t size, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 253,
   "Snippet": "\tSYS_DUP3                 = 454 // { int|sys||dup3(int from, int to, int flags); }\n\tSYS_KQUEUE1              = 455 // { int|sys||kqueue1(int flags); }\n\tSYS_PACCEPT              = 456 // { int|sys||paccept(int s, struct sockaddr *name, socklen_t *anamelen, const sigset_t *mask, int flags); }\n\tSYS_LINKAT               = 457 // { int|sys||linkat(int fd1, const char *name1, int fd2, const char *name2, int flags); }\n\tSYS_RENAMEAT             = 458 // { int|sys||renameat(int fromfd, const char *from, int tofd, const char *to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 126,
   "Snippet": "\tSYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }\n\tSYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }\n\tSYS_TIMER_GETOVERRUN     = 239 // { int|sys||timer_getoverrun(timer_t timerid); }\n\tSYS_FDATASYNC            = 241 // { int|sys||fdatasync(int fd); }\n\tSYS_MLOCKALL             = 242 // { int|sys||mlockall(int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 152,
   "Snippet": "\tSYS_UTRACE               = 306 // { int|sys||utrace(const char *label, void *addr, size_t len); }\n\tSYS_GETCONTEXT           = 307 // { int|sys||getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }\n\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }\n\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 218,
   "Snippet": "\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }\n\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }\n\tSYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }\n\tSYS_SELECT               = 417 // { int|sys|50|select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }\n\tSYS_GETTIMEOFDAY         = 418 // { int|sys|50|gettimeofday(struct timeval *tp, void *tzp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 177,
   "Snippet": "\tSYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }\n\tSYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }\n\tSYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }\n\tSYS_SCHED_YIELD          = 350 // { int|sys||sched_yield(void); }\n\tSYS_FSYNC_RANGE          = 354 // { int|sys||fsync_range(int fd, int flags, off_t start, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 156,
   "Snippet": "\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }\n\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }\n\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }\n\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }\n\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 54,
   "Snippet": "\tSYS_READLINK             = 58  // { ssize_t|sys||readlink(const char *path, char *buf, size_t count); }\n\tSYS_EXECVE               = 59  // { int|sys||execve(const char *path, char * const *argp, char * const *envp); }\n\tSYS_UMASK                = 60  // { mode_t|sys||umask(mode_t newmask); }\n\tSYS_CHROOT               = 61  // { int|sys||chroot(const char *path); }\n\tSYS_VFORK                = 66  // { int|sys||vfork(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 179,
   "Snippet": "\tSYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }\n\tSYS_SCHED_YIELD          = 350 // { int|sys||sched_yield(void); }\n\tSYS_FSYNC_RANGE          = 354 // { int|sys||fsync_range(int fd, int flags, off_t start, off_t length); }\n\tSYS_UUIDGEN              = 355 // { int|sys||uuidgen(struct uuid *store, int count); }\n\tSYS_GETVFSSTAT           = 356 // { int|sys||getvfsstat(struct statvfs *buf, size_t bufsize, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 146,
   "Snippet": "\tSYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS_PWRITEV              = 290 // { ssize_t|sys||pwritev(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS___GETCWD             = 296 // { int|sys||__getcwd(char *bufp, size_t length); }\n\tSYS_FCHROOT              = 297 // { int|sys||fchroot(int fd); }\n\tSYS_LCHFLAGS             = 304 // { int|sys||lchflags(const char *path, u_long flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 186,
   "Snippet": "\tSYS_EXTATTRCTL           = 360 // { int|sys||extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FILE     = 361 // { int|sys||extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 170,
   "Snippet": "\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }\n\tSYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }\n\tSYS_PMC_GET_INFO         = 341 // { int|sys||pmc_get_info(int ctr, int op, void *args); }\n\tSYS_PMC_CONTROL          = 342 // { int|sys||pmc_control(int ctr, int op, void *args); }\n\tSYS_RASCTL               = 343 // { int|sys||rasctl(void *addr, size_t len, int op); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 188,
   "Snippet": "\tSYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 174,
   "Snippet": "\tSYS_RASCTL               = 343 // { int|sys||rasctl(void *addr, size_t len, int op); }\n\tSYS_KQUEUE               = 344 // { int|sys||kqueue(void); }\n\tSYS__SCHED_SETPARAM      = 346 // { int|sys||_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params); }\n\tSYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }\n\tSYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 160,
   "Snippet": "\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }\n\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }\n\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }\n\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }\n\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 249,
   "Snippet": "\tSYS_WAIT4                = 449 // { int|sys|50|wait4(pid_t pid, int *status, int options, struct rusage *rusage); }\n\tSYS_MKNOD                = 450 // { int|sys|50|mknod(const char *path, mode_t mode, dev_t dev); }\n\tSYS_FHSTAT               = 451 // { int|sys|50|fhstat(const void *fhp, size_t fh_size, struct stat *sb); }\n\tSYS_PIPE2                = 453 // { int|sys||pipe2(int *fildes, int flags); }\n\tSYS_DUP3                 = 454 // { int|sys||dup3(int from, int to, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 214,
   "Snippet": "\tSYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }\n\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }\n\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }\n\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }\n\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 219,
   "Snippet": "\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }\n\tSYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }\n\tSYS_SELECT               = 417 // { int|sys|50|select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }\n\tSYS_GETTIMEOFDAY         = 418 // { int|sys|50|gettimeofday(struct timeval *tp, void *tzp); }\n\tSYS_SETTIMEOFDAY         = 419 // { int|sys|50|settimeofday(const struct timeval *tv, const void *tzp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 25,
   "Snippet": "\tSYS_UNMOUNT              = 22  // { int|sys||unmount(const char *path, int flags); }\n\tSYS_SETUID               = 23  // { int|sys||setuid(uid_t uid); }\n\tSYS_GETUID               = 24  // { uid_t|sys||getuid_with_euid(void); }\n\tSYS_GETEUID              = 25  // { uid_t|sys||geteuid(void); }\n\tSYS_PTRACE               = 26  // { int|sys||ptrace(int req, pid_t pid, void *addr, int data); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 43,
   "Snippet": "\tSYS_PIPE                 = 42  // { int|sys||pipe(void); }\n\tSYS_GETEGID              = 43  // { gid_t|sys||getegid(void); }\n\tSYS_PROFIL               = 44  // { int|sys||profil(char *samples, size_t size, u_long offset, u_int scale); }\n\tSYS_KTRACE               = 45  // { int|sys||ktrace(const char *fname, int ops, int facs, pid_t pid); }\n\tSYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 108,
   "Snippet": "\tSYS_TRUNCATE             = 200 // { int|sys||truncate(const char *path, int PAD, off_t length); }\n\tSYS_FTRUNCATE            = 201 // { int|sys||ftruncate(int fd, int PAD, off_t length); }\n\tSYS___SYSCTL             = 202 // { int|sys||__sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, const void *new, size_t newlen); }\n\tSYS_MLOCK                = 203 // { int|sys||mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK              = 204 // { int|sys||munlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 104,
   "Snippet": "\tSYS_GETRLIMIT            = 194 // { int|sys||getrlimit(int which, struct rlimit *rlp); }\n\tSYS_SETRLIMIT            = 195 // { int|sys||setrlimit(int which, const struct rlimit *rlp); }\n\tSYS_MMAP                 = 197 // { void *|sys||mmap(void *addr, size_t len, int prot, int flags, int fd, long PAD, off_t pos); }\n\tSYS_LSEEK                = 199 // { off_t|sys||lseek(int fd, int PAD, off_t offset, int whence); }\n\tSYS_TRUNCATE             = 200 // { int|sys||truncate(const char *path, int PAD, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 175,
   "Snippet": "\tSYS_KQUEUE               = 344 // { int|sys||kqueue(void); }\n\tSYS__SCHED_SETPARAM      = 346 // { int|sys||_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params); }\n\tSYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }\n\tSYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }\n\tSYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 52,
   "Snippet": "\tSYS_REVOKE               = 56  // { int|sys||revoke(const char *path); }\n\tSYS_SYMLINK              = 57  // { int|sys||symlink(const char *path, const char *link); }\n\tSYS_READLINK             = 58  // { ssize_t|sys||readlink(const char *path, char *buf, size_t count); }\n\tSYS_EXECVE               = 59  // { int|sys||execve(const char *path, char * const *argp, char * const *envp); }\n\tSYS_UMASK                = 60  // { mode_t|sys||umask(mode_t newmask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 163,
   "Snippet": "\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }\n\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }\n\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }\n\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }\n\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 240,
   "Snippet": "\tSYS_FSTAT                = 440 // { int|sys|50|fstat(int fd, struct stat *sb); }\n\tSYS_LSTAT                = 441 // { int|sys|50|lstat(const char *path, struct stat *ub); }\n\tSYS___SEMCTL             = 442 // { int|sys|50|__semctl(int semid, int semnum, int cmd, ... union __semun *arg); }\n\tSYS_SHMCTL               = 443 // { int|sys|50|shmctl(int shmid, int cmd, struct shmid_ds *buf); }\n\tSYS_MSGCTL               = 444 // { int|sys|50|msgctl(int msqid, int cmd, struct msqid_ds *buf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 236,
   "Snippet": "\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }\n\tSYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_POLLTS               = 437 // { int|sys|50|pollts(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_STAT                 = 439 // { int|sys|50|stat(const char *path, struct stat *ub); }\n\tSYS_FSTAT                = 440 // { int|sys|50|fstat(int fd, struct stat *sb); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 213,
   "Snippet": "\tSYS_GETFH                = 395 // { int|sys|30|getfh(const char *fname, void *fhp, size_t *fh_size); }\n\tSYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }\n\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }\n\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }\n\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 123,
   "Snippet": "\tSYS_SHMAT                = 228 // { void *|sys||shmat(int shmid, const void *shmaddr, int shmflg); }\n\tSYS_SHMDT                = 230 // { int|sys||shmdt(const void *shmaddr); }\n\tSYS_SHMGET               = 231 // { int|sys||shmget(key_t key, size_t size, int shmflg); }\n\tSYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }\n\tSYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 47,
   "Snippet": "\tSYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }\n\tSYS___GETLOGIN           = 49  // { int|sys||__getlogin(char *namebuf, size_t namelen); }\n\tSYS___SETLOGIN           = 50  // { int|sys||__setlogin(const char *namebuf); }\n\tSYS_ACCT                 = 51  // { int|sys||acct(const char *path); }\n\tSYS_IOCTL                = 54  // { int|sys||ioctl(int fd, u_long com, ... void *data); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 141,
   "Snippet": "\tSYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }\n\tSYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }\n\tSYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 83,
   "Snippet": "\tSYS_FCHMOD               = 124 // { int|sys||fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID             = 126 // { int|sys||setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID             = 127 // { int|sys||setregid(gid_t rgid, gid_t egid); }\n\tSYS_RENAME               = 128 // { int|sys||rename(const char *from, const char *to); }\n\tSYS_FLOCK                = 131 // { int|sys||flock(int fd, int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 185,
   "Snippet": "\tSYS_FSTATVFS1            = 358 // { int|sys||fstatvfs1(int fd, struct statvfs *buf, int flags); }\n\tSYS_EXTATTRCTL           = 360 // { int|sys||extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FILE     = 361 // { int|sys||extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 94,
   "Snippet": "\tSYS_SETSID               = 147 // { int|sys||setsid(void); }\n\tSYS_SYSARCH              = 165 // { int|sys||sysarch(int op, void *parms); }\n\tSYS_PREAD                = 173 // { ssize_t|sys||pread(int fd, void *buf, size_t nbyte, int PAD, off_t offset); }\n\tSYS_PWRITE               = 174 // { ssize_t|sys||pwrite(int fd, const void *buf, size_t nbyte, int PAD, off_t offset); }\n\tSYS_NTP_ADJTIME          = 176 // { int|sys||ntp_adjtime(struct timex *tp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 157,
   "Snippet": "\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }\n\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }\n\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }\n\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }\n\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 164,
   "Snippet": "\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }\n\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }\n\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }\n\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }\n\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 153,
   "Snippet": "\tSYS_GETCONTEXT           = 307 // { int|sys||getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }\n\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }\n\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }\n\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 271,
   "Snippet": "\tSYS_FUTIMENS             = 472 // { int|sys||futimens(int fd, const struct timespec *tptr); }\n\tSYS___QUOTACTL           = 473 // { int|sys||__quotactl(const char *path, struct quotactl_args *args); }\n\tSYS_POSIX_SPAWN          = 474 // { int|sys||posix_spawn(pid_t *pid, const char *path, const struct posix_spawn_file_actions *file_actions, const struct posix_spawnattr *attrp, char *const *argv, char *const *envp); }\n\tSYS_RECVMMSG             = 475 // { int|sys||recvmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct timespec *timeout); }\n\tSYS_SENDMMSG             = 476 // { int|sys||sendmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 190,
   "Snippet": "\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 161,
   "Snippet": "\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }\n\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }\n\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }\n\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }\n\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 248,
   "Snippet": "\tSYS_NTP_GETTIME          = 448 // { int|sys|50|ntp_gettime(struct ntptimeval *ntvp); }\n\tSYS_WAIT4                = 449 // { int|sys|50|wait4(pid_t pid, int *status, int options, struct rusage *rusage); }\n\tSYS_MKNOD                = 450 // { int|sys|50|mknod(const char *path, mode_t mode, dev_t dev); }\n\tSYS_FHSTAT               = 451 // { int|sys|50|fhstat(const void *fhp, size_t fh_size, struct stat *sb); }\n\tSYS_PIPE2                = 453 // { int|sys||pipe2(int *fildes, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 142,
   "Snippet": "\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }\n\tSYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }\n\tSYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }\n\tSYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 132,
   "Snippet": "\tSYS_SIGQUEUEINFO         = 245 // { int|sys||sigqueueinfo(pid_t pid, const siginfo_t *info); }\n\tSYS_MODCTL               = 246 // { int|sys||modctl(int cmd, void *arg); }\n\tSYS___POSIX_RENAME       = 270 // { int|sys||__posix_rename(const char *from, const char *to); }\n\tSYS_SWAPCTL              = 271 // { int|sys||swapctl(int cmd, void *arg, int misc); }\n\tSYS_MINHERIT             = 273 // { int|sys||minherit(void *addr, size_t len, int inherit); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 20,
   "Snippet": "\tSYS_FCHDIR               = 13  // { int|sys||fchdir(int fd); }\n\tSYS_CHMOD                = 15  // { int|sys||chmod(const char *path, mode_t mode); }\n\tSYS_CHOWN                = 16  // { int|sys||chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_BREAK                = 17  // { int|sys||obreak(char *nsize); }\n\tSYS_GETPID               = 20  // { pid_t|sys||getpid_with_ppid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 235,
   "Snippet": "\tSYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }\n\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }\n\tSYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_POLLTS               = 437 // { int|sys|50|pollts(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_STAT                 = 439 // { int|sys|50|stat(const char *path, struct stat *ub); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 245,
   "Snippet": "\tSYS_GETRUSAGE            = 445 // { int|sys|50|getrusage(int who, struct rusage *rusage); }\n\tSYS_TIMER_SETTIME        = 446 // { int|sys|50|timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }\n\tSYS_TIMER_GETTIME        = 447 // { int|sys|50|timer_gettime(timer_t timerid, struct itimerspec *value); }\n\tSYS_NTP_GETTIME          = 448 // { int|sys|50|ntp_gettime(struct ntptimeval *ntvp); }\n\tSYS_WAIT4                = 449 // { int|sys|50|wait4(pid_t pid, int *status, int options, struct rusage *rusage); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 212,
   "Snippet": "\tSYS_SOCKET               = 394 // { int|sys|30|socket(int domain, int type, int protocol); }\n\tSYS_GETFH                = 395 // { int|sys|30|getfh(const char *fname, void *fhp, size_t *fh_size); }\n\tSYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }\n\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }\n\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 168,
   "Snippet": "\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }\n\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }\n\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }\n\tSYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }\n\tSYS_PMC_GET_INFO         = 341 // { int|sys||pmc_get_info(int ctr, int op, void *args); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 112,
   "Snippet": "\tSYS_MUNLOCK              = 204 // { int|sys||munlock(const void *addr, size_t len); }\n\tSYS_UNDELETE             = 205 // { int|sys||undelete(const char *path); }\n\tSYS_GETPGID              = 207 // { pid_t|sys||getpgid(pid_t pid); }\n\tSYS_REBOOT               = 208 // { int|sys||reboot(int opt, char *bootstr); }\n\tSYS_POLL                 = 209 // { int|sys||poll(struct pollfd *fds, u_int nfds, int timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 232,
   "Snippet": "\tSYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }\n\tSYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }\n\tSYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }\n\tSYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }\n\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 11,
   "Snippet": "\tSYS_EXIT                 = 1   // { void|sys||exit(int rval); }\n\tSYS_FORK                 = 2   // { int|sys||fork(void); }\n\tSYS_READ                 = 3   // { ssize_t|sys||read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE                = 4   // { ssize_t|sys||write(int fd, const void *buf, size_t nbyte); }\n\tSYS_OPEN                 = 5   // { int|sys||open(const char *path, int flags, ... mode_t mode); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 120,
   "Snippet": "\tSYS_MSGGET               = 225 // { int|sys||msgget(key_t key, int msgflg); }\n\tSYS_MSGSND               = 226 // { int|sys||msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }\n\tSYS_MSGRCV               = 227 // { ssize_t|sys||msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }\n\tSYS_SHMAT                = 228 // { void *|sys||shmat(int shmid, const void *shmaddr, int shmflg); }\n\tSYS_SHMDT                = 230 // { int|sys||shmdt(const void *shmaddr); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 176,
   "Snippet": "\tSYS__SCHED_SETPARAM      = 346 // { int|sys||_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params); }\n\tSYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }\n\tSYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }\n\tSYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }\n\tSYS_SCHED_YIELD          = 350 // { int|sys||sched_yield(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 166,
   "Snippet": "\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }\n\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }\n\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }\n\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }\n\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 215,
   "Snippet": "\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }\n\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }\n\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }\n\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }\n\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 130,
   "Snippet": "\tSYS_MLOCKALL             = 242 // { int|sys||mlockall(int flags); }\n\tSYS_MUNLOCKALL           = 243 // { int|sys||munlockall(void); }\n\tSYS_SIGQUEUEINFO         = 245 // { int|sys||sigqueueinfo(pid_t pid, const siginfo_t *info); }\n\tSYS_MODCTL               = 246 // { int|sys||modctl(int cmd, void *arg); }\n\tSYS___POSIX_RENAME       = 270 // { int|sys||__posix_rename(const char *from, const char *to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 12,
   "Snippet": "\tSYS_FORK                 = 2   // { int|sys||fork(void); }\n\tSYS_READ                 = 3   // { ssize_t|sys||read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE                = 4   // { ssize_t|sys||write(int fd, const void *buf, size_t nbyte); }\n\tSYS_OPEN                 = 5   // { int|sys||open(const char *path, int flags, ... mode_t mode); }\n\tSYS_CLOSE                = 6   // { int|sys||close(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 234,
   "Snippet": "\tSYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }\n\tSYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }\n\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }\n\tSYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_POLLTS               = 437 // { int|sys|50|pollts(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 154,
   "Snippet": "\tSYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }\n\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }\n\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }\n\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }\n\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 136,
   "Snippet": "\tSYS_MINHERIT             = 273 // { int|sys||minherit(void *addr, size_t len, int inherit); }\n\tSYS_LCHMOD               = 274 // { int|sys||lchmod(const char *path, mode_t mode); }\n\tSYS_LCHOWN               = 275 // { int|sys||lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_MSYNC                = 277 // { int|sys|13|msync(void *addr, size_t len, int flags); }\n\tSYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 196,
   "Snippet": "\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_LINK    = 372 // { ssize_t|sys||extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_SETXATTR             = 375 // { int|sys||setxattr(const char *path, const char *name, const void *value, size_t size, int flags); }\n\tSYS_LSETXATTR            = 376 // { int|sys||lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 82,
   "Snippet": "\tSYS_FCHOWN               = 123 // { int|sys||fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD               = 124 // { int|sys||fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID             = 126 // { int|sys||setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID             = 127 // { int|sys||setregid(gid_t rgid, gid_t egid); }\n\tSYS_RENAME               = 128 // { int|sys||rename(const char *from, const char *to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 261,
   "Snippet": "\tSYS_FACCESSAT            = 462 // { int|sys||faccessat(int fd, const char *path, int amode, int flag); }\n\tSYS_FCHMODAT             = 463 // { int|sys||fchmodat(int fd, const char *path, mode_t mode, int flag); }\n\tSYS_FCHOWNAT             = 464 // { int|sys||fchownat(int fd, const char *path, uid_t owner, gid_t group, int flag); }\n\tSYS_FEXECVE              = 465 // { int|sys||fexecve(int fd, char * const *argp, char * const *envp); }\n\tSYS_FSTATAT              = 466 // { int|sys||fstatat(int fd, const char *path, struct stat *buf, int flag); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 151,
   "Snippet": "\tSYS_ISSETUGID            = 305 // { int|sys||issetugid(void); }\n\tSYS_UTRACE               = 306 // { int|sys||utrace(const char *label, void *addr, size_t len); }\n\tSYS_GETCONTEXT           = 307 // { int|sys||getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }\n\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 270,
   "Snippet": "\tSYS_UNLINKAT             = 471 // { int|sys||unlinkat(int fd, const char *path, int flag); }\n\tSYS_FUTIMENS             = 472 // { int|sys||futimens(int fd, const struct timespec *tptr); }\n\tSYS___QUOTACTL           = 473 // { int|sys||__quotactl(const char *path, struct quotactl_args *args); }\n\tSYS_POSIX_SPAWN          = 474 // { int|sys||posix_spawn(pid_t *pid, const char *path, const struct posix_spawn_file_actions *file_actions, const struct posix_spawnattr *attrp, char *const *argv, char *const *envp); }\n\tSYS_RECVMMSG             = 475 // { int|sys||recvmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct timespec *timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 192,
   "Snippet": "\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 189,
   "Snippet": "\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 229,
   "Snippet": "\tSYS_GETITIMER            = 426 // { int|sys|50|getitimer(int which, struct itimerval *itv); }\n\tSYS_CLOCK_GETTIME        = 427 // { int|sys|50|clock_gettime(clockid_t clock_id, struct timespec *tp); }\n\tSYS_CLOCK_SETTIME        = 428 // { int|sys|50|clock_settime(clockid_t clock_id, const struct timespec *tp); }\n\tSYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }\n\tSYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 217,
   "Snippet": "\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }\n\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }\n\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }\n\tSYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }\n\tSYS_SELECT               = 417 // { int|sys|50|select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 233,
   "Snippet": "\tSYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }\n\tSYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }\n\tSYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }\n\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }\n\tSYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 187,
   "Snippet": "\tSYS_EXTATTR_SET_FILE     = 361 // { int|sys||extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 144,
   "Snippet": "\tSYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }\n\tSYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }\n\tSYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS_PWRITEV              = 290 // { ssize_t|sys||pwritev(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS___GETCWD             = 296 // { int|sys||__getcwd(char *bufp, size_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 87,
   "Snippet": "\tSYS_FLOCK                = 131 // { int|sys||flock(int fd, int how); }\n\tSYS_MKFIFO               = 132 // { int|sys||mkfifo(const char *path, mode_t mode); }\n\tSYS_SENDTO               = 133 // { ssize_t|sys||sendto(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen); }\n\tSYS_SHUTDOWN             = 134 // { int|sys||shutdown(int s, int how); }\n\tSYS_SOCKETPAIR           = 135 // { int|sys||socketpair(int domain, int type, int protocol, int *rsv); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 45,
   "Snippet": "\tSYS_PROFIL               = 44  // { int|sys||profil(char *samples, size_t size, u_long offset, u_int scale); }\n\tSYS_KTRACE               = 45  // { int|sys||ktrace(const char *fname, int ops, int facs, pid_t pid); }\n\tSYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }\n\tSYS___GETLOGIN           = 49  // { int|sys||__getlogin(char *namebuf, size_t namelen); }\n\tSYS___SETLOGIN           = 50  // { int|sys||__setlogin(const char *namebuf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 167,
   "Snippet": "\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }\n\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }\n\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }\n\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }\n\tSYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 159,
   "Snippet": "\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }\n\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }\n\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }\n\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }\n\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 155,
   "Snippet": "\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }\n\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }\n\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }\n\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }\n\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 216,
   "Snippet": "\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }\n\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }\n\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }\n\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }\n\tSYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 165,
   "Snippet": "\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }\n\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }\n\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }\n\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }\n\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 46,
   "Snippet": "\tSYS_KTRACE               = 45  // { int|sys||ktrace(const char *fname, int ops, int facs, pid_t pid); }\n\tSYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }\n\tSYS___GETLOGIN           = 49  // { int|sys||__getlogin(char *namebuf, size_t namelen); }\n\tSYS___SETLOGIN           = 50  // { int|sys||__setlogin(const char *namebuf); }\n\tSYS_ACCT                 = 51  // { int|sys||acct(const char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_amd64.go",
   "Line": 80,
   "Snippet": "\tSYS_READV                = 120 // { ssize_t|sys||readv(int fd, const struct iovec *iovp, int iovcnt); }\n\tSYS_WRITEV               = 121 // { ssize_t|sys||writev(int fd, const struct iovec *iovp, int iovcnt); }\n\tSYS_FCHOWN               = 123 // { int|sys||fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD               = 124 // { int|sys||fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID             = 126 // { int|sys||setreuid(uid_t ruid, uid_t euid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 252,
   "Snippet": "\tSYS_GETCONTEXT             = 421 // { int getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT             = 422 // { int setcontext( \\\n\tSYS_SWAPCONTEXT            = 423 // { int swapcontext(struct __ucontext *oucp, \\\n\tSYS_SWAPOFF                = 424 // { int swapoff(const char *name); }\n\tSYS___ACL_GET_LINK         = 425 // { int __acl_get_link(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 183,
   "Snippet": "\tSYS_GETSID                 = 310 // { int getsid(pid_t pid); }\n\tSYS_SETRESUID              = 311 // { int setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_SETRESGID              = 312 // { int setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_YIELD                  = 321 // { int yield(void); }\n\tSYS_MLOCKALL               = 324 // { int mlockall(int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 335,
   "Snippet": "\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\\n\tSYS_RCTL_ADD_RULE          = 528 // { int rctl_add_rule(const void *inbufp, \\\n\tSYS_RCTL_REMOVE_RULE       = 529 // { int rctl_remove_rule(const void *inbufp, \\\n\tSYS_POSIX_FALLOCATE        = 530 // { int posix_fallocate(int fd, \\\n\tSYS_POSIX_FADVISE          = 531 // { int posix_fadvise(int fd, off_t offset, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 132,
   "Snippet": "\tSYS_GETDIRENTRIES          = 196 // { int getdirentries(int fd, char *buf, \\\n\tSYS_FREEBSD6_MMAP          = 197 // { caddr_t freebsd6_mmap(caddr_t addr, \\\n\tSYS_FREEBSD6_LSEEK         = 199 // { off_t freebsd6_lseek(int fd, int pad, \\\n\tSYS_FREEBSD6_TRUNCATE      = 200 // { int freebsd6_truncate(char *path, int pad, \\\n\tSYS_FREEBSD6_FTRUNCATE     = 201 // { int freebsd6_ftruncate(int fd, int pad, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 298,
   "Snippet": "\tSYS_CPUSET                 = 484 // { int cpuset(cpusetid_t *setid); }\n\tSYS_CPUSET_SETID           = 485 // { int cpuset_setid(cpuwhich_t which, id_t id, \\\n\tSYS_CPUSET_GETID           = 486 // { int cpuset_getid(cpulevel_t level, \\\n\tSYS_CPUSET_GETAFFINITY     = 487 // { int cpuset_getaffinity(cpulevel_t level, \\\n\tSYS_CPUSET_SETAFFINITY     = 488 // { int cpuset_setaffinity(cpulevel_t level, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 81,
   "Snippet": "\tSYS_DUP2                   = 90  // { int dup2(u_int from, u_int to); }\n\tSYS_FCNTL                  = 92  // { int fcntl(int fd, int cmd, long arg); }\n\tSYS_SELECT                 = 93  // { int select(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_FSYNC                  = 95  // { int fsync(int fd); }\n\tSYS_SETPRIORITY            = 96  // { int setpriority(int which, int who, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 215,
   "Snippet": "\tSYS_EXTATTR_SET_FILE       = 356 // { ssize_t extattr_set_file( \\\n\tSYS_EXTATTR_GET_FILE       = 357 // { ssize_t extattr_get_file( \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_GETRESGID              = 361 // { int getresgid(gid_t *rgid, gid_t *egid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 254,
   "Snippet": "\tSYS_SWAPCONTEXT            = 423 // { int swapcontext(struct __ucontext *oucp, \\\n\tSYS_SWAPOFF                = 424 // { int swapoff(const char *name); }\n\tSYS___ACL_GET_LINK         = 425 // { int __acl_get_link(const char *path, \\\n\tSYS___ACL_SET_LINK         = 426 // { int __acl_set_link(const char *path, \\\n\tSYS___ACL_DELETE_LINK      = 427 // { int __acl_delete_link(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 340,
   "Snippet": "\tSYS_WAIT6                  = 532 // { int wait6(idtype_t idtype, id_t id, \\\n\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\\n\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\\n\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\\n\tSYS_CAP_FCNTLS_LIMIT       = 536 // { int cap_fcntls_limit(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 208,
   "Snippet": "\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 220,
   "Snippet": "\tSYS_KQUEUE                 = 362 // { int kqueue(void); }\n\tSYS_KEVENT                 = 363 // { int kevent(int fd, \\\n\tSYS_EXTATTR_SET_FD         = 371 // { ssize_t extattr_set_fd(int fd, \\\n\tSYS_EXTATTR_GET_FD         = 372 // { ssize_t extattr_get_fd(int fd, \\\n\tSYS_EXTATTR_DELETE_FD      = 373 // { int extattr_delete_fd(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 333,
   "Snippet": "\tSYS_RCTL_GET_RACCT         = 525 // { int rctl_get_racct(const void *inbufp, \\\n\tSYS_RCTL_GET_RULES         = 526 // { int rctl_get_rules(const void *inbufp, \\\n\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\\n\tSYS_RCTL_ADD_RULE          = 528 // { int rctl_add_rule(const void *inbufp, \\\n\tSYS_RCTL_REMOVE_RULE       = 529 // { int rctl_remove_rule(const void *inbufp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 267,
   "Snippet": "\tSYS_JAIL_ATTACH            = 436 // { int jail_attach(int jid); }\n\tSYS_EXTATTR_LIST_FD        = 437 // { ssize_t extattr_list_fd(int fd, \\\n\tSYS_EXTATTR_LIST_FILE      = 438 // { ssize_t extattr_list_file( \\\n\tSYS_EXTATTR_LIST_LINK      = 439 // { ssize_t extattr_list_link( \\\n\tSYS_THR_SUSPEND            = 442 // { int thr_suspend( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 131,
   "Snippet": "\tSYS_SETRLIMIT              = 195 // { int setrlimit(u_int which, \\\n\tSYS_GETDIRENTRIES          = 196 // { int getdirentries(int fd, char *buf, \\\n\tSYS_FREEBSD6_MMAP          = 197 // { caddr_t freebsd6_mmap(caddr_t addr, \\\n\tSYS_FREEBSD6_LSEEK         = 199 // { off_t freebsd6_lseek(int fd, int pad, \\\n\tSYS_FREEBSD6_TRUNCATE      = 200 // { int freebsd6_truncate(char *path, int pad, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 250,
   "Snippet": "\tSYS_SIGACTION              = 416 // { int sigaction(int sig, \\\n\tSYS_SIGRETURN              = 417 // { int sigreturn( \\\n\tSYS_GETCONTEXT             = 421 // { int getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT             = 422 // { int setcontext( \\\n\tSYS_SWAPCONTEXT            = 423 // { int swapcontext(struct __ucontext *oucp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 211,
   "Snippet": "\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\\n\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, \\\n\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\\n\tSYS_EXTATTR_SET_FILE       = 356 // { ssize_t extattr_set_file( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 228,
   "Snippet": "\tSYS___MAC_GET_PROC         = 384 // { int __mac_get_proc(struct mac *mac_p); }\n\tSYS___MAC_SET_PROC         = 385 // { int __mac_set_proc(struct mac *mac_p); }\n\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\\n\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\\n\tSYS___MAC_SET_FD           = 388 // { int __mac_set_fd(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 216,
   "Snippet": "\tSYS_EXTATTR_GET_FILE       = 357 // { ssize_t extattr_get_file( \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_GETRESGID              = 361 // { int getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_KQUEUE                 = 362 // { int kqueue(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 205,
   "Snippet": "\tSYS_SIGWAITINFO            = 346 // { int sigwaitinfo(const sigset_t *set, \\\n\tSYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \\\n\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 244,
   "Snippet": "\tSYS___MAC_GET_LINK         = 410 // { int __mac_get_link(const char *path_p, \\\n\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\\n\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\\n\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\\n\tSYS_EXTATTR_DELETE_LINK    = 414 // { int extattr_delete_link( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 227,
   "Snippet": "\tSYS_NMOUNT                 = 378 // { int nmount(struct iovec *iovp, \\\n\tSYS___MAC_GET_PROC         = 384 // { int __mac_get_proc(struct mac *mac_p); }\n\tSYS___MAC_SET_PROC         = 385 // { int __mac_set_proc(struct mac *mac_p); }\n\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\\n\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 282,
   "Snippet": "\tSYS_AUDITCTL               = 453 // { int auditctl(char *path); }\n\tSYS__UMTX_OP               = 454 // { int _umtx_op(void *obj, int op, \\\n\tSYS_THR_NEW                = 455 // { int thr_new(struct thr_param *param, \\\n\tSYS_SIGQUEUE               = 456 // { int sigqueue(pid_t pid, int signum, void *value); }\n\tSYS_ABORT2                 = 463 // { int abort2(const char *why, int nargs, void **args); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 207,
   "Snippet": "\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 47,
   "Snippet": "\tSYS_PIPE                   = 42  // { int pipe(void); }\n\tSYS_GETEGID                = 43  // { gid_t getegid(void); }\n\tSYS_PROFIL                 = 44  // { int profil(caddr_t samples, size_t size, \\\n\tSYS_KTRACE                 = 45  // { int ktrace(const char *fname, int ops, \\\n\tSYS_GETGID                 = 47  // { gid_t getgid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 331,
   "Snippet": "\tSYS_GETLOGINCLASS          = 523 // { int getloginclass(char *namebuf, \\\n\tSYS_SETLOGINCLASS          = 524 // { int setloginclass(const char *namebuf); }\n\tSYS_RCTL_GET_RACCT         = 525 // { int rctl_get_racct(const void *inbufp, \\\n\tSYS_RCTL_GET_RULES         = 526 // { int rctl_get_rules(const void *inbufp, \\\n\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 322,
   "Snippet": "\tSYS_CLOSEFROM              = 509 // { int closefrom(int lowfd); }\n\tSYS_LPATHCONF              = 513 // { int lpathconf(char *path, int name); }\n\tSYS___CAP_RIGHTS_GET       = 515 // { int __cap_rights_get(int version, \\\n\tSYS_CAP_ENTER              = 516 // { int cap_enter(void); }\n\tSYS_CAP_GETMODE            = 517 // { int cap_getmode(u_int *modep); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 144,
   "Snippet": "\tSYS_CLOCK_GETTIME          = 232 // { int clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime( \\\n\tSYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \\\n\tSYS_KTIMER_CREATE          = 235 // { int ktimer_create(clockid_t clock_id, \\\n\tSYS_KTIMER_DELETE          = 236 // { int ktimer_delete(int timerid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 226,
   "Snippet": "\tSYS_EACCESS                = 376 // { int eaccess(char *path, int amode); }\n\tSYS_NMOUNT                 = 378 // { int nmount(struct iovec *iovp, \\\n\tSYS___MAC_GET_PROC         = 384 // { int __mac_get_proc(struct mac *mac_p); }\n\tSYS___MAC_SET_PROC         = 385 // { int __mac_set_proc(struct mac *mac_p); }\n\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 189,
   "Snippet": "\tSYS___GETCWD               = 326 // { int __getcwd(char *buf, u_int buflen); }\n\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, \\\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int \\\n\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 297,
   "Snippet": "\tSYS_SHM_UNLINK             = 483 // { int shm_unlink(const char *path); }\n\tSYS_CPUSET                 = 484 // { int cpuset(cpusetid_t *setid); }\n\tSYS_CPUSET_SETID           = 485 // { int cpuset_setid(cpuwhich_t which, id_t id, \\\n\tSYS_CPUSET_GETID           = 486 // { int cpuset_getid(cpulevel_t level, \\\n\tSYS_CPUSET_GETAFFINITY     = 487 // { int cpuset_getaffinity(cpulevel_t level, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 324,
   "Snippet": "\tSYS___CAP_RIGHTS_GET       = 515 // { int __cap_rights_get(int version, \\\n\tSYS_CAP_ENTER              = 516 // { int cap_enter(void); }\n\tSYS_CAP_GETMODE            = 517 // { int cap_getmode(u_int *modep); }\n\tSYS_PDFORK                 = 518 // { int pdfork(int *fdp, int flags); }\n\tSYS_PDKILL                 = 519 // { int pdkill(int fd, int signum); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 231,
   "Snippet": "\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\\n\tSYS___MAC_SET_FD           = 388 // { int __mac_set_fd(int fd, \\\n\tSYS___MAC_SET_FILE         = 389 // { int __mac_set_file(const char *path_p, \\\n\tSYS_KENV                   = 390 // { int kenv(int what, const char *name, \\\n\tSYS_LCHFLAGS               = 391 // { int lchflags(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 116,
   "Snippet": "\tSYS_SYSARCH                = 165 // { int sysarch(int op, char *parms); }\n\tSYS_RTPRIO                 = 166 // { int rtprio(int function, pid_t pid, \\\n\tSYS_FREEBSD6_PREAD         = 173 // { ssize_t freebsd6_pread(int fd, void *buf, \\\n\tSYS_FREEBSD6_PWRITE        = 174 // { ssize_t freebsd6_pwrite(int fd, \\\n\tSYS_SETFIB                 = 175 // { int setfib(int fibnum); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 343,
   "Snippet": "\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\\n\tSYS_CAP_FCNTLS_LIMIT       = 536 // { int cap_fcntls_limit(int fd, \\\n\tSYS_CAP_FCNTLS_GET         = 537 // { int cap_fcntls_get(int fd, \\\n\tSYS_BINDAT                 = 538 // { int bindat(int fd, int s, caddr_t name, \\\n\tSYS_CONNECTAT              = 539 // { int connectat(int fd, int s, caddr_t name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 188,
   "Snippet": "\tSYS_MUNLOCKALL             = 325 // { int munlockall(void); }\n\tSYS___GETCWD               = 326 // { int __getcwd(char *buf, u_int buflen); }\n\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, \\\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 268,
   "Snippet": "\tSYS_EXTATTR_LIST_FD        = 437 // { ssize_t extattr_list_fd(int fd, \\\n\tSYS_EXTATTR_LIST_FILE      = 438 // { ssize_t extattr_list_file( \\\n\tSYS_EXTATTR_LIST_LINK      = 439 // { ssize_t extattr_list_link( \\\n\tSYS_THR_SUSPEND            = 442 // { int thr_suspend( \\\n\tSYS_THR_WAKE               = 443 // { int thr_wake(long id); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 285,
   "Snippet": "\tSYS_SIGQUEUE               = 456 // { int sigqueue(pid_t pid, int signum, void *value); }\n\tSYS_ABORT2                 = 463 // { int abort2(const char *why, int nargs, void **args); }\n\tSYS_THR_SET_NAME           = 464 // { int thr_set_name(long id, const char *name); }\n\tSYS_RTPRIO_THREAD          = 466 // { int rtprio_thread(int function, \\\n\tSYS_PREAD                  = 475 // { ssize_t pread(int fd, void *buf, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 230,
   "Snippet": "\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\\n\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\\n\tSYS___MAC_SET_FD           = 388 // { int __mac_set_fd(int fd, \\\n\tSYS___MAC_SET_FILE         = 389 // { int __mac_set_file(const char *path_p, \\\n\tSYS_KENV                   = 390 // { int kenv(int what, const char *name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 256,
   "Snippet": "\tSYS___ACL_GET_LINK         = 425 // { int __acl_get_link(const char *path, \\\n\tSYS___ACL_SET_LINK         = 426 // { int __acl_set_link(const char *path, \\\n\tSYS___ACL_DELETE_LINK      = 427 // { int __acl_delete_link(const char *path, \\\n\tSYS___ACL_ACLCHECK_LINK    = 428 // { int __acl_aclcheck_link(const char *path, \\\n\tSYS_SIGWAIT                = 429 // { int sigwait(const sigset_t *set, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 187,
   "Snippet": "\tSYS_MLOCKALL               = 324 // { int mlockall(int how); }\n\tSYS_MUNLOCKALL             = 325 // { int munlockall(void); }\n\tSYS___GETCWD               = 326 // { int __getcwd(char *buf, u_int buflen); }\n\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, \\\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 257,
   "Snippet": "\tSYS___ACL_SET_LINK         = 426 // { int __acl_set_link(const char *path, \\\n\tSYS___ACL_DELETE_LINK      = 427 // { int __acl_delete_link(const char *path, \\\n\tSYS___ACL_ACLCHECK_LINK    = 428 // { int __acl_aclcheck_link(const char *path, \\\n\tSYS_SIGWAIT                = 429 // { int sigwait(const sigset_t *set, \\\n\tSYS_THR_CREATE             = 430 // { int thr_create(ucontext_t *ctx, long *id, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 263,
   "Snippet": "\tSYS_THR_SELF               = 432 // { int thr_self(long *id); }\n\tSYS_THR_KILL               = 433 // { int thr_kill(long id, int sig); }\n\tSYS__UMTX_LOCK             = 434 // { int _umtx_lock(struct umtx *umtx); }\n\tSYS__UMTX_UNLOCK           = 435 // { int _umtx_unlock(struct umtx *umtx); }\n\tSYS_JAIL_ATTACH            = 436 // { int jail_attach(int jid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 337,
   "Snippet": "\tSYS_RCTL_REMOVE_RULE       = 529 // { int rctl_remove_rule(const void *inbufp, \\\n\tSYS_POSIX_FALLOCATE        = 530 // { int posix_fallocate(int fd, \\\n\tSYS_POSIX_FADVISE          = 531 // { int posix_fadvise(int fd, off_t offset, \\\n\tSYS_WAIT6                  = 532 // { int wait6(idtype_t idtype, id_t id, \\\n\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 339,
   "Snippet": "\tSYS_POSIX_FADVISE          = 531 // { int posix_fadvise(int fd, off_t offset, \\\n\tSYS_WAIT6                  = 532 // { int wait6(idtype_t idtype, id_t id, \\\n\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\\n\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\\n\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 117,
   "Snippet": "\tSYS_RTPRIO                 = 166 // { int rtprio(int function, pid_t pid, \\\n\tSYS_FREEBSD6_PREAD         = 173 // { ssize_t freebsd6_pread(int fd, void *buf, \\\n\tSYS_FREEBSD6_PWRITE        = 174 // { ssize_t freebsd6_pwrite(int fd, \\\n\tSYS_SETFIB                 = 175 // { int setfib(int fibnum); }\n\tSYS_NTP_ADJTIME            = 176 // { int ntp_adjtime(struct timex *tp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 289,
   "Snippet": "\tSYS_PREAD                  = 475 // { ssize_t pread(int fd, void *buf, \\\n\tSYS_PWRITE                 = 476 // { ssize_t pwrite(int fd, const void *buf, \\\n\tSYS_MMAP                   = 477 // { caddr_t mmap(caddr_t addr, size_t len, \\\n\tSYS_LSEEK                  = 478 // { off_t lseek(int fd, off_t offset, \\\n\tSYS_TRUNCATE               = 479 // { int truncate(char *path, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 221,
   "Snippet": "\tSYS_KEVENT                 = 363 // { int kevent(int fd, \\\n\tSYS_EXTATTR_SET_FD         = 371 // { ssize_t extattr_set_fd(int fd, \\\n\tSYS_EXTATTR_GET_FD         = 372 // { ssize_t extattr_get_fd(int fd, \\\n\tSYS_EXTATTR_DELETE_FD      = 373 // { int extattr_delete_fd(int fd, \\\n\tSYS___SETUGID              = 374 // { int __setugid(int flag); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 242,
   "Snippet": "\tSYS_FHSTATFS               = 398 // { int fhstatfs(const struct fhandle *u_fhp, \\\n\tSYS___MAC_GET_PID          = 409 // { int __mac_get_pid(pid_t pid, \\\n\tSYS___MAC_GET_LINK         = 410 // { int __mac_get_link(const char *path_p, \\\n\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\\n\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 223,
   "Snippet": "\tSYS_EXTATTR_GET_FD         = 372 // { ssize_t extattr_get_fd(int fd, \\\n\tSYS_EXTATTR_DELETE_FD      = 373 // { int extattr_delete_fd(int fd, \\\n\tSYS___SETUGID              = 374 // { int __setugid(int flag); }\n\tSYS_EACCESS                = 376 // { int eaccess(char *path, int amode); }\n\tSYS_NMOUNT                 = 378 // { int nmount(struct iovec *iovp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 142,
   "Snippet": "\tSYS_GETPGID                = 207 // { int getpgid(pid_t pid); }\n\tSYS_POLL                   = 209 // { int poll(struct pollfd *fds, u_int nfds, \\\n\tSYS_CLOCK_GETTIME          = 232 // { int clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime( \\\n\tSYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 293,
   "Snippet": "\tSYS_TRUNCATE               = 479 // { int truncate(char *path, off_t length); }\n\tSYS_FTRUNCATE              = 480 // { int ftruncate(int fd, off_t length); }\n\tSYS_THR_KILL2              = 481 // { int thr_kill2(pid_t pid, long id, int sig); }\n\tSYS_SHM_OPEN               = 482 // { int shm_open(const char *path, int flags, \\\n\tSYS_SHM_UNLINK             = 483 // { int shm_unlink(const char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 194,
   "Snippet": "\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }\n\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }\n\tSYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }\n\tSYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, \\\n\tSYS_UTRACE                 = 335 // { int utrace(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 259,
   "Snippet": "\tSYS___ACL_ACLCHECK_LINK    = 428 // { int __acl_aclcheck_link(const char *path, \\\n\tSYS_SIGWAIT                = 429 // { int sigwait(const sigset_t *set, \\\n\tSYS_THR_CREATE             = 430 // { int thr_create(ucontext_t *ctx, long *id, \\\n\tSYS_THR_EXIT               = 431 // { void thr_exit(long *state); }\n\tSYS_THR_SELF               = 432 // { int thr_self(long *id); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 266,
   "Snippet": "\tSYS__UMTX_UNLOCK           = 435 // { int _umtx_unlock(struct umtx *umtx); }\n\tSYS_JAIL_ATTACH            = 436 // { int jail_attach(int jid); }\n\tSYS_EXTATTR_LIST_FD        = 437 // { ssize_t extattr_list_fd(int fd, \\\n\tSYS_EXTATTR_LIST_FILE      = 438 // { ssize_t extattr_list_file( \\\n\tSYS_EXTATTR_LIST_LINK      = 439 // { ssize_t extattr_list_link( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 210,
   "Snippet": "\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\\n\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, \\\n\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 214,
   "Snippet": "\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\\n\tSYS_EXTATTR_SET_FILE       = 356 // { ssize_t extattr_set_file( \\\n\tSYS_EXTATTR_GET_FILE       = 357 // { ssize_t extattr_get_file( \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 281,
   "Snippet": "\tSYS_SETAUDIT_ADDR          = 452 // { int setaudit_addr( \\\n\tSYS_AUDITCTL               = 453 // { int auditctl(char *path); }\n\tSYS__UMTX_OP               = 454 // { int _umtx_op(void *obj, int op, \\\n\tSYS_THR_NEW                = 455 // { int thr_new(struct thr_param *param, \\\n\tSYS_SIGQUEUE               = 456 // { int sigqueue(pid_t pid, int signum, void *value); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 338,
   "Snippet": "\tSYS_POSIX_FALLOCATE        = 530 // { int posix_fallocate(int fd, \\\n\tSYS_POSIX_FADVISE          = 531 // { int posix_fadvise(int fd, off_t offset, \\\n\tSYS_WAIT6                  = 532 // { int wait6(idtype_t idtype, id_t id, \\\n\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\\n\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 145,
   "Snippet": "\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime( \\\n\tSYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \\\n\tSYS_KTIMER_CREATE          = 235 // { int ktimer_create(clockid_t clock_id, \\\n\tSYS_KTIMER_DELETE          = 236 // { int ktimer_delete(int timerid); }\n\tSYS_KTIMER_SETTIME         = 237 // { int ktimer_settime(int timerid, int flags, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 217,
   "Snippet": "\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_GETRESGID              = 361 // { int getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_KQUEUE                 = 362 // { int kqueue(void); }\n\tSYS_KEVENT                 = 363 // { int kevent(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 193,
   "Snippet": "\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }\n\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }\n\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }\n\tSYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }\n\tSYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 264,
   "Snippet": "\tSYS_THR_KILL               = 433 // { int thr_kill(long id, int sig); }\n\tSYS__UMTX_LOCK             = 434 // { int _umtx_lock(struct umtx *umtx); }\n\tSYS__UMTX_UNLOCK           = 435 // { int _umtx_unlock(struct umtx *umtx); }\n\tSYS_JAIL_ATTACH            = 436 // { int jail_attach(int jid); }\n\tSYS_EXTATTR_LIST_FD        = 437 // { ssize_t extattr_list_fd(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 341,
   "Snippet": "\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\\n\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\\n\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\\n\tSYS_CAP_FCNTLS_LIMIT       = 536 // { int cap_fcntls_limit(int fd, \\\n\tSYS_CAP_FCNTLS_GET         = 537 // { int cap_fcntls_get(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 9,
   "Snippet": "\nconst (\n\t// SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int\n\tSYS_EXIT                   = 1   // { void sys_exit(int rval); } exit \\\n\tSYS_FORK                   = 2   // { int fork(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 229,
   "Snippet": "\tSYS___MAC_SET_PROC         = 385 // { int __mac_set_proc(struct mac *mac_p); }\n\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\\n\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\\n\tSYS___MAC_SET_FD           = 388 // { int __mac_set_fd(int fd, \\\n\tSYS___MAC_SET_FILE         = 389 // { int __mac_set_file(const char *path_p, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 300,
   "Snippet": "\tSYS_CPUSET_GETID           = 486 // { int cpuset_getid(cpulevel_t level, \\\n\tSYS_CPUSET_GETAFFINITY     = 487 // { int cpuset_getaffinity(cpulevel_t level, \\\n\tSYS_CPUSET_SETAFFINITY     = 488 // { int cpuset_setaffinity(cpulevel_t level, \\\n\tSYS_FACCESSAT              = 489 // { int faccessat(int fd, char *path, int amode, \\\n\tSYS_FCHMODAT               = 490 // { int fchmodat(int fd, char *path, mode_t mode, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 246,
   "Snippet": "\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\\n\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\\n\tSYS_EXTATTR_DELETE_LINK    = 414 // { int extattr_delete_link( \\\n\tSYS___MAC_EXECVE           = 415 // { int __mac_execve(char *fname, char **argv, \\\n\tSYS_SIGACTION              = 416 // { int sigaction(int sig, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 135,
   "Snippet": "\tSYS_FREEBSD6_TRUNCATE      = 200 // { int freebsd6_truncate(char *path, int pad, \\\n\tSYS_FREEBSD6_FTRUNCATE     = 201 // { int freebsd6_ftruncate(int fd, int pad, \\\n\tSYS___SYSCTL               = 202 // { int __sysctl(int *name, u_int namelen, \\\n\tSYS_MLOCK                  = 203 // { int mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK                = 204 // { int munlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 195,
   "Snippet": "\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }\n\tSYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }\n\tSYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, \\\n\tSYS_UTRACE                 = 335 // { int utrace(const void *addr, size_t len); }\n\tSYS_KLDSYM                 = 337 // { int kldsym(int fileid, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 154,
   "Snippet": "\tSYS_FFCLOCK_SETESTIMATE    = 242 // { int ffclock_setestimate( \\\n\tSYS_FFCLOCK_GETESTIMATE    = 243 // { int ffclock_getestimate( \\\n\tSYS_CLOCK_GETCPUCLOCKID2   = 247 // { int clock_getcpuclockid2(id_t id,\\\n\tSYS_NTP_GETTIME            = 248 // { int ntp_gettime(struct ntptimeval *ntvp); }\n\tSYS_MINHERIT               = 250 // { int minherit(void *addr, size_t len, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 342,
   "Snippet": "\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\\n\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\\n\tSYS_CAP_FCNTLS_LIMIT       = 536 // { int cap_fcntls_limit(int fd, \\\n\tSYS_CAP_FCNTLS_GET         = 537 // { int cap_fcntls_get(int fd, \\\n\tSYS_BINDAT                 = 538 // { int bindat(int fd, int s, caddr_t name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 290,
   "Snippet": "\tSYS_PWRITE                 = 476 // { ssize_t pwrite(int fd, const void *buf, \\\n\tSYS_MMAP                   = 477 // { caddr_t mmap(caddr_t addr, size_t len, \\\n\tSYS_LSEEK                  = 478 // { off_t lseek(int fd, off_t offset, \\\n\tSYS_TRUNCATE               = 479 // { int truncate(char *path, off_t length); }\n\tSYS_FTRUNCATE              = 480 // { int ftruncate(int fd, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 182,
   "Snippet": "\tSYS_KLDFIRSTMOD            = 309 // { int kldfirstmod(int fileid); }\n\tSYS_GETSID                 = 310 // { int getsid(pid_t pid); }\n\tSYS_SETRESUID              = 311 // { int setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_SETRESGID              = 312 // { int setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_YIELD                  = 321 // { int yield(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 213,
   "Snippet": "\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, \\\n\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\\n\tSYS_EXTATTR_SET_FILE       = 356 // { ssize_t extattr_set_file( \\\n\tSYS_EXTATTR_GET_FILE       = 357 // { ssize_t extattr_get_file( \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 247,
   "Snippet": "\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\\n\tSYS_EXTATTR_DELETE_LINK    = 414 // { int extattr_delete_link( \\\n\tSYS___MAC_EXECVE           = 415 // { int __mac_execve(char *fname, char **argv, \\\n\tSYS_SIGACTION              = 416 // { int sigaction(int sig, \\\n\tSYS_SIGRETURN              = 417 // { int sigreturn( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 79,
   "Snippet": "\tSYS_GETITIMER              = 86  // { int getitimer(u_int which, \\\n\tSYS_GETDTABLESIZE          = 89  // { int getdtablesize(void); }\n\tSYS_DUP2                   = 90  // { int dup2(u_int from, u_int to); }\n\tSYS_FCNTL                  = 92  // { int fcntl(int fd, int cmd, long arg); }\n\tSYS_SELECT                 = 93  // { int select(int nd, fd_set *in, fd_set *ou, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 245,
   "Snippet": "\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\\n\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\\n\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\\n\tSYS_EXTATTR_DELETE_LINK    = 414 // { int extattr_delete_link( \\\n\tSYS___MAC_EXECVE           = 415 // { int __mac_execve(char *fname, char **argv, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 190,
   "Snippet": "\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, \\\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int \\\n\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }\n\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 243,
   "Snippet": "\tSYS___MAC_GET_PID          = 409 // { int __mac_get_pid(pid_t pid, \\\n\tSYS___MAC_GET_LINK         = 410 // { int __mac_get_link(const char *path_p, \\\n\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\\n\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\\n\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 103,
   "Snippet": "\tSYS_FLOCK                  = 131 // { int flock(int fd, int how); }\n\tSYS_MKFIFO                 = 132 // { int mkfifo(char *path, int mode); }\n\tSYS_SENDTO                 = 133 // { int sendto(int s, caddr_t buf, size_t len, \\\n\tSYS_SHUTDOWN               = 134 // { int shutdown(int s, int how); }\n\tSYS_SOCKETPAIR             = 135 // { int socketpair(int domain, int type, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 334,
   "Snippet": "\tSYS_RCTL_GET_RULES         = 526 // { int rctl_get_rules(const void *inbufp, \\\n\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\\n\tSYS_RCTL_ADD_RULE          = 528 // { int rctl_add_rule(const void *inbufp, \\\n\tSYS_RCTL_REMOVE_RULE       = 529 // { int rctl_remove_rule(const void *inbufp, \\\n\tSYS_POSIX_FALLOCATE        = 530 // { int posix_fallocate(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 206,
   "Snippet": "\tSYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \\\n\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 204,
   "Snippet": "\tSYS_SIGTIMEDWAIT           = 345 // { int sigtimedwait(const sigset_t *set, \\\n\tSYS_SIGWAITINFO            = 346 // { int sigwaitinfo(const sigset_t *set, \\\n\tSYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \\\n\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 241,
   "Snippet": "\tSYS_FSTATFS                = 397 // { int fstatfs(int fd, struct statfs *buf); }\n\tSYS_FHSTATFS               = 398 // { int fhstatfs(const struct fhandle *u_fhp, \\\n\tSYS___MAC_GET_PID          = 409 // { int __mac_get_pid(pid_t pid, \\\n\tSYS___MAC_GET_LINK         = 410 // { int __mac_get_link(const char *path_p, \\\n\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 191,
   "Snippet": "\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int \\\n\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }\n\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }\n\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 255,
   "Snippet": "\tSYS_SWAPOFF                = 424 // { int swapoff(const char *name); }\n\tSYS___ACL_GET_LINK         = 425 // { int __acl_get_link(const char *path, \\\n\tSYS___ACL_SET_LINK         = 426 // { int __acl_set_link(const char *path, \\\n\tSYS___ACL_DELETE_LINK      = 427 // { int __acl_delete_link(const char *path, \\\n\tSYS___ACL_ACLCHECK_LINK    = 428 // { int __acl_aclcheck_link(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 299,
   "Snippet": "\tSYS_CPUSET_SETID           = 485 // { int cpuset_setid(cpuwhich_t which, id_t id, \\\n\tSYS_CPUSET_GETID           = 486 // { int cpuset_getid(cpulevel_t level, \\\n\tSYS_CPUSET_GETAFFINITY     = 487 // { int cpuset_getaffinity(cpulevel_t level, \\\n\tSYS_CPUSET_SETAFFINITY     = 488 // { int cpuset_setaffinity(cpulevel_t level, \\\n\tSYS_FACCESSAT              = 489 // { int faccessat(int fd, char *path, int amode, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 349,
   "Snippet": "\tSYS_ACCEPT4                = 541 // { int accept4(int s, \\\n\tSYS_PIPE2                  = 542 // { int pipe2(int *fildes, int flags); }\n\tSYS_PROCCTL                = 544 // { int procctl(idtype_t idtype, id_t id, \\\n\tSYS_PPOLL                  = 545 // { int ppoll(struct pollfd *fds, u_int nfds, \\\n\tSYS_FUTIMENS               = 546 // { int futimens(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 209,
   "Snippet": "\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\\n\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 332,
   "Snippet": "\tSYS_SETLOGINCLASS          = 524 // { int setloginclass(const char *namebuf); }\n\tSYS_RCTL_GET_RACCT         = 525 // { int rctl_get_racct(const void *inbufp, \\\n\tSYS_RCTL_GET_RULES         = 526 // { int rctl_get_rules(const void *inbufp, \\\n\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\\n\tSYS_RCTL_ADD_RULE          = 528 // { int rctl_add_rule(const void *inbufp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
   "Line": 222,
   "Snippet": "\tSYS_EXTATTR_SET_FD         = 371 // { ssize_t extattr_set_fd(int fd, \\\n\tSYS_EXTATTR_GET_FD         = 372 // { ssize_t extattr_get_fd(int fd, \\\n\tSYS_EXTATTR_DELETE_FD      = 373 // { int extattr_delete_fd(int fd, \\\n\tSYS___SETUGID              = 374 // { int __setugid(int flag); }\n\tSYS_EACCESS                = 376 // { int eaccess(char *path, int amode); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/errors_freebsd_arm.go",
   "Line": 206,
   "Snippet": "\tIFT_XETHER                        = 0x1a\n\n\t// missing constants on FreeBSD-11.1-RELEASE, copied from old values in ztypes_freebsd_arm.go\n\tIFF_SMART       = 0x20\n\tIFT_FAITH       = 0xf2"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 35,
   "Snippet": "\tSYS_RECVMSG       = 27  // { int recvmsg(int s, struct msghdr *msg, int flags); }\n\tSYS_SENDMSG       = 28  // { int sendmsg(int s, caddr_t msg, int flags); }\n\tSYS_RECVFROM      = 29  // { int recvfrom(int s, caddr_t buf, size_t len, \\\n\tSYS_ACCEPT        = 30  // { int accept(int s, caddr_t name, int *anamelen); }\n\tSYS_GETPEERNAME   = 31  // { int getpeername(int fdes, caddr_t asa, int *alen); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 261,
   "Snippet": "\tSYS_VMSPACE_MCONTROL       = 491 // { int vmspace_mcontrol(void *id, void *addr, \t\\\n\tSYS_VMSPACE_PREAD          = 492 // { ssize_t vmspace_pread(void *id, void *buf, \\\n\tSYS_VMSPACE_PWRITE         = 493 // { ssize_t vmspace_pwrite(void *id, const void *buf, \\\n\tSYS_EXTEXIT                = 494 // { void extexit(int how, int status, void *addr); }\n\tSYS_LWP_CREATE             = 495 // { int lwp_create(struct lwp_params *params); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 48,
   "Snippet": "\tSYS_PIPE          = 42  // { int pipe(void); }\n\tSYS_GETEGID       = 43  // { gid_t getegid(void); }\n\tSYS_PROFIL        = 44  // { int profil(caddr_t samples, size_t size, \\\n\tSYS_KTRACE        = 45  // { int ktrace(const char *fname, int ops, int facs, \\\n\tSYS_GETGID        = 47  // { gid_t getgid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 103,
   "Snippet": "\tSYS_FLOCK         = 131 // { int flock(int fd, int how); }\n\tSYS_MKFIFO        = 132 // { int mkfifo(char *path, int mode); }\n\tSYS_SENDTO        = 133 // { int sendto(int s, caddr_t buf, size_t len, \\\n\tSYS_SHUTDOWN      = 134 // { int shutdown(int s, int how); }\n\tSYS_SOCKETPAIR    = 135 // { int socketpair(int domain, int type, int protocol, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 278,
   "Snippet": "\tSYS_UNLINKAT               = 508 // { int unlinkat(int fd, char *path, int flags); }\n\tSYS_FACCESSAT              = 509 // { int faccessat(int fd, char *path, int amode, \\\n\tSYS_MQ_OPEN                = 510 // { mqd_t mq_open(const char * name, int oflag, \\\n\tSYS_MQ_CLOSE               = 511 // { int mq_close(mqd_t mqdes); }\n\tSYS_MQ_UNLINK              = 512 // { int mq_unlink(const char *name); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 199,
   "Snippet": "\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }\n\tSYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }\n\tSYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }\n\tSYS_UTRACE                 = 335 // { int utrace(const void *addr, size_t len); }\n\tSYS_KLDSYM                 = 337 // { int kldsym(int fileid, int cmd, void *data); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 281,
   "Snippet": "\tSYS_MQ_CLOSE               = 511 // { int mq_close(mqd_t mqdes); }\n\tSYS_MQ_UNLINK              = 512 // { int mq_unlink(const char *name); }\n\tSYS_MQ_GETATTR             = 513 // { int mq_getattr(mqd_t mqdes, \\\n\tSYS_MQ_SETATTR             = 514 // { int mq_setattr(mqd_t mqdes, \\\n\tSYS_MQ_NOTIFY              = 515 // { int mq_notify(mqd_t mqdes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 263,
   "Snippet": "\tSYS_VMSPACE_PWRITE         = 493 // { ssize_t vmspace_pwrite(void *id, const void *buf, \\\n\tSYS_EXTEXIT                = 494 // { void extexit(int how, int status, void *addr); }\n\tSYS_LWP_CREATE             = 495 // { int lwp_create(struct lwp_params *params); }\n\tSYS_LWP_GETTID             = 496 // { lwpid_t lwp_gettid(void); }\n\tSYS_LWP_KILL               = 497 // { int lwp_kill(pid_t pid, lwpid_t tid, int signum); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 197,
   "Snippet": "\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }\n\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }\n\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }\n\tSYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }\n\tSYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 210,
   "Snippet": "\tSYS_SIGTIMEDWAIT           = 345 // { int sigtimedwait(const sigset_t *set,\\\n\tSYS_SIGWAITINFO            = 346 // { int sigwaitinfo(const sigset_t *set,\\\n\tSYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \\\n\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, acl_type_t type, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 235,
   "Snippet": "\tSYS_VARSYM_LIST            = 452 // { int varsym_list(int level, char *buf, int maxsize, int *marker); }\n\tSYS_EXEC_SYS_REGISTER      = 465 // { int exec_sys_register(void *entry); }\n\tSYS_EXEC_SYS_UNREGISTER    = 466 // { int exec_sys_unregister(int id); }\n\tSYS_SYS_CHECKPOINT         = 467 // { int sys_checkpoint(int type, int fd, pid_t pid, int retval); }\n\tSYS_MOUNTCTL               = 468 // { int mountctl(const char *path, int op, int fd, const void *ctl, int ctllen, void *buf, int buflen); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 284,
   "Snippet": "\tSYS_MQ_SETATTR             = 514 // { int mq_setattr(mqd_t mqdes, \\\n\tSYS_MQ_NOTIFY              = 515 // { int mq_notify(mqd_t mqdes, \\\n\tSYS_MQ_SEND                = 516 // { int mq_send(mqd_t mqdes, const char *msg_ptr, \\\n\tSYS_MQ_RECEIVE             = 517 // { ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, \\\n\tSYS_MQ_TIMEDSEND           = 518 // { int mq_timedsend(mqd_t mqdes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 153,
   "Snippet": "\tSYS_SHMDT                  = 230 // { int shmdt(const void *shmaddr); }\n\tSYS_SHMGET                 = 231 // { int shmget(key_t key, size_t size, int shmflg); }\n\tSYS_CLOCK_GETTIME          = 232 // { int clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime(clockid_t clock_id, \\\n\tSYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 131,
   "Snippet": "\tSYS_SETRLIMIT     = 195 // { int setrlimit(u_int which, \\\n\tSYS_MMAP          = 197 // { caddr_t mmap(caddr_t addr, size_t len, int prot, \\\n\t// SYS_NOSYS = 198;  // { int nosys(void); } __syscall __syscall_args int\n\tSYS_LSEEK                  = 199 // { off_t lseek(int fd, int pad, off_t offset, \\\n\tSYS_TRUNCATE               = 200 // { int truncate(char *path, int pad, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 132,
   "Snippet": "\tSYS_MMAP          = 197 // { caddr_t mmap(caddr_t addr, size_t len, int prot, \\\n\t// SYS_NOSYS = 198;  // { int nosys(void); } __syscall __syscall_args int\n\tSYS_LSEEK                  = 199 // { off_t lseek(int fd, int pad, off_t offset, \\\n\tSYS_TRUNCATE               = 200 // { int truncate(char *path, int pad, off_t length); }\n\tSYS_FTRUNCATE              = 201 // { int ftruncate(int fd, int pad, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 142,
   "Snippet": "\tSYS_GETPGID                = 207 // { int getpgid(pid_t pid); }\n\tSYS_POLL                   = 209 // { int poll(struct pollfd *fds, u_int nfds, \\\n\tSYS___SEMCTL               = 220 // { int __semctl(int semid, int semnum, int cmd, \\\n\tSYS_SEMGET                 = 221 // { int semget(key_t key, int nsems, int semflg); }\n\tSYS_SEMOP                  = 222 // { int semop(int semid, struct sembuf *sops, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 287,
   "Snippet": "\tSYS_MQ_RECEIVE             = 517 // { ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, \\\n\tSYS_MQ_TIMEDSEND           = 518 // { int mq_timedsend(mqd_t mqdes, \\\n\tSYS_MQ_TIMEDRECEIVE        = 519 // { ssize_t mq_timedreceive(mqd_t mqdes, \\\n\tSYS_IOPRIO_SET             = 520 // { int ioprio_set(int which, int who, int prio); }\n\tSYS_IOPRIO_GET             = 521 // { int ioprio_get(int which, int who); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 267,
   "Snippet": "\tSYS_LWP_KILL               = 497 // { int lwp_kill(pid_t pid, lwpid_t tid, int signum); }\n\tSYS_LWP_RTPRIO             = 498 // { int lwp_rtprio(int function, pid_t pid, lwpid_t tid, struct rtprio *rtp); }\n\tSYS_PSELECT                = 499 // { int pselect(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_STATVFS                = 500 // { int statvfs(const char *path, struct statvfs *buf); }\n\tSYS_FSTATVFS               = 501 // { int fstatvfs(int fd, struct statvfs *buf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 304,
   "Snippet": "\tSYS_VMM_GUEST_CTL          = 534 // { int vmm_guest_ctl(int op, struct vmm_guest_options *options); }\n\tSYS_VMM_GUEST_SYNC_ADDR    = 535 // { int vmm_guest_sync_addr(long *dstaddr, long *srcaddr); }\n\tSYS_PROCCTL                = 536 // { int procctl(idtype_t idtype, id_t id, int cmd, void *data); }\n\tSYS_CHFLAGSAT              = 537 // { int chflagsat(int fd, const char *path, int flags, int atflags);}\n\tSYS_PIPE2                  = 538 // { int pipe2(int *fildes, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 180,
   "Snippet": "\tSYS_GETSID                 = 310 // { int getsid(pid_t pid); }\n\tSYS_SETRESUID              = 311 // { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }\n\tSYS_SETRESGID              = 312 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }\n\tSYS_AIO_RETURN             = 314 // { int aio_return(struct aiocb *aiocbp); }\n\tSYS_AIO_SUSPEND            = 315 // { int aio_suspend(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 195,
   "Snippet": "\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct sched_param *param); }\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param); }\n\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }\n\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }\n\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 224,
   "Snippet": "\tSYS_AIO_WAITCOMPLETE       = 359 // { int aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); }\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }\n\tSYS_GETRESGID              = 361 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }\n\tSYS_KQUEUE                 = 362 // { int kqueue(void); }\n\tSYS_KEVENT                 = 363 // { int kevent(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 130,
   "Snippet": "\tSYS_GETRLIMIT     = 194 // { int getrlimit(u_int which, \\\n\tSYS_SETRLIMIT     = 195 // { int setrlimit(u_int which, \\\n\tSYS_MMAP          = 197 // { caddr_t mmap(caddr_t addr, size_t len, int prot, \\\n\t// SYS_NOSYS = 198;  // { int nosys(void); } __syscall __syscall_args int\n\tSYS_LSEEK                  = 199 // { off_t lseek(int fd, int pad, off_t offset, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 214,
   "Snippet": "\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, acl_type_t type, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, acl_type_t type, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, acl_type_t type); }\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 198,
   "Snippet": "\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }\n\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }\n\tSYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }\n\tSYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }\n\tSYS_UTRACE                 = 335 // { int utrace(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 9,
   "Snippet": "\nconst (\n\t// SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int\n\tSYS_EXIT          = 1   // { void exit(int rval); }\n\tSYS_FORK          = 2   // { int fork(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 286,
   "Snippet": "\tSYS_MQ_SEND                = 516 // { int mq_send(mqd_t mqdes, const char *msg_ptr, \\\n\tSYS_MQ_RECEIVE             = 517 // { ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, \\\n\tSYS_MQ_TIMEDSEND           = 518 // { int mq_timedsend(mqd_t mqdes, \\\n\tSYS_MQ_TIMEDRECEIVE        = 519 // { ssize_t mq_timedreceive(mqd_t mqdes, \\\n\tSYS_IOPRIO_SET             = 520 // { int ioprio_set(int which, int who, int prio); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 236,
   "Snippet": "\tSYS_EXEC_SYS_REGISTER      = 465 // { int exec_sys_register(void *entry); }\n\tSYS_EXEC_SYS_UNREGISTER    = 466 // { int exec_sys_unregister(int id); }\n\tSYS_SYS_CHECKPOINT         = 467 // { int sys_checkpoint(int type, int fd, pid_t pid, int retval); }\n\tSYS_MOUNTCTL               = 468 // { int mountctl(const char *path, int op, int fd, const void *ctl, int ctllen, void *buf, int buflen); }\n\tSYS_UMTX_SLEEP             = 469 // { int umtx_sleep(volatile const int *ptr, int value, int timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 310,
   "Snippet": "\tSYS_FUTIMENS               = 540 // { int futimens(int fd, const struct timespec *ts); }\n\tSYS_ACCEPT4                = 541 // { int accept4(int s, caddr_t name, int *anamelen, int flags); }\n\tSYS_LWP_SETNAME            = 542 // { int lwp_setname(lwpid_t tid, const char *name); }\n\tSYS_PPOLL                  = 543 // { int ppoll(struct pollfd *fds, u_int nfds, \\\n\tSYS_LWP_SETAFFINITY        = 544 // { int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t *mask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 250,
   "Snippet": "\tSYS_GETDIRENTRIES          = 479 // { int getdirentries(int fd, char *buf, u_int count, \\\n\tSYS_GETDENTS               = 480 // { int getdents(int fd, char *buf, size_t count); }\n\tSYS_USCHED_SET             = 481 // { int usched_set(pid_t pid, int cmd, void *data, \\\n\tSYS_EXTACCEPT              = 482 // { int extaccept(int s, int flags, caddr_t name, int *anamelen); }\n\tSYS_EXTCONNECT             = 483 // { int extconnect(int s, int flags, caddr_t name, int namelen); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 303,
   "Snippet": "\tSYS_LPATHCONF              = 533 // { int lpathconf(char *path, int name); }\n\tSYS_VMM_GUEST_CTL          = 534 // { int vmm_guest_ctl(int op, struct vmm_guest_options *options); }\n\tSYS_VMM_GUEST_SYNC_ADDR    = 535 // { int vmm_guest_sync_addr(long *dstaddr, long *srcaddr); }\n\tSYS_PROCCTL                = 536 // { int procctl(idtype_t idtype, id_t id, int cmd, void *data); }\n\tSYS_CHFLAGSAT              = 537 // { int chflagsat(int fd, const char *path, int flags, int atflags);}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 135,
   "Snippet": "\tSYS_TRUNCATE               = 200 // { int truncate(char *path, int pad, off_t length); }\n\tSYS_FTRUNCATE              = 201 // { int ftruncate(int fd, int pad, off_t length); }\n\tSYS___SYSCTL               = 202 // { int __sysctl(int *name, u_int namelen, void *old, \\\n\tSYS_MLOCK                  = 203 // { int mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK                = 204 // { int munlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 152,
   "Snippet": "\tSYS_SHMCTL                 = 229 // { int shmctl(int shmid, int cmd, \\\n\tSYS_SHMDT                  = 230 // { int shmdt(const void *shmaddr); }\n\tSYS_SHMGET                 = 231 // { int shmget(key_t key, size_t size, int shmflg); }\n\tSYS_CLOCK_GETTIME          = 232 // { int clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime(clockid_t clock_id, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 260,
   "Snippet": "\tSYS_VMSPACE_MUNMAP         = 490 // { int vmspace_munmap(void *id, void *addr,\t\\\n\tSYS_VMSPACE_MCONTROL       = 491 // { int vmspace_mcontrol(void *id, void *addr, \t\\\n\tSYS_VMSPACE_PREAD          = 492 // { ssize_t vmspace_pread(void *id, void *buf, \\\n\tSYS_VMSPACE_PWRITE         = 493 // { ssize_t vmspace_pwrite(void *id, const void *buf, \\\n\tSYS_EXTEXIT                = 494 // { void extexit(int how, int status, void *addr); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 154,
   "Snippet": "\tSYS_SHMGET                 = 231 // { int shmget(key_t key, size_t size, int shmflg); }\n\tSYS_CLOCK_GETTIME          = 232 // { int clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime(clockid_t clock_id, \\\n\tSYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \\\n\tSYS_NANOSLEEP              = 240 // { int nanosleep(const struct timespec *rqtp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 223,
   "Snippet": "\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_AIO_WAITCOMPLETE       = 359 // { int aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); }\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }\n\tSYS_GETRESGID              = 361 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }\n\tSYS_KQUEUE                 = 362 // { int kqueue(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 283,
   "Snippet": "\tSYS_MQ_GETATTR             = 513 // { int mq_getattr(mqd_t mqdes, \\\n\tSYS_MQ_SETATTR             = 514 // { int mq_setattr(mqd_t mqdes, \\\n\tSYS_MQ_NOTIFY              = 515 // { int mq_notify(mqd_t mqdes, \\\n\tSYS_MQ_SEND                = 516 // { int mq_send(mqd_t mqdes, const char *msg_ptr, \\\n\tSYS_MQ_RECEIVE             = 517 // { ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 216,
   "Snippet": "\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, acl_type_t type); }\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\\n\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, acl_type_t type, \\\n\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 219,
   "Snippet": "\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, acl_type_t type, \\\n\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\\n\tSYS_EXTATTR_SET_FILE       = 356 // { int extattr_set_file(const char *path, \\\n\tSYS_EXTATTR_GET_FILE       = 357 // { int extattr_get_file(const char *path, \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 242,
   "Snippet": "\tSYS_JAIL_ATTACH            = 471 // { int jail_attach(int jid); }\n\tSYS_SET_TLS_AREA           = 472 // { int set_tls_area(int which, struct tls_info *info, size_t infosize); }\n\tSYS_GET_TLS_AREA           = 473 // { int get_tls_area(int which, struct tls_info *info, size_t infosize); }\n\tSYS_CLOSEFROM              = 474 // { int closefrom(int fd); }\n\tSYS_STAT                   = 475 // { int stat(const char *path, struct stat *ub); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 221,
   "Snippet": "\tSYS_EXTATTR_SET_FILE       = 356 // { int extattr_set_file(const char *path, \\\n\tSYS_EXTATTR_GET_FILE       = 357 // { int extattr_get_file(const char *path, \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_AIO_WAITCOMPLETE       = 359 // { int aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); }\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 54,
   "Snippet": "\tSYS_SETLOGIN      = 50  // { int setlogin(char *namebuf); }\n\tSYS_ACCT          = 51  // { int acct(char *path); }\n\tSYS_SIGALTSTACK   = 53  // { int sigaltstack(stack_t *ss, stack_t *oss); }\n\tSYS_IOCTL         = 54  // { int ioctl(int fd, u_long com, caddr_t data); }\n\tSYS_REBOOT        = 55  // { int reboot(int opt); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 312,
   "Snippet": "\tSYS_LWP_SETNAME            = 542 // { int lwp_setname(lwpid_t tid, const char *name); }\n\tSYS_PPOLL                  = 543 // { int ppoll(struct pollfd *fds, u_int nfds, \\\n\tSYS_LWP_SETAFFINITY        = 544 // { int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t *mask); }\n\tSYS_LWP_GETAFFINITY        = 545 // { int lwp_getaffinity(pid_t pid, lwpid_t tid, cpumask_t *mask); }\n\tSYS_LWP_CREATE2            = 546 // { int lwp_create2(struct lwp_params *params, const cpumask_t *mask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 217,
   "Snippet": "\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, acl_type_t type); }\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\\n\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, acl_type_t type, \\\n\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\\n\tSYS_EXTATTR_SET_FILE       = 356 // { int extattr_set_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 211,
   "Snippet": "\tSYS_SIGWAITINFO            = 346 // { int sigwaitinfo(const sigset_t *set,\\\n\tSYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \\\n\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, acl_type_t type, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, acl_type_t type, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 72,
   "Snippet": "\tSYS_MINCORE       = 78  // { int mincore(const void *addr, size_t len, \\\n\tSYS_GETGROUPS     = 79  // { int getgroups(u_int gidsetsize, gid_t *gidset); }\n\tSYS_SETGROUPS     = 80  // { int setgroups(u_int gidsetsize, gid_t *gidset); }\n\tSYS_GETPGRP       = 81  // { int getpgrp(void); }\n\tSYS_SETPGID       = 82  // { int setpgid(int pid, int pgid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 192,
   "Snippet": "\tSYS_MUNLOCKALL             = 325 // { int munlockall(void); }\n\tSYS___GETCWD               = 326 // { int __getcwd(u_char *buf, u_int buflen); }\n\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, const struct sched_param *param); }\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct sched_param *param); }\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 313,
   "Snippet": "\tSYS_PPOLL                  = 543 // { int ppoll(struct pollfd *fds, u_int nfds, \\\n\tSYS_LWP_SETAFFINITY        = 544 // { int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t *mask); }\n\tSYS_LWP_GETAFFINITY        = 545 // { int lwp_getaffinity(pid_t pid, lwpid_t tid, cpumask_t *mask); }\n\tSYS_LWP_CREATE2            = 546 // { int lwp_create2(struct lwp_params *params, const cpumask_t *mask); }\n)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 266,
   "Snippet": "\tSYS_LWP_GETTID             = 496 // { lwpid_t lwp_gettid(void); }\n\tSYS_LWP_KILL               = 497 // { int lwp_kill(pid_t pid, lwpid_t tid, int signum); }\n\tSYS_LWP_RTPRIO             = 498 // { int lwp_rtprio(int function, pid_t pid, lwpid_t tid, struct rtprio *rtp); }\n\tSYS_PSELECT                = 499 // { int pselect(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_STATVFS                = 500 // { int statvfs(const char *path, struct statvfs *buf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 253,
   "Snippet": "\tSYS_EXTACCEPT              = 482 // { int extaccept(int s, int flags, caddr_t name, int *anamelen); }\n\tSYS_EXTCONNECT             = 483 // { int extconnect(int s, int flags, caddr_t name, int namelen); }\n\tSYS_MCONTROL               = 485 // { int mcontrol(void *addr, size_t len, int behav, off_t value); }\n\tSYS_VMSPACE_CREATE         = 486 // { int vmspace_create(void *id, int type, void *data); }\n\tSYS_VMSPACE_DESTROY        = 487 // { int vmspace_destroy(void *id); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 212,
   "Snippet": "\tSYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \\\n\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, acl_type_t type, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, acl_type_t type, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 32,
   "Snippet": "\tSYS_GETUID        = 24  // { uid_t getuid(void); }\n\tSYS_GETEUID       = 25  // { uid_t geteuid(void); }\n\tSYS_PTRACE        = 26  // { int ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG       = 27  // { int recvmsg(int s, struct msghdr *msg, int flags); }\n\tSYS_SENDMSG       = 28  // { int sendmsg(int s, caddr_t msg, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 302,
   "Snippet": "\tSYS_EACCESS                = 532 // { int eaccess(char *path, int flags); }\n\tSYS_LPATHCONF              = 533 // { int lpathconf(char *path, int name); }\n\tSYS_VMM_GUEST_CTL          = 534 // { int vmm_guest_ctl(int op, struct vmm_guest_options *options); }\n\tSYS_VMM_GUEST_SYNC_ADDR    = 535 // { int vmm_guest_sync_addr(long *dstaddr, long *srcaddr); }\n\tSYS_PROCCTL                = 536 // { int procctl(idtype_t idtype, id_t id, int cmd, void *data); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 282,
   "Snippet": "\tSYS_MQ_UNLINK              = 512 // { int mq_unlink(const char *name); }\n\tSYS_MQ_GETATTR             = 513 // { int mq_getattr(mqd_t mqdes, \\\n\tSYS_MQ_SETATTR             = 514 // { int mq_setattr(mqd_t mqdes, \\\n\tSYS_MQ_NOTIFY              = 515 // { int mq_notify(mqd_t mqdes, \\\n\tSYS_MQ_SEND                = 516 // { int mq_send(mqd_t mqdes, const char *msg_ptr, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 285,
   "Snippet": "\tSYS_MQ_NOTIFY              = 515 // { int mq_notify(mqd_t mqdes, \\\n\tSYS_MQ_SEND                = 516 // { int mq_send(mqd_t mqdes, const char *msg_ptr, \\\n\tSYS_MQ_RECEIVE             = 517 // { ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, \\\n\tSYS_MQ_TIMEDSEND           = 518 // { int mq_timedsend(mqd_t mqdes, \\\n\tSYS_MQ_TIMEDRECEIVE        = 519 // { ssize_t mq_timedreceive(mqd_t mqdes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 265,
   "Snippet": "\tSYS_LWP_CREATE             = 495 // { int lwp_create(struct lwp_params *params); }\n\tSYS_LWP_GETTID             = 496 // { lwpid_t lwp_gettid(void); }\n\tSYS_LWP_KILL               = 497 // { int lwp_kill(pid_t pid, lwpid_t tid, int signum); }\n\tSYS_LWP_RTPRIO             = 498 // { int lwp_rtprio(int function, pid_t pid, lwpid_t tid, struct rtprio *rtp); }\n\tSYS_PSELECT                = 499 // { int pselect(int nd, fd_set *in, fd_set *ou, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 234,
   "Snippet": "\tSYS_VARSYM_GET             = 451 // { int varsym_get(int mask, const char *wild, char *buf, int bufsize); }\n\tSYS_VARSYM_LIST            = 452 // { int varsym_list(int level, char *buf, int maxsize, int *marker); }\n\tSYS_EXEC_SYS_REGISTER      = 465 // { int exec_sys_register(void *entry); }\n\tSYS_EXEC_SYS_UNREGISTER    = 466 // { int exec_sys_unregister(int id); }\n\tSYS_SYS_CHECKPOINT         = 467 // { int sys_checkpoint(int type, int fd, pid_t pid, int retval); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 314,
   "Snippet": "\tSYS_LWP_SETAFFINITY        = 544 // { int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t *mask); }\n\tSYS_LWP_GETAFFINITY        = 545 // { int lwp_getaffinity(pid_t pid, lwpid_t tid, cpumask_t *mask); }\n\tSYS_LWP_CREATE2            = 546 // { int lwp_create2(struct lwp_params *params, const cpumask_t *mask); }\n)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 13,
   "Snippet": "\tSYS_FORK          = 2   // { int fork(void); }\n\tSYS_READ          = 3   // { ssize_t read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE         = 4   // { ssize_t write(int fd, const void *buf, size_t nbyte); }\n\tSYS_OPEN          = 5   // { int open(char *path, int flags, int mode); }\n\tSYS_CLOSE         = 6   // { int close(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 71,
   "Snippet": "\tSYS_MADVISE       = 75  // { int madvise(void *addr, size_t len, int behav); }\n\tSYS_MINCORE       = 78  // { int mincore(const void *addr, size_t len, \\\n\tSYS_GETGROUPS     = 79  // { int getgroups(u_int gidsetsize, gid_t *gidset); }\n\tSYS_SETGROUPS     = 80  // { int setgroups(u_int gidsetsize, gid_t *gidset); }\n\tSYS_GETPGRP       = 81  // { int getpgrp(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 220,
   "Snippet": "\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\\n\tSYS_EXTATTR_SET_FILE       = 356 // { int extattr_set_file(const char *path, \\\n\tSYS_EXTATTR_GET_FILE       = 357 // { int extattr_get_file(const char *path, \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_AIO_WAITCOMPLETE       = 359 // { int aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 179,
   "Snippet": "\tSYS_KLDFIRSTMOD            = 309 // { int kldfirstmod(int fileid); }\n\tSYS_GETSID                 = 310 // { int getsid(pid_t pid); }\n\tSYS_SETRESUID              = 311 // { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }\n\tSYS_SETRESGID              = 312 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }\n\tSYS_AIO_RETURN             = 314 // { int aio_return(struct aiocb *aiocbp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 12,
   "Snippet": "\tSYS_EXIT          = 1   // { void exit(int rval); }\n\tSYS_FORK          = 2   // { int fork(void); }\n\tSYS_READ          = 3   // { ssize_t read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE         = 4   // { ssize_t write(int fd, const void *buf, size_t nbyte); }\n\tSYS_OPEN          = 5   // { int open(char *path, int flags, int mode); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 264,
   "Snippet": "\tSYS_EXTEXIT                = 494 // { void extexit(int how, int status, void *addr); }\n\tSYS_LWP_CREATE             = 495 // { int lwp_create(struct lwp_params *params); }\n\tSYS_LWP_GETTID             = 496 // { lwpid_t lwp_gettid(void); }\n\tSYS_LWP_KILL               = 497 // { int lwp_kill(pid_t pid, lwpid_t tid, int signum); }\n\tSYS_LWP_RTPRIO             = 498 // { int lwp_rtprio(int function, pid_t pid, lwpid_t tid, struct rtprio *rtp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 81,
   "Snippet": "\tSYS_DUP2          = 90  // { int dup2(int from, int to); }\n\tSYS_FCNTL         = 92  // { int fcntl(int fd, int cmd, long arg); }\n\tSYS_SELECT        = 93  // { int select(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_FSYNC         = 95  // { int fsync(int fd); }\n\tSYS_SETPRIORITY   = 96  // { int setpriority(int which, int who, int prio); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 279,
   "Snippet": "\tSYS_FACCESSAT              = 509 // { int faccessat(int fd, char *path, int amode, \\\n\tSYS_MQ_OPEN                = 510 // { mqd_t mq_open(const char * name, int oflag, \\\n\tSYS_MQ_CLOSE               = 511 // { int mq_close(mqd_t mqdes); }\n\tSYS_MQ_UNLINK              = 512 // { int mq_unlink(const char *name); }\n\tSYS_MQ_GETATTR             = 513 // { int mq_getattr(mqd_t mqdes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 241,
   "Snippet": "\tSYS_UMTX_WAKEUP            = 470 // { int umtx_wakeup(volatile const int *ptr, int count); }\n\tSYS_JAIL_ATTACH            = 471 // { int jail_attach(int jid); }\n\tSYS_SET_TLS_AREA           = 472 // { int set_tls_area(int which, struct tls_info *info, size_t infosize); }\n\tSYS_GET_TLS_AREA           = 473 // { int get_tls_area(int which, struct tls_info *info, size_t infosize); }\n\tSYS_CLOSEFROM              = 474 // { int closefrom(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 194,
   "Snippet": "\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, const struct sched_param *param); }\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct sched_param *param); }\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param); }\n\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }\n\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 257,
   "Snippet": "\tSYS_VMSPACE_DESTROY        = 487 // { int vmspace_destroy(void *id); }\n\tSYS_VMSPACE_CTL            = 488 // { int vmspace_ctl(void *id, int cmd, \t\t\\\n\tSYS_VMSPACE_MMAP           = 489 // { int vmspace_mmap(void *id, void *addr, size_t len, \\\n\tSYS_VMSPACE_MUNMAP         = 490 // { int vmspace_munmap(void *id, void *addr,\t\\\n\tSYS_VMSPACE_MCONTROL       = 491 // { int vmspace_mcontrol(void *id, void *addr, \t\\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 193,
   "Snippet": "\tSYS___GETCWD               = 326 // { int __getcwd(u_char *buf, u_int buflen); }\n\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, const struct sched_param *param); }\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct sched_param *param); }\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param); }\n\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 230,
   "Snippet": "\tSYS_LCHFLAGS               = 391 // { int lchflags(char *path, int flags); }\n\tSYS_UUIDGEN                = 392 // { int uuidgen(struct uuid *store, int count); }\n\tSYS_SENDFILE               = 393 // { int sendfile(int fd, int s, off_t offset, size_t nbytes, \\\n\tSYS_VARSYM_SET             = 450 // { int varsym_set(int level, const char *name, const char *data); }\n\tSYS_VARSYM_GET             = 451 // { int varsym_get(int mask, const char *wild, char *buf, int bufsize); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 213,
   "Snippet": "\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, acl_type_t type, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, acl_type_t type, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, acl_type_t type); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 191,
   "Snippet": "\tSYS_MLOCKALL               = 324 // { int mlockall(int how); }\n\tSYS_MUNLOCKALL             = 325 // { int munlockall(void); }\n\tSYS___GETCWD               = 326 // { int __getcwd(u_char *buf, u_int buflen); }\n\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, const struct sched_param *param); }\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct sched_param *param); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 155,
   "Snippet": "\tSYS_CLOCK_GETTIME          = 232 // { int clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime(clockid_t clock_id, \\\n\tSYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \\\n\tSYS_NANOSLEEP              = 240 // { int nanosleep(const struct timespec *rqtp, \\\n\tSYS_MINHERIT               = 250 // { int minherit(void *addr, size_t len, int inherit); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 215,
   "Snippet": "\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, acl_type_t type, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, acl_type_t type); }\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\\n\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, acl_type_t type, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 187,
   "Snippet": "\tSYS_AIO_READ               = 318 // { int aio_read(struct aiocb *aiocbp); }\n\tSYS_AIO_WRITE              = 319 // { int aio_write(struct aiocb *aiocbp); }\n\tSYS_LIO_LISTIO             = 320 // { int lio_listio(int mode, struct aiocb * const *acb_list, int nent, struct sigevent *sig); }\n\tSYS_YIELD                  = 321 // { int yield(void); }\n\tSYS_MLOCKALL               = 324 // { int mlockall(int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 55,
   "Snippet": "\tSYS_ACCT          = 51  // { int acct(char *path); }\n\tSYS_SIGALTSTACK   = 53  // { int sigaltstack(stack_t *ss, stack_t *oss); }\n\tSYS_IOCTL         = 54  // { int ioctl(int fd, u_long com, caddr_t data); }\n\tSYS_REBOOT        = 55  // { int reboot(int opt); }\n\tSYS_REVOKE        = 56  // { int revoke(char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 159,
   "Snippet": "\tSYS_MINHERIT               = 250 // { int minherit(void *addr, size_t len, int inherit); }\n\tSYS_RFORK                  = 251 // { int rfork(int flags); }\n\tSYS_OPENBSD_POLL           = 252 // { int openbsd_poll(struct pollfd *fds, u_int nfds, \\\n\tSYS_ISSETUGID              = 253 // { int issetugid(void); }\n\tSYS_LCHOWN                 = 254 // { int lchown(char *path, int uid, int gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go",
   "Line": 176,
   "Snippet": "\tSYS_KLDFIND                = 306 // { int kldfind(const char *file); }\n\tSYS_KLDNEXT                = 307 // { int kldnext(int fileid); }\n\tSYS_KLDSTAT                = 308 // { int kldstat(int fileid, struct kld_file_stat* stat); }\n\tSYS_KLDFIRSTMOD            = 309 // { int kldfirstmod(int fileid); }\n\tSYS_GETSID                 = 310 // { int getsid(pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 255,
   "Snippet": "\tSYS_SWAPOFF                = 424 // { int swapoff(const char *name); }\n\tSYS___ACL_GET_LINK         = 425 // { int __acl_get_link(const char *path, \\\n\tSYS___ACL_SET_LINK         = 426 // { int __acl_set_link(const char *path, \\\n\tSYS___ACL_DELETE_LINK      = 427 // { int __acl_delete_link(const char *path, \\\n\tSYS___ACL_ACLCHECK_LINK    = 428 // { int __acl_aclcheck_link(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 216,
   "Snippet": "\tSYS_EXTATTR_GET_FILE       = 357 // { ssize_t extattr_get_file( \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_GETRESGID              = 361 // { int getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_KQUEUE                 = 362 // { int kqueue(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 337,
   "Snippet": "\tSYS_RCTL_REMOVE_RULE       = 529 // { int rctl_remove_rule(const void *inbufp, \\\n\tSYS_POSIX_FALLOCATE        = 530 // { int posix_fallocate(int fd, \\\n\tSYS_POSIX_FADVISE          = 531 // { int posix_fadvise(int fd, off_t offset, \\\n\tSYS_WAIT6                  = 532 // { int wait6(idtype_t idtype, id_t id, \\\n\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 342,
   "Snippet": "\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\\n\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\\n\tSYS_CAP_FCNTLS_LIMIT       = 536 // { int cap_fcntls_limit(int fd, \\\n\tSYS_CAP_FCNTLS_GET         = 537 // { int cap_fcntls_get(int fd, \\\n\tSYS_BINDAT                 = 538 // { int bindat(int fd, int s, caddr_t name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 340,
   "Snippet": "\tSYS_WAIT6                  = 532 // { int wait6(idtype_t idtype, id_t id, \\\n\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\\n\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\\n\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\\n\tSYS_CAP_FCNTLS_LIMIT       = 536 // { int cap_fcntls_limit(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 339,
   "Snippet": "\tSYS_POSIX_FADVISE          = 531 // { int posix_fadvise(int fd, off_t offset, \\\n\tSYS_WAIT6                  = 532 // { int wait6(idtype_t idtype, id_t id, \\\n\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\\n\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\\n\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 264,
   "Snippet": "\tSYS_THR_KILL               = 433 // { int thr_kill(long id, int sig); }\n\tSYS__UMTX_LOCK             = 434 // { int _umtx_lock(struct umtx *umtx); }\n\tSYS__UMTX_UNLOCK           = 435 // { int _umtx_unlock(struct umtx *umtx); }\n\tSYS_JAIL_ATTACH            = 436 // { int jail_attach(int jid); }\n\tSYS_EXTATTR_LIST_FD        = 437 // { ssize_t extattr_list_fd(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 331,
   "Snippet": "\tSYS_GETLOGINCLASS          = 523 // { int getloginclass(char *namebuf, \\\n\tSYS_SETLOGINCLASS          = 524 // { int setloginclass(const char *namebuf); }\n\tSYS_RCTL_GET_RACCT         = 525 // { int rctl_get_racct(const void *inbufp, \\\n\tSYS_RCTL_GET_RULES         = 526 // { int rctl_get_rules(const void *inbufp, \\\n\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 117,
   "Snippet": "\tSYS_RTPRIO                 = 166 // { int rtprio(int function, pid_t pid, \\\n\tSYS_FREEBSD6_PREAD         = 173 // { ssize_t freebsd6_pread(int fd, void *buf, \\\n\tSYS_FREEBSD6_PWRITE        = 174 // { ssize_t freebsd6_pwrite(int fd, \\\n\tSYS_SETFIB                 = 175 // { int setfib(int fibnum); }\n\tSYS_NTP_ADJTIME            = 176 // { int ntp_adjtime(struct timex *tp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 195,
   "Snippet": "\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }\n\tSYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }\n\tSYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, \\\n\tSYS_UTRACE                 = 335 // { int utrace(const void *addr, size_t len); }\n\tSYS_KLDSYM                 = 337 // { int kldsym(int fileid, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 281,
   "Snippet": "\tSYS_SETAUDIT_ADDR          = 452 // { int setaudit_addr( \\\n\tSYS_AUDITCTL               = 453 // { int auditctl(char *path); }\n\tSYS__UMTX_OP               = 454 // { int _umtx_op(void *obj, int op, \\\n\tSYS_THR_NEW                = 455 // { int thr_new(struct thr_param *param, \\\n\tSYS_SIGQUEUE               = 456 // { int sigqueue(pid_t pid, int signum, void *value); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 221,
   "Snippet": "\tSYS_KEVENT                 = 363 // { int kevent(int fd, \\\n\tSYS_EXTATTR_SET_FD         = 371 // { ssize_t extattr_set_fd(int fd, \\\n\tSYS_EXTATTR_GET_FD         = 372 // { ssize_t extattr_get_fd(int fd, \\\n\tSYS_EXTATTR_DELETE_FD      = 373 // { int extattr_delete_fd(int fd, \\\n\tSYS___SETUGID              = 374 // { int __setugid(int flag); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 47,
   "Snippet": "\tSYS_PIPE                   = 42  // { int pipe(void); }\n\tSYS_GETEGID                = 43  // { gid_t getegid(void); }\n\tSYS_PROFIL                 = 44  // { int profil(caddr_t samples, size_t size, \\\n\tSYS_KTRACE                 = 45  // { int ktrace(const char *fname, int ops, \\\n\tSYS_GETGID                 = 47  // { gid_t getgid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 183,
   "Snippet": "\tSYS_GETSID                 = 310 // { int getsid(pid_t pid); }\n\tSYS_SETRESUID              = 311 // { int setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_SETRESGID              = 312 // { int setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_YIELD                  = 321 // { int yield(void); }\n\tSYS_MLOCKALL               = 324 // { int mlockall(int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 299,
   "Snippet": "\tSYS_CPUSET_SETID           = 485 // { int cpuset_setid(cpuwhich_t which, id_t id, \\\n\tSYS_CPUSET_GETID           = 486 // { int cpuset_getid(cpulevel_t level, \\\n\tSYS_CPUSET_GETAFFINITY     = 487 // { int cpuset_getaffinity(cpulevel_t level, \\\n\tSYS_CPUSET_SETAFFINITY     = 488 // { int cpuset_setaffinity(cpulevel_t level, \\\n\tSYS_FACCESSAT              = 489 // { int faccessat(int fd, char *path, int amode, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 332,
   "Snippet": "\tSYS_SETLOGINCLASS          = 524 // { int setloginclass(const char *namebuf); }\n\tSYS_RCTL_GET_RACCT         = 525 // { int rctl_get_racct(const void *inbufp, \\\n\tSYS_RCTL_GET_RULES         = 526 // { int rctl_get_rules(const void *inbufp, \\\n\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\\n\tSYS_RCTL_ADD_RULE          = 528 // { int rctl_add_rule(const void *inbufp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 217,
   "Snippet": "\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_GETRESGID              = 361 // { int getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_KQUEUE                 = 362 // { int kqueue(void); }\n\tSYS_KEVENT                 = 363 // { int kevent(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 333,
   "Snippet": "\tSYS_RCTL_GET_RACCT         = 525 // { int rctl_get_racct(const void *inbufp, \\\n\tSYS_RCTL_GET_RULES         = 526 // { int rctl_get_rules(const void *inbufp, \\\n\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\\n\tSYS_RCTL_ADD_RULE          = 528 // { int rctl_add_rule(const void *inbufp, \\\n\tSYS_RCTL_REMOVE_RULE       = 529 // { int rctl_remove_rule(const void *inbufp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 338,
   "Snippet": "\tSYS_POSIX_FALLOCATE        = 530 // { int posix_fallocate(int fd, \\\n\tSYS_POSIX_FADVISE          = 531 // { int posix_fadvise(int fd, off_t offset, \\\n\tSYS_WAIT6                  = 532 // { int wait6(idtype_t idtype, id_t id, \\\n\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\\n\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 263,
   "Snippet": "\tSYS_THR_SELF               = 432 // { int thr_self(long *id); }\n\tSYS_THR_KILL               = 433 // { int thr_kill(long id, int sig); }\n\tSYS__UMTX_LOCK             = 434 // { int _umtx_lock(struct umtx *umtx); }\n\tSYS__UMTX_UNLOCK           = 435 // { int _umtx_unlock(struct umtx *umtx); }\n\tSYS_JAIL_ATTACH            = 436 // { int jail_attach(int jid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 324,
   "Snippet": "\tSYS___CAP_RIGHTS_GET       = 515 // { int __cap_rights_get(int version, \\\n\tSYS_CAP_ENTER              = 516 // { int cap_enter(void); }\n\tSYS_CAP_GETMODE            = 517 // { int cap_getmode(u_int *modep); }\n\tSYS_PDFORK                 = 518 // { int pdfork(int *fdp, int flags); }\n\tSYS_PDKILL                 = 519 // { int pdkill(int fd, int signum); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 298,
   "Snippet": "\tSYS_CPUSET                 = 484 // { int cpuset(cpusetid_t *setid); }\n\tSYS_CPUSET_SETID           = 485 // { int cpuset_setid(cpuwhich_t which, id_t id, \\\n\tSYS_CPUSET_GETID           = 486 // { int cpuset_getid(cpulevel_t level, \\\n\tSYS_CPUSET_GETAFFINITY     = 487 // { int cpuset_getaffinity(cpulevel_t level, \\\n\tSYS_CPUSET_SETAFFINITY     = 488 // { int cpuset_setaffinity(cpulevel_t level, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 182,
   "Snippet": "\tSYS_KLDFIRSTMOD            = 309 // { int kldfirstmod(int fileid); }\n\tSYS_GETSID                 = 310 // { int getsid(pid_t pid); }\n\tSYS_SETRESUID              = 311 // { int setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_SETRESGID              = 312 // { int setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_YIELD                  = 321 // { int yield(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 228,
   "Snippet": "\tSYS___MAC_GET_PROC         = 384 // { int __mac_get_proc(struct mac *mac_p); }\n\tSYS___MAC_SET_PROC         = 385 // { int __mac_set_proc(struct mac *mac_p); }\n\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\\n\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\\n\tSYS___MAC_SET_FD           = 388 // { int __mac_set_fd(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 211,
   "Snippet": "\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\\n\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, \\\n\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\\n\tSYS_EXTATTR_SET_FILE       = 356 // { ssize_t extattr_set_file( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 215,
   "Snippet": "\tSYS_EXTATTR_SET_FILE       = 356 // { ssize_t extattr_set_file( \\\n\tSYS_EXTATTR_GET_FILE       = 357 // { ssize_t extattr_get_file( \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_GETRESGID              = 361 // { int getresgid(gid_t *rgid, gid_t *egid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 285,
   "Snippet": "\tSYS_SIGQUEUE               = 456 // { int sigqueue(pid_t pid, int signum, void *value); }\n\tSYS_ABORT2                 = 463 // { int abort2(const char *why, int nargs, void **args); }\n\tSYS_THR_SET_NAME           = 464 // { int thr_set_name(long id, const char *name); }\n\tSYS_RTPRIO_THREAD          = 466 // { int rtprio_thread(int function, \\\n\tSYS_PREAD                  = 475 // { ssize_t pread(int fd, void *buf, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 194,
   "Snippet": "\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }\n\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }\n\tSYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }\n\tSYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, \\\n\tSYS_UTRACE                 = 335 // { int utrace(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 335,
   "Snippet": "\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\\n\tSYS_RCTL_ADD_RULE          = 528 // { int rctl_add_rule(const void *inbufp, \\\n\tSYS_RCTL_REMOVE_RULE       = 529 // { int rctl_remove_rule(const void *inbufp, \\\n\tSYS_POSIX_FALLOCATE        = 530 // { int posix_fallocate(int fd, \\\n\tSYS_POSIX_FADVISE          = 531 // { int posix_fadvise(int fd, off_t offset, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 242,
   "Snippet": "\tSYS_FHSTATFS               = 398 // { int fhstatfs(const struct fhandle *u_fhp, \\\n\tSYS___MAC_GET_PID          = 409 // { int __mac_get_pid(pid_t pid, \\\n\tSYS___MAC_GET_LINK         = 410 // { int __mac_get_link(const char *path_p, \\\n\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\\n\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 207,
   "Snippet": "\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 289,
   "Snippet": "\tSYS_PREAD                  = 475 // { ssize_t pread(int fd, void *buf, \\\n\tSYS_PWRITE                 = 476 // { ssize_t pwrite(int fd, const void *buf, \\\n\tSYS_MMAP                   = 477 // { caddr_t mmap(caddr_t addr, size_t len, \\\n\tSYS_LSEEK                  = 478 // { off_t lseek(int fd, off_t offset, \\\n\tSYS_TRUNCATE               = 479 // { int truncate(char *path, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 227,
   "Snippet": "\tSYS_NMOUNT                 = 378 // { int nmount(struct iovec *iovp, \\\n\tSYS___MAC_GET_PROC         = 384 // { int __mac_get_proc(struct mac *mac_p); }\n\tSYS___MAC_SET_PROC         = 385 // { int __mac_set_proc(struct mac *mac_p); }\n\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\\n\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 191,
   "Snippet": "\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int \\\n\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }\n\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }\n\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 297,
   "Snippet": "\tSYS_SHM_UNLINK             = 483 // { int shm_unlink(const char *path); }\n\tSYS_CPUSET                 = 484 // { int cpuset(cpusetid_t *setid); }\n\tSYS_CPUSET_SETID           = 485 // { int cpuset_setid(cpuwhich_t which, id_t id, \\\n\tSYS_CPUSET_GETID           = 486 // { int cpuset_getid(cpulevel_t level, \\\n\tSYS_CPUSET_GETAFFINITY     = 487 // { int cpuset_getaffinity(cpulevel_t level, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 193,
   "Snippet": "\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }\n\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }\n\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }\n\tSYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }\n\tSYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 9,
   "Snippet": "\nconst (\n\t// SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int\n\tSYS_EXIT                   = 1   // { void sys_exit(int rval); } exit \\\n\tSYS_FORK                   = 2   // { int fork(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 205,
   "Snippet": "\tSYS_SIGWAITINFO            = 346 // { int sigwaitinfo(const sigset_t *set, \\\n\tSYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \\\n\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 252,
   "Snippet": "\tSYS_GETCONTEXT             = 421 // { int getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT             = 422 // { int setcontext( \\\n\tSYS_SWAPCONTEXT            = 423 // { int swapcontext(struct __ucontext *oucp, \\\n\tSYS_SWAPOFF                = 424 // { int swapoff(const char *name); }\n\tSYS___ACL_GET_LINK         = 425 // { int __acl_get_link(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 189,
   "Snippet": "\tSYS___GETCWD               = 326 // { int __getcwd(char *buf, u_int buflen); }\n\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, \\\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int \\\n\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 142,
   "Snippet": "\tSYS_GETPGID                = 207 // { int getpgid(pid_t pid); }\n\tSYS_POLL                   = 209 // { int poll(struct pollfd *fds, u_int nfds, \\\n\tSYS_CLOCK_GETTIME          = 232 // { int clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime( \\\n\tSYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 290,
   "Snippet": "\tSYS_PWRITE                 = 476 // { ssize_t pwrite(int fd, const void *buf, \\\n\tSYS_MMAP                   = 477 // { caddr_t mmap(caddr_t addr, size_t len, \\\n\tSYS_LSEEK                  = 478 // { off_t lseek(int fd, off_t offset, \\\n\tSYS_TRUNCATE               = 479 // { int truncate(char *path, off_t length); }\n\tSYS_FTRUNCATE              = 480 // { int ftruncate(int fd, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 231,
   "Snippet": "\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\\n\tSYS___MAC_SET_FD           = 388 // { int __mac_set_fd(int fd, \\\n\tSYS___MAC_SET_FILE         = 389 // { int __mac_set_file(const char *path_p, \\\n\tSYS_KENV                   = 390 // { int kenv(int what, const char *name, \\\n\tSYS_LCHFLAGS               = 391 // { int lchflags(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 132,
   "Snippet": "\tSYS_GETDIRENTRIES          = 196 // { int getdirentries(int fd, char *buf, \\\n\tSYS_FREEBSD6_MMAP          = 197 // { caddr_t freebsd6_mmap(caddr_t addr, \\\n\tSYS_FREEBSD6_LSEEK         = 199 // { off_t freebsd6_lseek(int fd, int pad, \\\n\tSYS_FREEBSD6_TRUNCATE      = 200 // { int freebsd6_truncate(char *path, int pad, \\\n\tSYS_FREEBSD6_FTRUNCATE     = 201 // { int freebsd6_ftruncate(int fd, int pad, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 188,
   "Snippet": "\tSYS_MUNLOCKALL             = 325 // { int munlockall(void); }\n\tSYS___GETCWD               = 326 // { int __getcwd(char *buf, u_int buflen); }\n\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, \\\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 135,
   "Snippet": "\tSYS_FREEBSD6_TRUNCATE      = 200 // { int freebsd6_truncate(char *path, int pad, \\\n\tSYS_FREEBSD6_FTRUNCATE     = 201 // { int freebsd6_ftruncate(int fd, int pad, \\\n\tSYS___SYSCTL               = 202 // { int __sysctl(int *name, u_int namelen, \\\n\tSYS_MLOCK                  = 203 // { int mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK                = 204 // { int munlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 220,
   "Snippet": "\tSYS_KQUEUE                 = 362 // { int kqueue(void); }\n\tSYS_KEVENT                 = 363 // { int kevent(int fd, \\\n\tSYS_EXTATTR_SET_FD         = 371 // { ssize_t extattr_set_fd(int fd, \\\n\tSYS_EXTATTR_GET_FD         = 372 // { ssize_t extattr_get_fd(int fd, \\\n\tSYS_EXTATTR_DELETE_FD      = 373 // { int extattr_delete_fd(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 267,
   "Snippet": "\tSYS_JAIL_ATTACH            = 436 // { int jail_attach(int jid); }\n\tSYS_EXTATTR_LIST_FD        = 437 // { ssize_t extattr_list_fd(int fd, \\\n\tSYS_EXTATTR_LIST_FILE      = 438 // { ssize_t extattr_list_file( \\\n\tSYS_EXTATTR_LIST_LINK      = 439 // { ssize_t extattr_list_link( \\\n\tSYS_THR_SUSPEND            = 442 // { int thr_suspend( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 293,
   "Snippet": "\tSYS_TRUNCATE               = 479 // { int truncate(char *path, off_t length); }\n\tSYS_FTRUNCATE              = 480 // { int ftruncate(int fd, off_t length); }\n\tSYS_THR_KILL2              = 481 // { int thr_kill2(pid_t pid, long id, int sig); }\n\tSYS_SHM_OPEN               = 482 // { int shm_open(const char *path, int flags, \\\n\tSYS_SHM_UNLINK             = 483 // { int shm_unlink(const char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 245,
   "Snippet": "\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\\n\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\\n\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\\n\tSYS_EXTATTR_DELETE_LINK    = 414 // { int extattr_delete_link( \\\n\tSYS___MAC_EXECVE           = 415 // { int __mac_execve(char *fname, char **argv, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 210,
   "Snippet": "\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\\n\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, \\\n\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 254,
   "Snippet": "\tSYS_SWAPCONTEXT            = 423 // { int swapcontext(struct __ucontext *oucp, \\\n\tSYS_SWAPOFF                = 424 // { int swapoff(const char *name); }\n\tSYS___ACL_GET_LINK         = 425 // { int __acl_get_link(const char *path, \\\n\tSYS___ACL_SET_LINK         = 426 // { int __acl_set_link(const char *path, \\\n\tSYS___ACL_DELETE_LINK      = 427 // { int __acl_delete_link(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 257,
   "Snippet": "\tSYS___ACL_SET_LINK         = 426 // { int __acl_set_link(const char *path, \\\n\tSYS___ACL_DELETE_LINK      = 427 // { int __acl_delete_link(const char *path, \\\n\tSYS___ACL_ACLCHECK_LINK    = 428 // { int __acl_aclcheck_link(const char *path, \\\n\tSYS_SIGWAIT                = 429 // { int sigwait(const sigset_t *set, \\\n\tSYS_THR_CREATE             = 430 // { int thr_create(ucontext_t *ctx, long *id, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 268,
   "Snippet": "\tSYS_EXTATTR_LIST_FD        = 437 // { ssize_t extattr_list_fd(int fd, \\\n\tSYS_EXTATTR_LIST_FILE      = 438 // { ssize_t extattr_list_file( \\\n\tSYS_EXTATTR_LIST_LINK      = 439 // { ssize_t extattr_list_link( \\\n\tSYS_THR_SUSPEND            = 442 // { int thr_suspend( \\\n\tSYS_THR_WAKE               = 443 // { int thr_wake(long id); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 241,
   "Snippet": "\tSYS_FSTATFS                = 397 // { int fstatfs(int fd, struct statfs *buf); }\n\tSYS_FHSTATFS               = 398 // { int fhstatfs(const struct fhandle *u_fhp, \\\n\tSYS___MAC_GET_PID          = 409 // { int __mac_get_pid(pid_t pid, \\\n\tSYS___MAC_GET_LINK         = 410 // { int __mac_get_link(const char *path_p, \\\n\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 247,
   "Snippet": "\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\\n\tSYS_EXTATTR_DELETE_LINK    = 414 // { int extattr_delete_link( \\\n\tSYS___MAC_EXECVE           = 415 // { int __mac_execve(char *fname, char **argv, \\\n\tSYS_SIGACTION              = 416 // { int sigaction(int sig, \\\n\tSYS_SIGRETURN              = 417 // { int sigreturn( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 266,
   "Snippet": "\tSYS__UMTX_UNLOCK           = 435 // { int _umtx_unlock(struct umtx *umtx); }\n\tSYS_JAIL_ATTACH            = 436 // { int jail_attach(int jid); }\n\tSYS_EXTATTR_LIST_FD        = 437 // { ssize_t extattr_list_fd(int fd, \\\n\tSYS_EXTATTR_LIST_FILE      = 438 // { ssize_t extattr_list_file( \\\n\tSYS_EXTATTR_LIST_LINK      = 439 // { ssize_t extattr_list_link( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 250,
   "Snippet": "\tSYS_SIGACTION              = 416 // { int sigaction(int sig, \\\n\tSYS_SIGRETURN              = 417 // { int sigreturn( \\\n\tSYS_GETCONTEXT             = 421 // { int getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT             = 422 // { int setcontext( \\\n\tSYS_SWAPCONTEXT            = 423 // { int swapcontext(struct __ucontext *oucp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 190,
   "Snippet": "\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, \\\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int \\\n\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }\n\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 154,
   "Snippet": "\tSYS_FFCLOCK_SETESTIMATE    = 242 // { int ffclock_setestimate( \\\n\tSYS_FFCLOCK_GETESTIMATE    = 243 // { int ffclock_getestimate( \\\n\tSYS_CLOCK_GETCPUCLOCKID2   = 247 // { int clock_getcpuclockid2(id_t id,\\\n\tSYS_NTP_GETTIME            = 248 // { int ntp_gettime(struct ntptimeval *ntvp); }\n\tSYS_MINHERIT               = 250 // { int minherit(void *addr, size_t len, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 229,
   "Snippet": "\tSYS___MAC_SET_PROC         = 385 // { int __mac_set_proc(struct mac *mac_p); }\n\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\\n\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\\n\tSYS___MAC_SET_FD           = 388 // { int __mac_set_fd(int fd, \\\n\tSYS___MAC_SET_FILE         = 389 // { int __mac_set_file(const char *path_p, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 256,
   "Snippet": "\tSYS___ACL_GET_LINK         = 425 // { int __acl_get_link(const char *path, \\\n\tSYS___ACL_SET_LINK         = 426 // { int __acl_set_link(const char *path, \\\n\tSYS___ACL_DELETE_LINK      = 427 // { int __acl_delete_link(const char *path, \\\n\tSYS___ACL_ACLCHECK_LINK    = 428 // { int __acl_aclcheck_link(const char *path, \\\n\tSYS_SIGWAIT                = 429 // { int sigwait(const sigset_t *set, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 259,
   "Snippet": "\tSYS___ACL_ACLCHECK_LINK    = 428 // { int __acl_aclcheck_link(const char *path, \\\n\tSYS_SIGWAIT                = 429 // { int sigwait(const sigset_t *set, \\\n\tSYS_THR_CREATE             = 430 // { int thr_create(ucontext_t *ctx, long *id, \\\n\tSYS_THR_EXIT               = 431 // { void thr_exit(long *state); }\n\tSYS_THR_SELF               = 432 // { int thr_self(long *id); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 223,
   "Snippet": "\tSYS_EXTATTR_GET_FD         = 372 // { ssize_t extattr_get_fd(int fd, \\\n\tSYS_EXTATTR_DELETE_FD      = 373 // { int extattr_delete_fd(int fd, \\\n\tSYS___SETUGID              = 374 // { int __setugid(int flag); }\n\tSYS_EACCESS                = 376 // { int eaccess(char *path, int amode); }\n\tSYS_NMOUNT                 = 378 // { int nmount(struct iovec *iovp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 144,
   "Snippet": "\tSYS_CLOCK_GETTIME          = 232 // { int clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime( \\\n\tSYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \\\n\tSYS_KTIMER_CREATE          = 235 // { int ktimer_create(clockid_t clock_id, \\\n\tSYS_KTIMER_DELETE          = 236 // { int ktimer_delete(int timerid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 103,
   "Snippet": "\tSYS_FLOCK                  = 131 // { int flock(int fd, int how); }\n\tSYS_MKFIFO                 = 132 // { int mkfifo(char *path, int mode); }\n\tSYS_SENDTO                 = 133 // { int sendto(int s, caddr_t buf, size_t len, \\\n\tSYS_SHUTDOWN               = 134 // { int shutdown(int s, int how); }\n\tSYS_SOCKETPAIR             = 135 // { int socketpair(int domain, int type, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 131,
   "Snippet": "\tSYS_SETRLIMIT              = 195 // { int setrlimit(u_int which, \\\n\tSYS_GETDIRENTRIES          = 196 // { int getdirentries(int fd, char *buf, \\\n\tSYS_FREEBSD6_MMAP          = 197 // { caddr_t freebsd6_mmap(caddr_t addr, \\\n\tSYS_FREEBSD6_LSEEK         = 199 // { off_t freebsd6_lseek(int fd, int pad, \\\n\tSYS_FREEBSD6_TRUNCATE      = 200 // { int freebsd6_truncate(char *path, int pad, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 243,
   "Snippet": "\tSYS___MAC_GET_PID          = 409 // { int __mac_get_pid(pid_t pid, \\\n\tSYS___MAC_GET_LINK         = 410 // { int __mac_get_link(const char *path_p, \\\n\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\\n\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\\n\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 204,
   "Snippet": "\tSYS_SIGTIMEDWAIT           = 345 // { int sigtimedwait(const sigset_t *set, \\\n\tSYS_SIGWAITINFO            = 346 // { int sigwaitinfo(const sigset_t *set, \\\n\tSYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \\\n\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 322,
   "Snippet": "\tSYS_CLOSEFROM              = 509 // { int closefrom(int lowfd); }\n\tSYS_LPATHCONF              = 513 // { int lpathconf(char *path, int name); }\n\tSYS___CAP_RIGHTS_GET       = 515 // { int __cap_rights_get(int version, \\\n\tSYS_CAP_ENTER              = 516 // { int cap_enter(void); }\n\tSYS_CAP_GETMODE            = 517 // { int cap_getmode(u_int *modep); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 206,
   "Snippet": "\tSYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \\\n\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 226,
   "Snippet": "\tSYS_EACCESS                = 376 // { int eaccess(char *path, int amode); }\n\tSYS_NMOUNT                 = 378 // { int nmount(struct iovec *iovp, \\\n\tSYS___MAC_GET_PROC         = 384 // { int __mac_get_proc(struct mac *mac_p); }\n\tSYS___MAC_SET_PROC         = 385 // { int __mac_set_proc(struct mac *mac_p); }\n\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 79,
   "Snippet": "\tSYS_GETITIMER              = 86  // { int getitimer(u_int which, \\\n\tSYS_GETDTABLESIZE          = 89  // { int getdtablesize(void); }\n\tSYS_DUP2                   = 90  // { int dup2(u_int from, u_int to); }\n\tSYS_FCNTL                  = 92  // { int fcntl(int fd, int cmd, long arg); }\n\tSYS_SELECT                 = 93  // { int select(int nd, fd_set *in, fd_set *ou, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 187,
   "Snippet": "\tSYS_MLOCKALL               = 324 // { int mlockall(int how); }\n\tSYS_MUNLOCKALL             = 325 // { int munlockall(void); }\n\tSYS___GETCWD               = 326 // { int __getcwd(char *buf, u_int buflen); }\n\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, \\\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 145,
   "Snippet": "\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime( \\\n\tSYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \\\n\tSYS_KTIMER_CREATE          = 235 // { int ktimer_create(clockid_t clock_id, \\\n\tSYS_KTIMER_DELETE          = 236 // { int ktimer_delete(int timerid); }\n\tSYS_KTIMER_SETTIME         = 237 // { int ktimer_settime(int timerid, int flags, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 222,
   "Snippet": "\tSYS_EXTATTR_SET_FD         = 371 // { ssize_t extattr_set_fd(int fd, \\\n\tSYS_EXTATTR_GET_FD         = 372 // { ssize_t extattr_get_fd(int fd, \\\n\tSYS_EXTATTR_DELETE_FD      = 373 // { int extattr_delete_fd(int fd, \\\n\tSYS___SETUGID              = 374 // { int __setugid(int flag); }\n\tSYS_EACCESS                = 376 // { int eaccess(char *path, int amode); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 300,
   "Snippet": "\tSYS_CPUSET_GETID           = 486 // { int cpuset_getid(cpulevel_t level, \\\n\tSYS_CPUSET_GETAFFINITY     = 487 // { int cpuset_getaffinity(cpulevel_t level, \\\n\tSYS_CPUSET_SETAFFINITY     = 488 // { int cpuset_setaffinity(cpulevel_t level, \\\n\tSYS_FACCESSAT              = 489 // { int faccessat(int fd, char *path, int amode, \\\n\tSYS_FCHMODAT               = 490 // { int fchmodat(int fd, char *path, mode_t mode, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 334,
   "Snippet": "\tSYS_RCTL_GET_RULES         = 526 // { int rctl_get_rules(const void *inbufp, \\\n\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\\n\tSYS_RCTL_ADD_RULE          = 528 // { int rctl_add_rule(const void *inbufp, \\\n\tSYS_RCTL_REMOVE_RULE       = 529 // { int rctl_remove_rule(const void *inbufp, \\\n\tSYS_POSIX_FALLOCATE        = 530 // { int posix_fallocate(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 116,
   "Snippet": "\tSYS_SYSARCH                = 165 // { int sysarch(int op, char *parms); }\n\tSYS_RTPRIO                 = 166 // { int rtprio(int function, pid_t pid, \\\n\tSYS_FREEBSD6_PREAD         = 173 // { ssize_t freebsd6_pread(int fd, void *buf, \\\n\tSYS_FREEBSD6_PWRITE        = 174 // { ssize_t freebsd6_pwrite(int fd, \\\n\tSYS_SETFIB                 = 175 // { int setfib(int fibnum); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 214,
   "Snippet": "\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\\n\tSYS_EXTATTR_SET_FILE       = 356 // { ssize_t extattr_set_file( \\\n\tSYS_EXTATTR_GET_FILE       = 357 // { ssize_t extattr_get_file( \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 349,
   "Snippet": "\tSYS_ACCEPT4                = 541 // { int accept4(int s, \\\n\tSYS_PIPE2                  = 542 // { int pipe2(int *fildes, int flags); }\n\tSYS_PROCCTL                = 544 // { int procctl(idtype_t idtype, id_t id, \\\n\tSYS_PPOLL                  = 545 // { int ppoll(struct pollfd *fds, u_int nfds, \\\n\tSYS_FUTIMENS               = 546 // { int futimens(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 244,
   "Snippet": "\tSYS___MAC_GET_LINK         = 410 // { int __mac_get_link(const char *path_p, \\\n\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\\n\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\\n\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\\n\tSYS_EXTATTR_DELETE_LINK    = 414 // { int extattr_delete_link( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 230,
   "Snippet": "\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\\n\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\\n\tSYS___MAC_SET_FD           = 388 // { int __mac_set_fd(int fd, \\\n\tSYS___MAC_SET_FILE         = 389 // { int __mac_set_file(const char *path_p, \\\n\tSYS_KENV                   = 390 // { int kenv(int what, const char *name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 81,
   "Snippet": "\tSYS_DUP2                   = 90  // { int dup2(u_int from, u_int to); }\n\tSYS_FCNTL                  = 92  // { int fcntl(int fd, int cmd, long arg); }\n\tSYS_SELECT                 = 93  // { int select(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_FSYNC                  = 95  // { int fsync(int fd); }\n\tSYS_SETPRIORITY            = 96  // { int setpriority(int which, int who, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 209,
   "Snippet": "\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\\n\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 208,
   "Snippet": "\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 343,
   "Snippet": "\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\\n\tSYS_CAP_FCNTLS_LIMIT       = 536 // { int cap_fcntls_limit(int fd, \\\n\tSYS_CAP_FCNTLS_GET         = 537 // { int cap_fcntls_get(int fd, \\\n\tSYS_BINDAT                 = 538 // { int bindat(int fd, int s, caddr_t name, \\\n\tSYS_CONNECTAT              = 539 // { int connectat(int fd, int s, caddr_t name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 341,
   "Snippet": "\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\\n\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\\n\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\\n\tSYS_CAP_FCNTLS_LIMIT       = 536 // { int cap_fcntls_limit(int fd, \\\n\tSYS_CAP_FCNTLS_GET         = 537 // { int cap_fcntls_get(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 282,
   "Snippet": "\tSYS_AUDITCTL               = 453 // { int auditctl(char *path); }\n\tSYS__UMTX_OP               = 454 // { int _umtx_op(void *obj, int op, \\\n\tSYS_THR_NEW                = 455 // { int thr_new(struct thr_param *param, \\\n\tSYS_SIGQUEUE               = 456 // { int sigqueue(pid_t pid, int signum, void *value); }\n\tSYS_ABORT2                 = 463 // { int abort2(const char *why, int nargs, void **args); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 246,
   "Snippet": "\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\\n\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\\n\tSYS_EXTATTR_DELETE_LINK    = 414 // { int extattr_delete_link( \\\n\tSYS___MAC_EXECVE           = 415 // { int __mac_execve(char *fname, char **argv, \\\n\tSYS_SIGACTION              = 416 // { int sigaction(int sig, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
   "Line": 213,
   "Snippet": "\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, \\\n\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\\n\tSYS_EXTATTR_SET_FILE       = 356 // { ssize_t extattr_set_file( \\\n\tSYS_EXTATTR_GET_FILE       = 357 // { ssize_t extattr_get_file( \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 146,
   "Snippet": "\tSYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS_PWRITEV              = 290 // { ssize_t|sys||pwritev(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS___GETCWD             = 296 // { int|sys||__getcwd(char *bufp, size_t length); }\n\tSYS_FCHROOT              = 297 // { int|sys||fchroot(int fd); }\n\tSYS_LCHFLAGS             = 304 // { int|sys||lchflags(const char *path, u_long flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 153,
   "Snippet": "\tSYS_GETCONTEXT           = 307 // { int|sys||getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }\n\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }\n\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }\n\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 177,
   "Snippet": "\tSYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }\n\tSYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }\n\tSYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }\n\tSYS_SCHED_YIELD          = 350 // { int|sys||sched_yield(void); }\n\tSYS_FSYNC_RANGE          = 354 // { int|sys||fsync_range(int fd, int flags, off_t start, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 155,
   "Snippet": "\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }\n\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }\n\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }\n\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }\n\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 145,
   "Snippet": "\tSYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }\n\tSYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS_PWRITEV              = 290 // { ssize_t|sys||pwritev(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS___GETCWD             = 296 // { int|sys||__getcwd(char *bufp, size_t length); }\n\tSYS_FCHROOT              = 297 // { int|sys||fchroot(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 151,
   "Snippet": "\tSYS_ISSETUGID            = 305 // { int|sys||issetugid(void); }\n\tSYS_UTRACE               = 306 // { int|sys||utrace(const char *label, void *addr, size_t len); }\n\tSYS_GETCONTEXT           = 307 // { int|sys||getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }\n\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 228,
   "Snippet": "\tSYS_SETITIMER            = 425 // { int|sys|50|setitimer(int which, const struct itimerval *itv, struct itimerval *oitv); }\n\tSYS_GETITIMER            = 426 // { int|sys|50|getitimer(int which, struct itimerval *itv); }\n\tSYS_CLOCK_GETTIME        = 427 // { int|sys|50|clock_gettime(clockid_t clock_id, struct timespec *tp); }\n\tSYS_CLOCK_SETTIME        = 428 // { int|sys|50|clock_settime(clockid_t clock_id, const struct timespec *tp); }\n\tSYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 214,
   "Snippet": "\tSYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }\n\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }\n\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }\n\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }\n\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 232,
   "Snippet": "\tSYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }\n\tSYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }\n\tSYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }\n\tSYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }\n\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 159,
   "Snippet": "\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }\n\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }\n\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }\n\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }\n\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 248,
   "Snippet": "\tSYS_NTP_GETTIME          = 448 // { int|sys|50|ntp_gettime(struct ntptimeval *ntvp); }\n\tSYS_WAIT4                = 449 // { int|sys|50|wait4(pid_t pid, int *status, int options, struct rusage *rusage); }\n\tSYS_MKNOD                = 450 // { int|sys|50|mknod(const char *path, mode_t mode, dev_t dev); }\n\tSYS_FHSTAT               = 451 // { int|sys|50|fhstat(const void *fhp, size_t fh_size, struct stat *sb); }\n\tSYS_PIPE2                = 453 // { int|sys||pipe2(int *fildes, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 87,
   "Snippet": "\tSYS_FLOCK                = 131 // { int|sys||flock(int fd, int how); }\n\tSYS_MKFIFO               = 132 // { int|sys||mkfifo(const char *path, mode_t mode); }\n\tSYS_SENDTO               = 133 // { ssize_t|sys||sendto(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen); }\n\tSYS_SHUTDOWN             = 134 // { int|sys||shutdown(int s, int how); }\n\tSYS_SOCKETPAIR           = 135 // { int|sys||socketpair(int domain, int type, int protocol, int *rsv); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 236,
   "Snippet": "\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }\n\tSYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_POLLTS               = 437 // { int|sys|50|pollts(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_STAT                 = 439 // { int|sys|50|stat(const char *path, struct stat *ub); }\n\tSYS_FSTAT                = 440 // { int|sys|50|fstat(int fd, struct stat *sb); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 142,
   "Snippet": "\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }\n\tSYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }\n\tSYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }\n\tSYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 271,
   "Snippet": "\tSYS_FUTIMENS             = 472 // { int|sys||futimens(int fd, const struct timespec *tptr); }\n\tSYS___QUOTACTL           = 473 // { int|sys||__quotactl(const char *path, struct quotactl_args *args); }\n\tSYS_POSIX_SPAWN          = 474 // { int|sys||posix_spawn(pid_t *pid, const char *path, const struct posix_spawn_file_actions *file_actions, const struct posix_spawnattr *attrp, char *const *argv, char *const *envp); }\n\tSYS_RECVMMSG             = 475 // { int|sys||recvmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct timespec *timeout); }\n\tSYS_SENDMMSG             = 476 // { int|sys||sendmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 215,
   "Snippet": "\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }\n\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }\n\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }\n\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }\n\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 25,
   "Snippet": "\tSYS_UNMOUNT              = 22  // { int|sys||unmount(const char *path, int flags); }\n\tSYS_SETUID               = 23  // { int|sys||setuid(uid_t uid); }\n\tSYS_GETUID               = 24  // { uid_t|sys||getuid_with_euid(void); }\n\tSYS_GETEUID              = 25  // { uid_t|sys||geteuid(void); }\n\tSYS_PTRACE               = 26  // { int|sys||ptrace(int req, pid_t pid, void *addr, int data); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 244,
   "Snippet": "\tSYS_MSGCTL               = 444 // { int|sys|50|msgctl(int msqid, int cmd, struct msqid_ds *buf); }\n\tSYS_GETRUSAGE            = 445 // { int|sys|50|getrusage(int who, struct rusage *rusage); }\n\tSYS_TIMER_SETTIME        = 446 // { int|sys|50|timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }\n\tSYS_TIMER_GETTIME        = 447 // { int|sys|50|timer_gettime(timer_t timerid, struct itimerspec *value); }\n\tSYS_NTP_GETTIME          = 448 // { int|sys|50|ntp_gettime(struct ntptimeval *ntvp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 186,
   "Snippet": "\tSYS_EXTATTRCTL           = 360 // { int|sys||extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FILE     = 361 // { int|sys||extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 139,
   "Snippet": "\tSYS_MSYNC                = 277 // { int|sys|13|msync(void *addr, size_t len, int flags); }\n\tSYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 229,
   "Snippet": "\tSYS_GETITIMER            = 426 // { int|sys|50|getitimer(int which, struct itimerval *itv); }\n\tSYS_CLOCK_GETTIME        = 427 // { int|sys|50|clock_gettime(clockid_t clock_id, struct timespec *tp); }\n\tSYS_CLOCK_SETTIME        = 428 // { int|sys|50|clock_settime(clockid_t clock_id, const struct timespec *tp); }\n\tSYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }\n\tSYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 22,
   "Snippet": "\tSYS_CHOWN                = 16  // { int|sys||chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_BREAK                = 17  // { int|sys||obreak(char *nsize); }\n\tSYS_GETPID               = 20  // { pid_t|sys||getpid_with_ppid(void); }\n\tSYS_UNMOUNT              = 22  // { int|sys||unmount(const char *path, int flags); }\n\tSYS_SETUID               = 23  // { int|sys||setuid(uid_t uid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 52,
   "Snippet": "\tSYS_REVOKE               = 56  // { int|sys||revoke(const char *path); }\n\tSYS_SYMLINK              = 57  // { int|sys||symlink(const char *path, const char *link); }\n\tSYS_READLINK             = 58  // { ssize_t|sys||readlink(const char *path, char *buf, size_t count); }\n\tSYS_EXECVE               = 59  // { int|sys||execve(const char *path, char * const *argp, char * const *envp); }\n\tSYS_UMASK                = 60  // { mode_t|sys||umask(mode_t newmask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 144,
   "Snippet": "\tSYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }\n\tSYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }\n\tSYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS_PWRITEV              = 290 // { ssize_t|sys||pwritev(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS___GETCWD             = 296 // { int|sys||__getcwd(char *bufp, size_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 83,
   "Snippet": "\tSYS_FCHMOD               = 124 // { int|sys||fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID             = 126 // { int|sys||setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID             = 127 // { int|sys||setregid(gid_t rgid, gid_t egid); }\n\tSYS_RENAME               = 128 // { int|sys||rename(const char *from, const char *to); }\n\tSYS_FLOCK                = 131 // { int|sys||flock(int fd, int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 175,
   "Snippet": "\tSYS_KQUEUE               = 344 // { int|sys||kqueue(void); }\n\tSYS__SCHED_SETPARAM      = 346 // { int|sys||_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params); }\n\tSYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }\n\tSYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }\n\tSYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 163,
   "Snippet": "\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }\n\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }\n\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }\n\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }\n\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 261,
   "Snippet": "\tSYS_FACCESSAT            = 462 // { int|sys||faccessat(int fd, const char *path, int amode, int flag); }\n\tSYS_FCHMODAT             = 463 // { int|sys||fchmodat(int fd, const char *path, mode_t mode, int flag); }\n\tSYS_FCHOWNAT             = 464 // { int|sys||fchownat(int fd, const char *path, uid_t owner, gid_t group, int flag); }\n\tSYS_FEXECVE              = 465 // { int|sys||fexecve(int fd, char * const *argp, char * const *envp); }\n\tSYS_FSTATAT              = 466 // { int|sys||fstatat(int fd, const char *path, struct stat *buf, int flag); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 168,
   "Snippet": "\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }\n\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }\n\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }\n\tSYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }\n\tSYS_PMC_GET_INFO         = 341 // { int|sys||pmc_get_info(int ctr, int op, void *args); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 234,
   "Snippet": "\tSYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }\n\tSYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }\n\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }\n\tSYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_POLLTS               = 437 // { int|sys|50|pollts(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 12,
   "Snippet": "\tSYS_FORK                 = 2   // { int|sys||fork(void); }\n\tSYS_READ                 = 3   // { ssize_t|sys||read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE                = 4   // { ssize_t|sys||write(int fd, const void *buf, size_t nbyte); }\n\tSYS_OPEN                 = 5   // { int|sys||open(const char *path, int flags, ... mode_t mode); }\n\tSYS_CLOSE                = 6   // { int|sys||close(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 67,
   "Snippet": "\tSYS_SETGROUPS            = 80  // { int|sys||setgroups(int gidsetsize, const gid_t *gidset); }\n\tSYS_GETPGRP              = 81  // { int|sys||getpgrp(void); }\n\tSYS_SETPGID              = 82  // { int|sys||setpgid(pid_t pid, pid_t pgid); }\n\tSYS_DUP2                 = 90  // { int|sys||dup2(int from, int to); }\n\tSYS_FCNTL                = 92  // { int|sys||fcntl(int fd, int cmd, ... void *arg); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 105,
   "Snippet": "\tSYS_SETRLIMIT            = 195 // { int|sys||setrlimit(int which, const struct rlimit *rlp); }\n\tSYS_MMAP                 = 197 // { void *|sys||mmap(void *addr, size_t len, int prot, int flags, int fd, long PAD, off_t pos); }\n\tSYS_LSEEK                = 199 // { off_t|sys||lseek(int fd, int PAD, off_t offset, int whence); }\n\tSYS_TRUNCATE             = 200 // { int|sys||truncate(const char *path, int PAD, off_t length); }\n\tSYS_FTRUNCATE            = 201 // { int|sys||ftruncate(int fd, int PAD, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 20,
   "Snippet": "\tSYS_FCHDIR               = 13  // { int|sys||fchdir(int fd); }\n\tSYS_CHMOD                = 15  // { int|sys||chmod(const char *path, mode_t mode); }\n\tSYS_CHOWN                = 16  // { int|sys||chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_BREAK                = 17  // { int|sys||obreak(char *nsize); }\n\tSYS_GETPID               = 20  // { pid_t|sys||getpid_with_ppid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 140,
   "Snippet": "\tSYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }\n\tSYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 166,
   "Snippet": "\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }\n\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }\n\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }\n\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }\n\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 94,
   "Snippet": "\tSYS_SETSID               = 147 // { int|sys||setsid(void); }\n\tSYS_SYSARCH              = 165 // { int|sys||sysarch(int op, void *parms); }\n\tSYS_PREAD                = 173 // { ssize_t|sys||pread(int fd, void *buf, size_t nbyte, int PAD, off_t offset); }\n\tSYS_PWRITE               = 174 // { ssize_t|sys||pwrite(int fd, const void *buf, size_t nbyte, int PAD, off_t offset); }\n\tSYS_NTP_ADJTIME          = 176 // { int|sys||ntp_adjtime(struct timex *tp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 154,
   "Snippet": "\tSYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }\n\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }\n\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }\n\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }\n\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 136,
   "Snippet": "\tSYS_MINHERIT             = 273 // { int|sys||minherit(void *addr, size_t len, int inherit); }\n\tSYS_LCHMOD               = 274 // { int|sys||lchmod(const char *path, mode_t mode); }\n\tSYS_LCHOWN               = 275 // { int|sys||lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_MSYNC                = 277 // { int|sys|13|msync(void *addr, size_t len, int flags); }\n\tSYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 126,
   "Snippet": "\tSYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }\n\tSYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }\n\tSYS_TIMER_GETOVERRUN     = 239 // { int|sys||timer_getoverrun(timer_t timerid); }\n\tSYS_FDATASYNC            = 241 // { int|sys||fdatasync(int fd); }\n\tSYS_MLOCKALL             = 242 // { int|sys||mlockall(int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 216,
   "Snippet": "\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }\n\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }\n\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }\n\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }\n\tSYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 245,
   "Snippet": "\tSYS_GETRUSAGE            = 445 // { int|sys|50|getrusage(int who, struct rusage *rusage); }\n\tSYS_TIMER_SETTIME        = 446 // { int|sys|50|timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }\n\tSYS_TIMER_GETTIME        = 447 // { int|sys|50|timer_gettime(timer_t timerid, struct itimerspec *value); }\n\tSYS_NTP_GETTIME          = 448 // { int|sys|50|ntp_gettime(struct ntptimeval *ntvp); }\n\tSYS_WAIT4                = 449 // { int|sys|50|wait4(pid_t pid, int *status, int options, struct rusage *rusage); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 158,
   "Snippet": "\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }\n\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }\n\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }\n\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }\n\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 45,
   "Snippet": "\tSYS_PROFIL               = 44  // { int|sys||profil(char *samples, size_t size, u_long offset, u_int scale); }\n\tSYS_KTRACE               = 45  // { int|sys||ktrace(const char *fname, int ops, int facs, pid_t pid); }\n\tSYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }\n\tSYS___GETLOGIN           = 49  // { int|sys||__getlogin(char *namebuf, size_t namelen); }\n\tSYS___SETLOGIN           = 50  // { int|sys||__setlogin(const char *namebuf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 46,
   "Snippet": "\tSYS_KTRACE               = 45  // { int|sys||ktrace(const char *fname, int ops, int facs, pid_t pid); }\n\tSYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }\n\tSYS___GETLOGIN           = 49  // { int|sys||__getlogin(char *namebuf, size_t namelen); }\n\tSYS___SETLOGIN           = 50  // { int|sys||__setlogin(const char *namebuf); }\n\tSYS_ACCT                 = 51  // { int|sys||acct(const char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 132,
   "Snippet": "\tSYS_SIGQUEUEINFO         = 245 // { int|sys||sigqueueinfo(pid_t pid, const siginfo_t *info); }\n\tSYS_MODCTL               = 246 // { int|sys||modctl(int cmd, void *arg); }\n\tSYS___POSIX_RENAME       = 270 // { int|sys||__posix_rename(const char *from, const char *to); }\n\tSYS_SWAPCTL              = 271 // { int|sys||swapctl(int cmd, void *arg, int misc); }\n\tSYS_MINHERIT             = 273 // { int|sys||minherit(void *addr, size_t len, int inherit); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 141,
   "Snippet": "\tSYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }\n\tSYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }\n\tSYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 195,
   "Snippet": "\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_LINK    = 372 // { ssize_t|sys||extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_SETXATTR             = 375 // { int|sys||setxattr(const char *path, const char *name, const void *value, size_t size, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 194,
   "Snippet": "\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_LINK    = 372 // { ssize_t|sys||extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 193,
   "Snippet": "\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 43,
   "Snippet": "\tSYS_PIPE                 = 42  // { int|sys||pipe(void); }\n\tSYS_GETEGID              = 43  // { gid_t|sys||getegid(void); }\n\tSYS_PROFIL               = 44  // { int|sys||profil(char *samples, size_t size, u_long offset, u_int scale); }\n\tSYS_KTRACE               = 45  // { int|sys||ktrace(const char *fname, int ops, int facs, pid_t pid); }\n\tSYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 189,
   "Snippet": "\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 156,
   "Snippet": "\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }\n\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }\n\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }\n\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }\n\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 170,
   "Snippet": "\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }\n\tSYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }\n\tSYS_PMC_GET_INFO         = 341 // { int|sys||pmc_get_info(int ctr, int op, void *args); }\n\tSYS_PMC_CONTROL          = 342 // { int|sys||pmc_control(int ctr, int op, void *args); }\n\tSYS_RASCTL               = 343 // { int|sys||rasctl(void *addr, size_t len, int op); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 212,
   "Snippet": "\tSYS_SOCKET               = 394 // { int|sys|30|socket(int domain, int type, int protocol); }\n\tSYS_GETFH                = 395 // { int|sys|30|getfh(const char *fname, void *fhp, size_t *fh_size); }\n\tSYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }\n\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }\n\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 192,
   "Snippet": "\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 253,
   "Snippet": "\tSYS_DUP3                 = 454 // { int|sys||dup3(int from, int to, int flags); }\n\tSYS_KQUEUE1              = 455 // { int|sys||kqueue1(int flags); }\n\tSYS_PACCEPT              = 456 // { int|sys||paccept(int s, struct sockaddr *name, socklen_t *anamelen, const sigset_t *mask, int flags); }\n\tSYS_LINKAT               = 457 // { int|sys||linkat(int fd1, const char *name1, int fd2, const char *name2, int flags); }\n\tSYS_RENAMEAT             = 458 // { int|sys||renameat(int fromfd, const char *from, int tofd, const char *to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 47,
   "Snippet": "\tSYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }\n\tSYS___GETLOGIN           = 49  // { int|sys||__getlogin(char *namebuf, size_t namelen); }\n\tSYS___SETLOGIN           = 50  // { int|sys||__setlogin(const char *namebuf); }\n\tSYS_ACCT                 = 51  // { int|sys||acct(const char *path); }\n\tSYS_IOCTL                = 54  // { int|sys||ioctl(int fd, u_long com, ... void *data); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 167,
   "Snippet": "\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }\n\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }\n\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }\n\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }\n\tSYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 104,
   "Snippet": "\tSYS_GETRLIMIT            = 194 // { int|sys||getrlimit(int which, struct rlimit *rlp); }\n\tSYS_SETRLIMIT            = 195 // { int|sys||setrlimit(int which, const struct rlimit *rlp); }\n\tSYS_MMAP                 = 197 // { void *|sys||mmap(void *addr, size_t len, int prot, int flags, int fd, long PAD, off_t pos); }\n\tSYS_LSEEK                = 199 // { off_t|sys||lseek(int fd, int PAD, off_t offset, int whence); }\n\tSYS_TRUNCATE             = 200 // { int|sys||truncate(const char *path, int PAD, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 152,
   "Snippet": "\tSYS_UTRACE               = 306 // { int|sys||utrace(const char *label, void *addr, size_t len); }\n\tSYS_GETCONTEXT           = 307 // { int|sys||getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }\n\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }\n\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 160,
   "Snippet": "\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }\n\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }\n\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }\n\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }\n\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 249,
   "Snippet": "\tSYS_WAIT4                = 449 // { int|sys|50|wait4(pid_t pid, int *status, int options, struct rusage *rusage); }\n\tSYS_MKNOD                = 450 // { int|sys|50|mknod(const char *path, mode_t mode, dev_t dev); }\n\tSYS_FHSTAT               = 451 // { int|sys|50|fhstat(const void *fhp, size_t fh_size, struct stat *sb); }\n\tSYS_PIPE2                = 453 // { int|sys||pipe2(int *fildes, int flags); }\n\tSYS_DUP3                 = 454 // { int|sys||dup3(int from, int to, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 190,
   "Snippet": "\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 188,
   "Snippet": "\tSYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 174,
   "Snippet": "\tSYS_RASCTL               = 343 // { int|sys||rasctl(void *addr, size_t len, int op); }\n\tSYS_KQUEUE               = 344 // { int|sys||kqueue(void); }\n\tSYS__SCHED_SETPARAM      = 346 // { int|sys||_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params); }\n\tSYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }\n\tSYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 235,
   "Snippet": "\tSYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }\n\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }\n\tSYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_POLLTS               = 437 // { int|sys|50|pollts(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_STAT                 = 439 // { int|sys|50|stat(const char *path, struct stat *ub); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 165,
   "Snippet": "\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }\n\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }\n\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }\n\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }\n\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 11,
   "Snippet": "\tSYS_EXIT                 = 1   // { void|sys||exit(int rval); }\n\tSYS_FORK                 = 2   // { int|sys||fork(void); }\n\tSYS_READ                 = 3   // { ssize_t|sys||read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE                = 4   // { ssize_t|sys||write(int fd, const void *buf, size_t nbyte); }\n\tSYS_OPEN                 = 5   // { int|sys||open(const char *path, int flags, ... mode_t mode); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 164,
   "Snippet": "\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }\n\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }\n\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }\n\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }\n\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 125,
   "Snippet": "\tSYS_SHMGET               = 231 // { int|sys||shmget(key_t key, size_t size, int shmflg); }\n\tSYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }\n\tSYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }\n\tSYS_TIMER_GETOVERRUN     = 239 // { int|sys||timer_getoverrun(timer_t timerid); }\n\tSYS_FDATASYNC            = 241 // { int|sys||fdatasync(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 161,
   "Snippet": "\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }\n\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }\n\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }\n\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }\n\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 157,
   "Snippet": "\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }\n\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }\n\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }\n\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }\n\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 95,
   "Snippet": "\tSYS_SYSARCH              = 165 // { int|sys||sysarch(int op, void *parms); }\n\tSYS_PREAD                = 173 // { ssize_t|sys||pread(int fd, void *buf, size_t nbyte, int PAD, off_t offset); }\n\tSYS_PWRITE               = 174 // { ssize_t|sys||pwrite(int fd, const void *buf, size_t nbyte, int PAD, off_t offset); }\n\tSYS_NTP_ADJTIME          = 176 // { int|sys||ntp_adjtime(struct timex *tp); }\n\tSYS_SETGID               = 181 // { int|sys||setgid(gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 230,
   "Snippet": "\tSYS_CLOCK_GETTIME        = 427 // { int|sys|50|clock_gettime(clockid_t clock_id, struct timespec *tp); }\n\tSYS_CLOCK_SETTIME        = 428 // { int|sys|50|clock_settime(clockid_t clock_id, const struct timespec *tp); }\n\tSYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }\n\tSYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }\n\tSYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 130,
   "Snippet": "\tSYS_MLOCKALL             = 242 // { int|sys||mlockall(int flags); }\n\tSYS_MUNLOCKALL           = 243 // { int|sys||munlockall(void); }\n\tSYS_SIGQUEUEINFO         = 245 // { int|sys||sigqueueinfo(pid_t pid, const siginfo_t *info); }\n\tSYS_MODCTL               = 246 // { int|sys||modctl(int cmd, void *arg); }\n\tSYS___POSIX_RENAME       = 270 // { int|sys||__posix_rename(const char *from, const char *to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 124,
   "Snippet": "\tSYS_SHMDT                = 230 // { int|sys||shmdt(const void *shmaddr); }\n\tSYS_SHMGET               = 231 // { int|sys||shmget(key_t key, size_t size, int shmflg); }\n\tSYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }\n\tSYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }\n\tSYS_TIMER_GETOVERRUN     = 239 // { int|sys||timer_getoverrun(timer_t timerid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 179,
   "Snippet": "\tSYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }\n\tSYS_SCHED_YIELD          = 350 // { int|sys||sched_yield(void); }\n\tSYS_FSYNC_RANGE          = 354 // { int|sys||fsync_range(int fd, int flags, off_t start, off_t length); }\n\tSYS_UUIDGEN              = 355 // { int|sys||uuidgen(struct uuid *store, int count); }\n\tSYS_GETVFSSTAT           = 356 // { int|sys||getvfsstat(struct statvfs *buf, size_t bufsize, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 270,
   "Snippet": "\tSYS_UNLINKAT             = 471 // { int|sys||unlinkat(int fd, const char *path, int flag); }\n\tSYS_FUTIMENS             = 472 // { int|sys||futimens(int fd, const struct timespec *tptr); }\n\tSYS___QUOTACTL           = 473 // { int|sys||__quotactl(const char *path, struct quotactl_args *args); }\n\tSYS_POSIX_SPAWN          = 474 // { int|sys||posix_spawn(pid_t *pid, const char *path, const struct posix_spawn_file_actions *file_actions, const struct posix_spawnattr *attrp, char *const *argv, char *const *envp); }\n\tSYS_RECVMMSG             = 475 // { int|sys||recvmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct timespec *timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 211,
   "Snippet": "\tSYS_GETDENTS             = 390 // { int|sys|30|getdents(int fd, char *buf, size_t count); }\n\tSYS_SOCKET               = 394 // { int|sys|30|socket(int domain, int type, int protocol); }\n\tSYS_GETFH                = 395 // { int|sys|30|getfh(const char *fname, void *fhp, size_t *fh_size); }\n\tSYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }\n\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 54,
   "Snippet": "\tSYS_READLINK             = 58  // { ssize_t|sys||readlink(const char *path, char *buf, size_t count); }\n\tSYS_EXECVE               = 59  // { int|sys||execve(const char *path, char * const *argp, char * const *envp); }\n\tSYS_UMASK                = 60  // { mode_t|sys||umask(mode_t newmask); }\n\tSYS_CHROOT               = 61  // { int|sys||chroot(const char *path); }\n\tSYS_VFORK                = 66  // { int|sys||vfork(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 123,
   "Snippet": "\tSYS_SHMAT                = 228 // { void *|sys||shmat(int shmid, const void *shmaddr, int shmflg); }\n\tSYS_SHMDT                = 230 // { int|sys||shmdt(const void *shmaddr); }\n\tSYS_SHMGET               = 231 // { int|sys||shmget(key_t key, size_t size, int shmflg); }\n\tSYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }\n\tSYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 233,
   "Snippet": "\tSYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }\n\tSYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }\n\tSYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }\n\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }\n\tSYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 30,
   "Snippet": "\tSYS_RECVMSG              = 27  // { ssize_t|sys||recvmsg(int s, struct msghdr *msg, int flags); }\n\tSYS_SENDMSG              = 28  // { ssize_t|sys||sendmsg(int s, const struct msghdr *msg, int flags); }\n\tSYS_RECVFROM             = 29  // { ssize_t|sys||recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); }\n\tSYS_ACCEPT               = 30  // { int|sys||accept(int s, struct sockaddr *name, socklen_t *anamelen); }\n\tSYS_GETPEERNAME          = 31  // { int|sys||getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 257,
   "Snippet": "\tSYS_RENAMEAT             = 458 // { int|sys||renameat(int fromfd, const char *from, int tofd, const char *to); }\n\tSYS_MKFIFOAT             = 459 // { int|sys||mkfifoat(int fd, const char *path, mode_t mode); }\n\tSYS_MKNODAT              = 460 // { int|sys||mknodat(int fd, const char *path, mode_t mode, uint32_t dev); }\n\tSYS_MKDIRAT              = 461 // { int|sys||mkdirat(int fd, const char *path, mode_t mode); }\n\tSYS_FACCESSAT            = 462 // { int|sys||faccessat(int fd, const char *path, int amode, int flag); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 191,
   "Snippet": "\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 112,
   "Snippet": "\tSYS_MUNLOCK              = 204 // { int|sys||munlock(const void *addr, size_t len); }\n\tSYS_UNDELETE             = 205 // { int|sys||undelete(const char *path); }\n\tSYS_GETPGID              = 207 // { pid_t|sys||getpgid(pid_t pid); }\n\tSYS_REBOOT               = 208 // { int|sys||reboot(int opt, char *bootstr); }\n\tSYS_POLL                 = 209 // { int|sys||poll(struct pollfd *fds, u_int nfds, int timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 82,
   "Snippet": "\tSYS_FCHOWN               = 123 // { int|sys||fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD               = 124 // { int|sys||fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID             = 126 // { int|sys||setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID             = 127 // { int|sys||setregid(gid_t rgid, gid_t egid); }\n\tSYS_RENAME               = 128 // { int|sys||rename(const char *from, const char *to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 80,
   "Snippet": "\tSYS_READV                = 120 // { ssize_t|sys||readv(int fd, const struct iovec *iovp, int iovcnt); }\n\tSYS_WRITEV               = 121 // { ssize_t|sys||writev(int fd, const struct iovec *iovp, int iovcnt); }\n\tSYS_FCHOWN               = 123 // { int|sys||fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD               = 124 // { int|sys||fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID             = 126 // { int|sys||setreuid(uid_t ruid, uid_t euid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 187,
   "Snippet": "\tSYS_EXTATTR_SET_FILE     = 361 // { int|sys||extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 218,
   "Snippet": "\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }\n\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }\n\tSYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }\n\tSYS_SELECT               = 417 // { int|sys|50|select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }\n\tSYS_GETTIMEOFDAY         = 418 // { int|sys|50|gettimeofday(struct timeval *tp, void *tzp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 196,
   "Snippet": "\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_LINK    = 372 // { ssize_t|sys||extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_SETXATTR             = 375 // { int|sys||setxattr(const char *path, const char *name, const void *value, size_t size, int flags); }\n\tSYS_LSETXATTR            = 376 // { int|sys||lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 120,
   "Snippet": "\tSYS_MSGGET               = 225 // { int|sys||msgget(key_t key, int msgflg); }\n\tSYS_MSGSND               = 226 // { int|sys||msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }\n\tSYS_MSGRCV               = 227 // { ssize_t|sys||msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }\n\tSYS_SHMAT                = 228 // { void *|sys||shmat(int shmid, const void *shmaddr, int shmflg); }\n\tSYS_SHMDT                = 230 // { int|sys||shmdt(const void *shmaddr); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 217,
   "Snippet": "\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }\n\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }\n\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }\n\tSYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }\n\tSYS_SELECT               = 417 // { int|sys|50|select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 213,
   "Snippet": "\tSYS_GETFH                = 395 // { int|sys|30|getfh(const char *fname, void *fhp, size_t *fh_size); }\n\tSYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }\n\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }\n\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }\n\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 219,
   "Snippet": "\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }\n\tSYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }\n\tSYS_SELECT               = 417 // { int|sys|50|select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }\n\tSYS_GETTIMEOFDAY         = 418 // { int|sys|50|gettimeofday(struct timeval *tp, void *tzp); }\n\tSYS_SETTIMEOFDAY         = 419 // { int|sys|50|settimeofday(const struct timeval *tv, const void *tzp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 240,
   "Snippet": "\tSYS_FSTAT                = 440 // { int|sys|50|fstat(int fd, struct stat *sb); }\n\tSYS_LSTAT                = 441 // { int|sys|50|lstat(const char *path, struct stat *ub); }\n\tSYS___SEMCTL             = 442 // { int|sys|50|__semctl(int semid, int semnum, int cmd, ... union __semun *arg); }\n\tSYS_SHMCTL               = 443 // { int|sys|50|shmctl(int shmid, int cmd, struct shmid_ds *buf); }\n\tSYS_MSGCTL               = 444 // { int|sys|50|msgctl(int msqid, int cmd, struct msqid_ds *buf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 162,
   "Snippet": "\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }\n\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }\n\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }\n\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }\n\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 108,
   "Snippet": "\tSYS_TRUNCATE             = 200 // { int|sys||truncate(const char *path, int PAD, off_t length); }\n\tSYS_FTRUNCATE            = 201 // { int|sys||ftruncate(int fd, int PAD, off_t length); }\n\tSYS___SYSCTL             = 202 // { int|sys||__sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, const void *new, size_t newlen); }\n\tSYS_MLOCK                = 203 // { int|sys||mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK              = 204 // { int|sys||munlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 169,
   "Snippet": "\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }\n\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }\n\tSYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }\n\tSYS_PMC_GET_INFO         = 341 // { int|sys||pmc_get_info(int ctr, int op, void *args); }\n\tSYS_PMC_CONTROL          = 342 // { int|sys||pmc_control(int ctr, int op, void *args); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 138,
   "Snippet": "\tSYS_LCHOWN               = 275 // { int|sys||lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_MSYNC                = 277 // { int|sys|13|msync(void *addr, size_t len, int flags); }\n\tSYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 185,
   "Snippet": "\tSYS_FSTATVFS1            = 358 // { int|sys||fstatvfs1(int fd, struct statvfs *buf, int flags); }\n\tSYS_EXTATTRCTL           = 360 // { int|sys||extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FILE     = 361 // { int|sys||extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_386.go",
   "Line": 176,
   "Snippet": "\tSYS__SCHED_SETPARAM      = 346 // { int|sys||_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params); }\n\tSYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }\n\tSYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }\n\tSYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }\n\tSYS_SCHED_YIELD          = 350 // { int|sys||sched_yield(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 185,
   "Snippet": "\tSYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_MQUERY         = 286 // { void *sys_mquery(void *addr, size_t len, int prot, \\\n\tSYS_CLOSEFROM      = 287 // { int sys_closefrom(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 160,
   "Snippet": "\tSYS_SYSCTL         = 202 // { int sys_sysctl(const int *name, u_int namelen, \\\n\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK        = 204 // { int sys_munlock(const void *addr, size_t len); }\n\tSYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid); }\n\tSYS_UTRACE         = 209 // { int sys_utrace(const char *label, const void *addr, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 172,
   "Snippet": "\tSYS_POLL           = 252 // { int sys_poll(struct pollfd *fds, \\\n\tSYS_ISSETUGID      = 253 // { int sys_issetugid(void); }\n\tSYS_LCHOWN         = 254 // { int sys_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID         = 255 // { pid_t sys_getsid(pid_t pid); }\n\tSYS_MSYNC          = 256 // { int sys_msync(void *addr, size_t len, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 46,
   "Snippet": "\tSYS_SYNC           = 36  // { void sys_sync(void); }\n\tSYS_STAT           = 38  // { int sys_stat(const char *path, struct stat *ub); }\n\tSYS_GETPPID        = 39  // { pid_t sys_getppid(void); }\n\tSYS_LSTAT          = 40  // { int sys_lstat(const char *path, struct stat *ub); }\n\tSYS_DUP            = 41  // { int sys_dup(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 126,
   "Snippet": "\tSYS_KILL           = 122 // { int sys_kill(int pid, int signum); }\n\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID       = 127 // { int sys_setregid(gid_t rgid, gid_t egid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 123,
   "Snippet": "\tSYS_THRKILL        = 119 // { int sys_thrkill(pid_t tid, int signum, void *tcb); }\n\tSYS_READV          = 120 // { ssize_t sys_readv(int fd, \\\n\tSYS_WRITEV         = 121 // { ssize_t sys_writev(int fd, \\\n\tSYS_KILL           = 122 // { int sys_kill(int pid, int signum); }\n\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 132,
   "Snippet": "\tSYS_FLOCK          = 131 // { int sys_flock(int fd, int how); }\n\tSYS_MKFIFO         = 132 // { int sys_mkfifo(const char *path, mode_t mode); }\n\tSYS_SENDTO         = 133 // { ssize_t sys_sendto(int s, const void *buf, \\\n\tSYS_SHUTDOWN       = 134 // { int sys_shutdown(int s, int how); }\n\tSYS_SOCKETPAIR     = 135 // { int sys_socketpair(int domain, int type, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 11,
   "Snippet": "\tSYS_EXIT           = 1   // { void sys_exit(int rval); }\n\tSYS_FORK           = 2   // { int sys_fork(void); }\n\tSYS_READ           = 3   // { ssize_t sys_read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE          = 4   // { ssize_t sys_write(int fd, const void *buf, \\\n\tSYS_OPEN           = 5   // { int sys_open(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 93,
   "Snippet": "\tSYS_FUTIMENS       = 85  // { int sys_futimens(int fd, \\\n\tSYS_KBIND          = 86  // { int sys_kbind(const struct __kbind *param, \\\n\tSYS_CLOCK_GETTIME  = 87  // { int sys_clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME  = 88  // { int sys_clock_settime(clockid_t clock_id, \\\n\tSYS_CLOCK_GETRES   = 89  // { int sys_clock_getres(clockid_t clock_id, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 16,
   "Snippet": "\tSYS_CLOSE          = 6   // { int sys_close(int fd); }\n\tSYS_GETENTROPY     = 7   // { int sys_getentropy(void *buf, size_t nbyte); }\n\tSYS___TFORK        = 8   // { int sys___tfork(const struct __tfork *param, \\\n\tSYS_LINK           = 9   // { int sys_link(const char *path, const char *link); }\n\tSYS_UNLINK         = 10  // { int sys_unlink(const char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 28,
   "Snippet": "\tSYS_GETDTABLECOUNT = 18  // { int sys_getdtablecount(void); }\n\tSYS_GETRUSAGE      = 19  // { int sys_getrusage(int who, \\\n\tSYS_GETPID         = 20  // { pid_t sys_getpid(void); }\n\tSYS_MOUNT          = 21  // { int sys_mount(const char *type, const char *path, \\\n\tSYS_UNMOUNT        = 22  // { int sys_unmount(const char *path, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 88,
   "Snippet": "\tSYS_SETGROUPS      = 80  // { int sys_setgroups(int gidsetsize, \\\n\tSYS_GETPGRP        = 81  // { int sys_getpgrp(void); }\n\tSYS_SETPGID        = 82  // { int sys_setpgid(pid_t pid, pid_t pgid); }\n\tSYS_FUTEX          = 83  // { int sys_futex(uint32_t *f, int op, int val, \\\n\tSYS_UTIMENSAT      = 84  // { int sys_utimensat(int fd, const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 100,
   "Snippet": "\tSYS_FCNTL          = 92  // { int sys_fcntl(int fd, int cmd, ... void *arg); }\n\tSYS_ACCEPT4        = 93  // { int sys_accept4(int s, struct sockaddr *name, \\\n\tSYS___THRSLEEP     = 94  // { int sys___thrsleep(const volatile void *ident, \\\n\tSYS_FSYNC          = 95  // { int sys_fsync(int fd); }\n\tSYS_SETPRIORITY    = 96  // { int sys_setpriority(int which, id_t who, int prio); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 186,
   "Snippet": "\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_MQUERY         = 286 // { void *sys_mquery(void *addr, size_t len, int prot, \\\n\tSYS_CLOSEFROM      = 287 // { int sys_closefrom(int fd); }\n\tSYS_SIGALTSTACK    = 288 // { int sys_sigaltstack(const struct sigaltstack *nss, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 217,
   "Snippet": "\tSYS_UNLINKAT       = 325 // { int sys_unlinkat(int fd, const char *path, \\\n\tSYS___SET_TCB      = 329 // { void sys___set_tcb(void *tcb); }\n\tSYS___GET_TCB      = 330 // { void *sys___get_tcb(void); }\n)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 165,
   "Snippet": "\tSYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg); }\n\tSYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg); }\n\tSYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, \\\n\tSYS_MSGRCV         = 227 // { int sys_msgrcv(int msqid, void *msgp, size_t msgsz, \\\n\tSYS_SHMAT          = 228 // { void *sys_shmat(int shmid, const void *shmaddr, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 81,
   "Snippet": "\tSYS_MUNMAP         = 73  // { int sys_munmap(void *addr, size_t len); }\n\tSYS_MPROTECT       = 74  // { int sys_mprotect(void *addr, size_t len, \\\n\tSYS_MADVISE        = 75  // { int sys_madvise(void *addr, size_t len, \\\n\tSYS_UTIMES         = 76  // { int sys_utimes(const char *path, \\\n\tSYS_FUTIMES        = 77  // { int sys_futimes(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 122,
   "Snippet": "\tSYS_GETSOCKOPT     = 118 // { int sys_getsockopt(int s, int level, int name, \\\n\tSYS_THRKILL        = 119 // { int sys_thrkill(pid_t tid, int signum, void *tcb); }\n\tSYS_READV          = 120 // { ssize_t sys_readv(int fd, \\\n\tSYS_WRITEV         = 121 // { ssize_t sys_writev(int fd, \\\n\tSYS_KILL           = 122 // { int sys_kill(int pid, int signum); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 183,
   "Snippet": "\tSYS_MUNLOCKALL     = 272 // { int sys_munlockall(void); }\n\tSYS_GETRESUID      = 281 // { int sys_getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 163,
   "Snippet": "\tSYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid); }\n\tSYS_UTRACE         = 209 // { int sys_utrace(const char *label, const void *addr, \\\n\tSYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg); }\n\tSYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg); }\n\tSYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 164,
   "Snippet": "\tSYS_UTRACE         = 209 // { int sys_utrace(const char *label, const void *addr, \\\n\tSYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg); }\n\tSYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg); }\n\tSYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, \\\n\tSYS_MSGRCV         = 227 // { int sys_msgrcv(int msqid, void *msgp, size_t msgsz, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 200,
   "Snippet": "\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }\n\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\\n\tSYS___GETCWD       = 304 // { int sys___getcwd(char *buf, size_t len); }\n\tSYS_ADJFREQ        = 305 // { int sys_adjfreq(const int64_t *freq, \\\n\tSYS_SETRTABLE      = 310 // { int sys_setrtable(int rtableid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 31,
   "Snippet": "\tSYS_MOUNT          = 21  // { int sys_mount(const char *type, const char *path, \\\n\tSYS_UNMOUNT        = 22  // { int sys_unmount(const char *path, int flags); }\n\tSYS_SETUID         = 23  // { int sys_setuid(uid_t uid); }\n\tSYS_GETUID         = 24  // { uid_t sys_getuid(void); }\n\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 77,
   "Snippet": "\tSYS_SETITIMER      = 69  // { int sys_setitimer(int which, \\\n\tSYS_GETITIMER      = 70  // { int sys_getitimer(int which, \\\n\tSYS_SELECT         = 71  // { int sys_select(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_KEVENT         = 72  // { int sys_kevent(int fd, \\\n\tSYS_MUNMAP         = 73  // { int sys_munmap(void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 166,
   "Snippet": "\tSYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg); }\n\tSYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, \\\n\tSYS_MSGRCV         = 227 // { int sys_msgrcv(int msqid, void *msgp, size_t msgsz, \\\n\tSYS_SHMAT          = 228 // { void *sys_shmat(int shmid, const void *shmaddr, \\\n\tSYS_SHMDT          = 230 // { int sys_shmdt(const void *shmaddr); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 174,
   "Snippet": "\tSYS_LCHOWN         = 254 // { int sys_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID         = 255 // { pid_t sys_getsid(pid_t pid); }\n\tSYS_MSYNC          = 256 // { int sys_msync(void *addr, size_t len, int flags); }\n\tSYS_PIPE           = 263 // { int sys_pipe(int *fdp); }\n\tSYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t *fhp, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 169,
   "Snippet": "\tSYS_SHMAT          = 228 // { void *sys_shmat(int shmid, const void *shmaddr, \\\n\tSYS_SHMDT          = 230 // { int sys_shmdt(const void *shmaddr); }\n\tSYS_MINHERIT       = 250 // { int sys_minherit(void *addr, size_t len, \\\n\tSYS_POLL           = 252 // { int sys_poll(struct pollfd *fds, \\\n\tSYS_ISSETUGID      = 253 // { int sys_issetugid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 34,
   "Snippet": "\tSYS_GETUID         = 24  // { uid_t sys_getuid(void); }\n\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }\n\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\\n\tSYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 128,
   "Snippet": "\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID       = 127 // { int sys_setregid(gid_t rgid, gid_t egid); }\n\tSYS_RENAME         = 128 // { int sys_rename(const char *from, const char *to); }\n\tSYS_FLOCK          = 131 // { int sys_flock(int fd, int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 105,
   "Snippet": "\tSYS_SOCKET         = 97  // { int sys_socket(int domain, int type, int protocol); }\n\tSYS_CONNECT        = 98  // { int sys_connect(int s, const struct sockaddr *name, \\\n\tSYS_GETDENTS       = 99  // { int sys_getdents(int fd, void *buf, size_t buflen); }\n\tSYS_GETPRIORITY    = 100 // { int sys_getpriority(int which, id_t who); }\n\tSYS_PIPE2          = 101 // { int sys_pipe2(int *fdp, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 191,
   "Snippet": "\tSYS_SHMGET         = 289 // { int sys_shmget(key_t key, size_t size, int shmflg); }\n\tSYS_SEMOP          = 290 // { int sys_semop(int semid, struct sembuf *sops, \\\n\tSYS_FHSTAT         = 294 // { int sys_fhstat(const fhandle_t *fhp, \\\n\tSYS___SEMCTL       = 295 // { int sys___semctl(int semid, int semnum, int cmd, \\\n\tSYS_SHMCTL         = 296 // { int sys_shmctl(int shmid, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 68,
   "Snippet": "\tSYS_UMASK          = 60  // { mode_t sys_umask(mode_t newmask); }\n\tSYS_CHROOT         = 61  // { int sys_chroot(const char *path); }\n\tSYS_GETFSSTAT      = 62  // { int sys_getfsstat(struct statfs *buf, size_t bufsize, \\\n\tSYS_STATFS         = 63  // { int sys_statfs(const char *path, \\\n\tSYS_FSTATFS        = 64  // { int sys_fstatfs(int fd, struct statfs *buf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 142,
   "Snippet": "\tSYS_QUOTACTL       = 148 // { int sys_quotactl(const char *path, int cmd, \\\n\tSYS_NFSSVC         = 155 // { int sys_nfssvc(int flag, void *argp); }\n\tSYS_GETFH          = 161 // { int sys_getfh(const char *fname, fhandle_t *fhp); }\n\tSYS_SYSARCH        = 165 // { int sys_sysarch(int op, void *parms); }\n\tSYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void *buf, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 192,
   "Snippet": "\tSYS_SEMOP          = 290 // { int sys_semop(int semid, struct sembuf *sops, \\\n\tSYS_FHSTAT         = 294 // { int sys_fhstat(const fhandle_t *fhp, \\\n\tSYS___SEMCTL       = 295 // { int sys___semctl(int semid, int semnum, int cmd, \\\n\tSYS_SHMCTL         = 296 // { int sys_shmctl(int shmid, int cmd, \\\n\tSYS_MSGCTL         = 297 // { int sys_msgctl(int msqid, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 197,
   "Snippet": "\tSYS_SCHED_YIELD    = 298 // { int sys_sched_yield(void); }\n\tSYS_GETTHRID       = 299 // { pid_t sys_getthrid(void); }\n\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\\n\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }\n\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 92,
   "Snippet": "\tSYS_UTIMENSAT      = 84  // { int sys_utimensat(int fd, const char *path, \\\n\tSYS_FUTIMENS       = 85  // { int sys_futimens(int fd, \\\n\tSYS_KBIND          = 86  // { int sys_kbind(const struct __kbind *param, \\\n\tSYS_CLOCK_GETTIME  = 87  // { int sys_clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME  = 88  // { int sys_clock_settime(clockid_t clock_id, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 138,
   "Snippet": "\tSYS_RMDIR          = 137 // { int sys_rmdir(const char *path); }\n\tSYS_ADJTIME        = 140 // { int sys_adjtime(const struct timeval *delta, \\\n\tSYS_GETLOGIN_R     = 141 // { int sys_getlogin_r(char *namebuf, u_int namelen); }\n\tSYS_SETSID         = 147 // { int sys_setsid(void); }\n\tSYS_QUOTACTL       = 148 // { int sys_quotactl(const char *path, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 148,
   "Snippet": "\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }\n\tSYS_SETEGID        = 182 // { int sys_setegid(gid_t egid); }\n\tSYS_SETEUID        = 183 // { int sys_seteuid(uid_t euid); }\n\tSYS_PATHCONF       = 191 // { long sys_pathconf(const char *path, int name); }\n\tSYS_FPATHCONF      = 192 // { long sys_fpathconf(int fd, int name); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 125,
   "Snippet": "\tSYS_WRITEV         = 121 // { ssize_t sys_writev(int fd, \\\n\tSYS_KILL           = 122 // { int sys_kill(int pid, int signum); }\n\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 212,
   "Snippet": "\tSYS_MKNODAT        = 320 // { int sys_mknodat(int fd, const char *path, \\\n\tSYS_OPENAT         = 321 // { int sys_openat(int fd, const char *path, int flags, \\\n\tSYS_READLINKAT     = 322 // { ssize_t sys_readlinkat(int fd, const char *path, \\\n\tSYS_RENAMEAT       = 323 // { int sys_renameat(int fromfd, const char *from, \\\n\tSYS_SYMLINKAT      = 324 // { int sys_symlinkat(const char *path, int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 32,
   "Snippet": "\tSYS_UNMOUNT        = 22  // { int sys_unmount(const char *path, int flags); }\n\tSYS_SETUID         = 23  // { int sys_setuid(uid_t uid); }\n\tSYS_GETUID         = 24  // { uid_t sys_getuid(void); }\n\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }\n\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 35,
   "Snippet": "\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }\n\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\\n\tSYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, \\\n\tSYS_RECVFROM       = 29  // { ssize_t sys_recvfrom(int s, void *buf, size_t len, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 201,
   "Snippet": "\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\\n\tSYS___GETCWD       = 304 // { int sys___getcwd(char *buf, size_t len); }\n\tSYS_ADJFREQ        = 305 // { int sys_adjfreq(const int64_t *freq, \\\n\tSYS_SETRTABLE      = 310 // { int sys_setrtable(int rtableid); }\n\tSYS_GETRTABLE      = 311 // { int sys_getrtable(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 102,
   "Snippet": "\tSYS___THRSLEEP     = 94  // { int sys___thrsleep(const volatile void *ident, \\\n\tSYS_FSYNC          = 95  // { int sys_fsync(int fd); }\n\tSYS_SETPRIORITY    = 96  // { int sys_setpriority(int which, id_t who, int prio); }\n\tSYS_SOCKET         = 97  // { int sys_socket(int domain, int type, int protocol); }\n\tSYS_CONNECT        = 98  // { int sys_connect(int s, const struct sockaddr *name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 94,
   "Snippet": "\tSYS_KBIND          = 86  // { int sys_kbind(const struct __kbind *param, \\\n\tSYS_CLOCK_GETTIME  = 87  // { int sys_clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME  = 88  // { int sys_clock_settime(clockid_t clock_id, \\\n\tSYS_CLOCK_GETRES   = 89  // { int sys_clock_getres(clockid_t clock_id, \\\n\tSYS_DUP2           = 90  // { int sys_dup2(int from, int to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 84,
   "Snippet": "\tSYS_UTIMES         = 76  // { int sys_utimes(const char *path, \\\n\tSYS_FUTIMES        = 77  // { int sys_futimes(int fd, \\\n\tSYS_MINCORE        = 78  // { int sys_mincore(void *addr, size_t len, \\\n\tSYS_GETGROUPS      = 79  // { int sys_getgroups(int gidsetsize, \\\n\tSYS_SETGROUPS      = 80  // { int sys_setgroups(int gidsetsize, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 89,
   "Snippet": "\tSYS_GETPGRP        = 81  // { int sys_getpgrp(void); }\n\tSYS_SETPGID        = 82  // { int sys_setpgid(pid_t pid, pid_t pgid); }\n\tSYS_FUTEX          = 83  // { int sys_futex(uint32_t *f, int op, int val, \\\n\tSYS_UTIMENSAT      = 84  // { int sys_utimensat(int fd, const char *path, \\\n\tSYS_FUTIMENS       = 85  // { int sys_futimens(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 159,
   "Snippet": "\tSYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length); }\n\tSYS_SYSCTL         = 202 // { int sys_sysctl(const int *name, u_int namelen, \\\n\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK        = 204 // { int sys_munlock(const void *addr, size_t len); }\n\tSYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 118,
   "Snippet": "\tSYS_PSELECT        = 110 // { int sys_pselect(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_SIGSUSPEND     = 111 // { int sys_sigsuspend(int mask); }\n\tSYS_SENDSYSLOG     = 112 // { int sys_sendsyslog(const char *buf, size_t nbyte, \\\n\tSYS_UNVEIL         = 114 // { int sys_unveil(const char *path, \\\n\tSYS_GETSOCKOPT     = 118 // { int sys_getsockopt(int s, int level, int name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 146,
   "Snippet": "\tSYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void *buf, \\\n\tSYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void *buf, \\\n\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }\n\tSYS_SETEGID        = 182 // { int sys_setegid(gid_t egid); }\n\tSYS_SETEUID        = 183 // { int sys_seteuid(uid_t euid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 127,
   "Snippet": "\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID       = 127 // { int sys_setregid(gid_t rgid, gid_t egid); }\n\tSYS_RENAME         = 128 // { int sys_rename(const char *from, const char *to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 23,
   "Snippet": "\tSYS_FCHDIR         = 13  // { int sys_fchdir(int fd); }\n\tSYS_MKNOD          = 14  // { int sys_mknod(const char *path, mode_t mode, \\\n\tSYS_CHMOD          = 15  // { int sys_chmod(const char *path, mode_t mode); }\n\tSYS_CHOWN          = 16  // { int sys_chown(const char *path, uid_t uid, \\\n\tSYS_OBREAK         = 17  // { int sys_obreak(char *nsize); } break"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 177,
   "Snippet": "\tSYS_PIPE           = 263 // { int sys_pipe(int *fdp); }\n\tSYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t *fhp, int flags); }\n\tSYS_PREADV         = 267 // { ssize_t sys_preadv(int fd, \\\n\tSYS_PWRITEV        = 268 // { ssize_t sys_pwritev(int fd, \\\n\tSYS_KQUEUE         = 269 // { int sys_kqueue(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 22,
   "Snippet": "\tSYS_CHDIR          = 12  // { int sys_chdir(const char *path); }\n\tSYS_FCHDIR         = 13  // { int sys_fchdir(int fd); }\n\tSYS_MKNOD          = 14  // { int sys_mknod(const char *path, mode_t mode, \\\n\tSYS_CHMOD          = 15  // { int sys_chmod(const char *path, mode_t mode); }\n\tSYS_CHOWN          = 16  // { int sys_chown(const char *path, uid_t uid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 178,
   "Snippet": "\tSYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t *fhp, int flags); }\n\tSYS_PREADV         = 267 // { ssize_t sys_preadv(int fd, \\\n\tSYS_PWRITEV        = 268 // { ssize_t sys_pwritev(int fd, \\\n\tSYS_KQUEUE         = 269 // { int sys_kqueue(void); }\n\tSYS_MLOCKALL       = 271 // { int sys_mlockall(int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 147,
   "Snippet": "\tSYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void *buf, \\\n\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }\n\tSYS_SETEGID        = 182 // { int sys_setegid(gid_t egid); }\n\tSYS_SETEUID        = 183 // { int sys_seteuid(uid_t euid); }\n\tSYS_PATHCONF       = 191 // { long sys_pathconf(const char *path, int name); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 154,
   "Snippet": "\tSYS_GETRLIMIT      = 194 // { int sys_getrlimit(int which, \\\n\tSYS_SETRLIMIT      = 195 // { int sys_setrlimit(int which, \\\n\tSYS_MMAP           = 197 // { void *sys_mmap(void *addr, size_t len, int prot, \\\n\tSYS_LSEEK          = 199 // { off_t sys_lseek(int fd, int pad, off_t offset, \\\n\tSYS_TRUNCATE       = 200 // { int sys_truncate(const char *path, int pad, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 155,
   "Snippet": "\tSYS_SETRLIMIT      = 195 // { int sys_setrlimit(int which, \\\n\tSYS_MMAP           = 197 // { void *sys_mmap(void *addr, size_t len, int prot, \\\n\tSYS_LSEEK          = 199 // { off_t sys_lseek(int fd, int pad, off_t offset, \\\n\tSYS_TRUNCATE       = 200 // { int sys_truncate(const char *path, int pad, \\\n\tSYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 19,
   "Snippet": "\tSYS_LINK           = 9   // { int sys_link(const char *path, const char *link); }\n\tSYS_UNLINK         = 10  // { int sys_unlink(const char *path); }\n\tSYS_WAIT4          = 11  // { pid_t sys_wait4(pid_t pid, int *status, \\\n\tSYS_CHDIR          = 12  // { int sys_chdir(const char *path); }\n\tSYS_FCHDIR         = 13  // { int sys_fchdir(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 135,
   "Snippet": "\tSYS_SHUTDOWN       = 134 // { int sys_shutdown(int s, int how); }\n\tSYS_SOCKETPAIR     = 135 // { int sys_socketpair(int domain, int type, \\\n\tSYS_MKDIR          = 136 // { int sys_mkdir(const char *path, mode_t mode); }\n\tSYS_RMDIR          = 137 // { int sys_rmdir(const char *path); }\n\tSYS_ADJTIME        = 140 // { int sys_adjtime(const struct timeval *delta, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 157,
   "Snippet": "\tSYS_LSEEK          = 199 // { off_t sys_lseek(int fd, int pad, off_t offset, \\\n\tSYS_TRUNCATE       = 200 // { int sys_truncate(const char *path, int pad, \\\n\tSYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length); }\n\tSYS_SYSCTL         = 202 // { int sys_sysctl(const int *name, u_int namelen, \\\n\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 33,
   "Snippet": "\tSYS_SETUID         = 23  // { int sys_setuid(uid_t uid); }\n\tSYS_GETUID         = 24  // { uid_t sys_getuid(void); }\n\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }\n\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 173,
   "Snippet": "\tSYS_ISSETUGID      = 253 // { int sys_issetugid(void); }\n\tSYS_LCHOWN         = 254 // { int sys_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID         = 255 // { pid_t sys_getsid(pid_t pid); }\n\tSYS_MSYNC          = 256 // { int sys_msync(void *addr, size_t len, int flags); }\n\tSYS_PIPE           = 263 // { int sys_pipe(int *fdp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 42,
   "Snippet": "\tSYS_GETSOCKNAME    = 32  // { int sys_getsockname(int fdes, struct sockaddr *asa, \\\n\tSYS_ACCESS         = 33  // { int sys_access(const char *path, int amode); }\n\tSYS_CHFLAGS        = 34  // { int sys_chflags(const char *path, u_int flags); }\n\tSYS_FCHFLAGS       = 35  // { int sys_fchflags(int fd, u_int flags); }\n\tSYS_SYNC           = 36  // { void sys_sync(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 182,
   "Snippet": "\tSYS_MLOCKALL       = 271 // { int sys_mlockall(int flags); }\n\tSYS_MUNLOCKALL     = 272 // { int sys_munlockall(void); }\n\tSYS_GETRESUID      = 281 // { int sys_getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 131,
   "Snippet": "\tSYS_RENAME         = 128 // { int sys_rename(const char *from, const char *to); }\n\tSYS_FLOCK          = 131 // { int sys_flock(int fd, int how); }\n\tSYS_MKFIFO         = 132 // { int sys_mkfifo(const char *path, mode_t mode); }\n\tSYS_SENDTO         = 133 // { ssize_t sys_sendto(int s, const void *buf, \\\n\tSYS_SHUTDOWN       = 134 // { int sys_shutdown(int s, int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 80,
   "Snippet": "\tSYS_KEVENT         = 72  // { int sys_kevent(int fd, \\\n\tSYS_MUNMAP         = 73  // { int sys_munmap(void *addr, size_t len); }\n\tSYS_MPROTECT       = 74  // { int sys_mprotect(void *addr, size_t len, \\\n\tSYS_MADVISE        = 75  // { int sys_madvise(void *addr, size_t len, \\\n\tSYS_UTIMES         = 76  // { int sys_utimes(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 121,
   "Snippet": "\tSYS_UNVEIL         = 114 // { int sys_unveil(const char *path, \\\n\tSYS_GETSOCKOPT     = 118 // { int sys_getsockopt(int s, int level, int name, \\\n\tSYS_THRKILL        = 119 // { int sys_thrkill(pid_t tid, int signum, void *tcb); }\n\tSYS_READV          = 120 // { ssize_t sys_readv(int fd, \\\n\tSYS_WRITEV         = 121 // { ssize_t sys_writev(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 216,
   "Snippet": "\tSYS_SYMLINKAT      = 324 // { int sys_symlinkat(const char *path, int fd, \\\n\tSYS_UNLINKAT       = 325 // { int sys_unlinkat(int fd, const char *path, \\\n\tSYS___SET_TCB      = 329 // { void sys___set_tcb(void *tcb); }\n\tSYS___GET_TCB      = 330 // { void *sys___get_tcb(void); }\n)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 24,
   "Snippet": "\tSYS_MKNOD          = 14  // { int sys_mknod(const char *path, mode_t mode, \\\n\tSYS_CHMOD          = 15  // { int sys_chmod(const char *path, mode_t mode); }\n\tSYS_CHOWN          = 16  // { int sys_chown(const char *path, uid_t uid, \\\n\tSYS_OBREAK         = 17  // { int sys_obreak(char *nsize); } break\n\tSYS_GETDTABLECOUNT = 18  // { int sys_getdtablecount(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 158,
   "Snippet": "\tSYS_TRUNCATE       = 200 // { int sys_truncate(const char *path, int pad, \\\n\tSYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length); }\n\tSYS_SYSCTL         = 202 // { int sys_sysctl(const int *name, u_int namelen, \\\n\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK        = 204 // { int sys_munlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 195,
   "Snippet": "\tSYS_SHMCTL         = 296 // { int sys_shmctl(int shmid, int cmd, \\\n\tSYS_MSGCTL         = 297 // { int sys_msgctl(int msqid, int cmd, \\\n\tSYS_SCHED_YIELD    = 298 // { int sys_sched_yield(void); }\n\tSYS_GETTHRID       = 299 // { pid_t sys_getthrid(void); }\n\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 43,
   "Snippet": "\tSYS_ACCESS         = 33  // { int sys_access(const char *path, int amode); }\n\tSYS_CHFLAGS        = 34  // { int sys_chflags(const char *path, u_int flags); }\n\tSYS_FCHFLAGS       = 35  // { int sys_fchflags(int fd, u_int flags); }\n\tSYS_SYNC           = 36  // { void sys_sync(void); }\n\tSYS_STAT           = 38  // { int sys_stat(const char *path, struct stat *ub); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 54,
   "Snippet": "\tSYS_KTRACE         = 45  // { int sys_ktrace(const char *fname, int ops, \\\n\tSYS_SIGACTION      = 46  // { int sys_sigaction(int signum, \\\n\tSYS_GETGID         = 47  // { gid_t sys_getgid(void); }\n\tSYS_SIGPROCMASK    = 48  // { int sys_sigprocmask(int how, sigset_t mask); }\n\tSYS_SETLOGIN       = 50  // { int sys_setlogin(const char *namebuf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 144,
   "Snippet": "\tSYS_GETFH          = 161 // { int sys_getfh(const char *fname, fhandle_t *fhp); }\n\tSYS_SYSARCH        = 165 // { int sys_sysarch(int op, void *parms); }\n\tSYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void *buf, \\\n\tSYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void *buf, \\\n\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 184,
   "Snippet": "\tSYS_GETRESUID      = 281 // { int sys_getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_MQUERY         = 286 // { void *sys_mquery(void *addr, size_t len, int prot, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 12,
   "Snippet": "\tSYS_FORK           = 2   // { int sys_fork(void); }\n\tSYS_READ           = 3   // { ssize_t sys_read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE          = 4   // { ssize_t sys_write(int fd, const void *buf, \\\n\tSYS_OPEN           = 5   // { int sys_open(const char *path, \\\n\tSYS_CLOSE          = 6   // { int sys_close(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 161,
   "Snippet": "\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK        = 204 // { int sys_munlock(const void *addr, size_t len); }\n\tSYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid); }\n\tSYS_UTRACE         = 209 // { int sys_utrace(const char *label, const void *addr, \\\n\tSYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 37,
   "Snippet": "\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\\n\tSYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, \\\n\tSYS_RECVFROM       = 29  // { ssize_t sys_recvfrom(int s, void *buf, size_t len, \\\n\tSYS_ACCEPT         = 30  // { int sys_accept(int s, struct sockaddr *name, \\\n\tSYS_GETPEERNAME    = 31  // { int sys_getpeername(int fdes, struct sockaddr *asa, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 55,
   "Snippet": "\tSYS_SIGACTION      = 46  // { int sys_sigaction(int signum, \\\n\tSYS_GETGID         = 47  // { gid_t sys_getgid(void); }\n\tSYS_SIGPROCMASK    = 48  // { int sys_sigprocmask(int how, sigset_t mask); }\n\tSYS_SETLOGIN       = 50  // { int sys_setlogin(const char *namebuf); }\n\tSYS_ACCT           = 51  // { int sys_acct(const char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 198,
   "Snippet": "\tSYS_GETTHRID       = 299 // { pid_t sys_getthrid(void); }\n\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\\n\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }\n\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\\n\tSYS___GETCWD       = 304 // { int sys___getcwd(char *buf, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 66,
   "Snippet": "\tSYS_READLINK       = 58  // { ssize_t sys_readlink(const char *path, \\\n\tSYS_EXECVE         = 59  // { int sys_execve(const char *path, \\\n\tSYS_UMASK          = 60  // { mode_t sys_umask(mode_t newmask); }\n\tSYS_CHROOT         = 61  // { int sys_chroot(const char *path); }\n\tSYS_GETFSSTAT      = 62  // { int sys_getfsstat(struct statfs *buf, size_t bufsize, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 95,
   "Snippet": "\tSYS_CLOCK_GETTIME  = 87  // { int sys_clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME  = 88  // { int sys_clock_settime(clockid_t clock_id, \\\n\tSYS_CLOCK_GETRES   = 89  // { int sys_clock_getres(clockid_t clock_id, \\\n\tSYS_DUP2           = 90  // { int sys_dup2(int from, int to); }\n\tSYS_NANOSLEEP      = 91  // { int sys_nanosleep(const struct timespec *rqtp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 71,
   "Snippet": "\tSYS_STATFS         = 63  // { int sys_statfs(const char *path, \\\n\tSYS_FSTATFS        = 64  // { int sys_fstatfs(int fd, struct statfs *buf); }\n\tSYS_FHSTATFS       = 65  // { int sys_fhstatfs(const fhandle_t *fhp, \\\n\tSYS_VFORK          = 66  // { int sys_vfork(void); }\n\tSYS_GETTIMEOFDAY   = 67  // { int sys_gettimeofday(struct timeval *tp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 15,
   "Snippet": "\tSYS_OPEN           = 5   // { int sys_open(const char *path, \\\n\tSYS_CLOSE          = 6   // { int sys_close(int fd); }\n\tSYS_GETENTROPY     = 7   // { int sys_getentropy(void *buf, size_t nbyte); }\n\tSYS___TFORK        = 8   // { int sys___tfork(const struct __tfork *param, \\\n\tSYS_LINK           = 9   // { int sys_link(const char *path, const char *link); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 189,
   "Snippet": "\tSYS_CLOSEFROM      = 287 // { int sys_closefrom(int fd); }\n\tSYS_SIGALTSTACK    = 288 // { int sys_sigaltstack(const struct sigaltstack *nss, \\\n\tSYS_SHMGET         = 289 // { int sys_shmget(key_t key, size_t size, int shmflg); }\n\tSYS_SEMOP          = 290 // { int sys_semop(int semid, struct sembuf *sops, \\\n\tSYS_FHSTAT         = 294 // { int sys_fhstat(const fhandle_t *fhp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 196,
   "Snippet": "\tSYS_MSGCTL         = 297 // { int sys_msgctl(int msqid, int cmd, \\\n\tSYS_SCHED_YIELD    = 298 // { int sys_sched_yield(void); }\n\tSYS_GETTHRID       = 299 // { pid_t sys_getthrid(void); }\n\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\\n\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 50,
   "Snippet": "\tSYS_DUP            = 41  // { int sys_dup(int fd); }\n\tSYS_FSTATAT        = 42  // { int sys_fstatat(int fd, const char *path, \\\n\tSYS_GETEGID        = 43  // { gid_t sys_getegid(void); }\n\tSYS_PROFIL         = 44  // { int sys_profil(caddr_t samples, size_t size, \\\n\tSYS_KTRACE         = 45  // { int sys_ktrace(const char *fname, int ops, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 36,
   "Snippet": "\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\\n\tSYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, \\\n\tSYS_RECVFROM       = 29  // { ssize_t sys_recvfrom(int s, void *buf, size_t len, \\\n\tSYS_ACCEPT         = 30  // { int sys_accept(int s, struct sockaddr *name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 51,
   "Snippet": "\tSYS_FSTATAT        = 42  // { int sys_fstatat(int fd, const char *path, \\\n\tSYS_GETEGID        = 43  // { gid_t sys_getegid(void); }\n\tSYS_PROFIL         = 44  // { int sys_profil(caddr_t samples, size_t size, \\\n\tSYS_KTRACE         = 45  // { int sys_ktrace(const char *fname, int ops, \\\n\tSYS_SIGACTION      = 46  // { int sys_sigaction(int signum, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 64,
   "Snippet": "\tSYS_REVOKE         = 56  // { int sys_revoke(const char *path); }\n\tSYS_SYMLINK        = 57  // { int sys_symlink(const char *path, \\\n\tSYS_READLINK       = 58  // { ssize_t sys_readlink(const char *path, \\\n\tSYS_EXECVE         = 59  // { int sys_execve(const char *path, \\\n\tSYS_UMASK          = 60  // { mode_t sys_umask(mode_t newmask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 116,
   "Snippet": "\tSYS_PLEDGE         = 108 // { int sys_pledge(const char *promises, \\\n\tSYS_PPOLL          = 109 // { int sys_ppoll(struct pollfd *fds, \\\n\tSYS_PSELECT        = 110 // { int sys_pselect(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_SIGSUSPEND     = 111 // { int sys_sigsuspend(int mask); }\n\tSYS_SENDSYSLOG     = 112 // { int sys_sendsyslog(const char *buf, size_t nbyte, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 176,
   "Snippet": "\tSYS_MSYNC          = 256 // { int sys_msync(void *addr, size_t len, int flags); }\n\tSYS_PIPE           = 263 // { int sys_pipe(int *fdp); }\n\tSYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t *fhp, int flags); }\n\tSYS_PREADV         = 267 // { ssize_t sys_preadv(int fd, \\\n\tSYS_PWRITEV        = 268 // { ssize_t sys_pwritev(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 145,
   "Snippet": "\tSYS_SYSARCH        = 165 // { int sys_sysarch(int op, void *parms); }\n\tSYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void *buf, \\\n\tSYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void *buf, \\\n\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }\n\tSYS_SETEGID        = 182 // { int sys_setegid(gid_t egid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 199,
   "Snippet": "\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\\n\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }\n\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\\n\tSYS___GETCWD       = 304 // { int sys___getcwd(char *buf, size_t len); }\n\tSYS_ADJFREQ        = 305 // { int sys_adjfreq(const int64_t *freq, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 79,
   "Snippet": "\tSYS_SELECT         = 71  // { int sys_select(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_KEVENT         = 72  // { int sys_kevent(int fd, \\\n\tSYS_MUNMAP         = 73  // { int sys_munmap(void *addr, size_t len); }\n\tSYS_MPROTECT       = 74  // { int sys_mprotect(void *addr, size_t len, \\\n\tSYS_MADVISE        = 75  // { int sys_madvise(void *addr, size_t len, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_amd64.go",
   "Line": 106,
   "Snippet": "\tSYS_CONNECT        = 98  // { int sys_connect(int s, const struct sockaddr *name, \\\n\tSYS_GETDENTS       = 99  // { int sys_getdents(int fd, void *buf, size_t buflen); }\n\tSYS_GETPRIORITY    = 100 // { int sys_getpriority(int which, id_t who); }\n\tSYS_PIPE2          = 101 // { int sys_pipe2(int *fdp, int flags); }\n\tSYS_DUP3           = 102 // { int sys_dup3(int from, int to, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 95,
   "Snippet": "\tSYS_SYSARCH              = 165 // { int|sys||sysarch(int op, void *parms); }\n\tSYS_PREAD                = 173 // { ssize_t|sys||pread(int fd, void *buf, size_t nbyte, int PAD, off_t offset); }\n\tSYS_PWRITE               = 174 // { ssize_t|sys||pwrite(int fd, const void *buf, size_t nbyte, int PAD, off_t offset); }\n\tSYS_NTP_ADJTIME          = 176 // { int|sys||ntp_adjtime(struct timex *tp); }\n\tSYS_SETGID               = 181 // { int|sys||setgid(gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 177,
   "Snippet": "\tSYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }\n\tSYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }\n\tSYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }\n\tSYS_SCHED_YIELD          = 350 // { int|sys||sched_yield(void); }\n\tSYS_FSYNC_RANGE          = 354 // { int|sys||fsync_range(int fd, int flags, off_t start, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 141,
   "Snippet": "\tSYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }\n\tSYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }\n\tSYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 145,
   "Snippet": "\tSYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }\n\tSYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS_PWRITEV              = 290 // { ssize_t|sys||pwritev(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS___GETCWD             = 296 // { int|sys||__getcwd(char *bufp, size_t length); }\n\tSYS_FCHROOT              = 297 // { int|sys||fchroot(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 161,
   "Snippet": "\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }\n\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }\n\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }\n\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }\n\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 87,
   "Snippet": "\tSYS_FLOCK                = 131 // { int|sys||flock(int fd, int how); }\n\tSYS_MKFIFO               = 132 // { int|sys||mkfifo(const char *path, mode_t mode); }\n\tSYS_SENDTO               = 133 // { ssize_t|sys||sendto(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen); }\n\tSYS_SHUTDOWN             = 134 // { int|sys||shutdown(int s, int how); }\n\tSYS_SOCKETPAIR           = 135 // { int|sys||socketpair(int domain, int type, int protocol, int *rsv); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 179,
   "Snippet": "\tSYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }\n\tSYS_SCHED_YIELD          = 350 // { int|sys||sched_yield(void); }\n\tSYS_FSYNC_RANGE          = 354 // { int|sys||fsync_range(int fd, int flags, off_t start, off_t length); }\n\tSYS_UUIDGEN              = 355 // { int|sys||uuidgen(struct uuid *store, int count); }\n\tSYS_GETVFSSTAT           = 356 // { int|sys||getvfsstat(struct statvfs *buf, size_t bufsize, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 167,
   "Snippet": "\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }\n\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }\n\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }\n\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }\n\tSYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 236,
   "Snippet": "\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }\n\tSYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_POLLTS               = 437 // { int|sys|50|pollts(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_STAT                 = 439 // { int|sys|50|stat(const char *path, struct stat *ub); }\n\tSYS_FSTAT                = 440 // { int|sys|50|fstat(int fd, struct stat *sb); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 188,
   "Snippet": "\tSYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 160,
   "Snippet": "\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }\n\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }\n\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }\n\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }\n\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 12,
   "Snippet": "\tSYS_FORK                 = 2   // { int|sys||fork(void); }\n\tSYS_READ                 = 3   // { ssize_t|sys||read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE                = 4   // { ssize_t|sys||write(int fd, const void *buf, size_t nbyte); }\n\tSYS_OPEN                 = 5   // { int|sys||open(const char *path, int flags, ... mode_t mode); }\n\tSYS_CLOSE                = 6   // { int|sys||close(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 249,
   "Snippet": "\tSYS_WAIT4                = 449 // { int|sys|50|wait4(pid_t pid, int *status, int options, struct rusage *rusage); }\n\tSYS_MKNOD                = 450 // { int|sys|50|mknod(const char *path, mode_t mode, dev_t dev); }\n\tSYS_FHSTAT               = 451 // { int|sys|50|fhstat(const void *fhp, size_t fh_size, struct stat *sb); }\n\tSYS_PIPE2                = 453 // { int|sys||pipe2(int *fildes, int flags); }\n\tSYS_DUP3                 = 454 // { int|sys||dup3(int from, int to, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 47,
   "Snippet": "\tSYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }\n\tSYS___GETLOGIN           = 49  // { int|sys||__getlogin(char *namebuf, size_t namelen); }\n\tSYS___SETLOGIN           = 50  // { int|sys||__setlogin(const char *namebuf); }\n\tSYS_ACCT                 = 51  // { int|sys||acct(const char *path); }\n\tSYS_IOCTL                = 54  // { int|sys||ioctl(int fd, u_long com, ... void *data); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 234,
   "Snippet": "\tSYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }\n\tSYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }\n\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }\n\tSYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_POLLTS               = 437 // { int|sys|50|pollts(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 185,
   "Snippet": "\tSYS_FSTATVFS1            = 358 // { int|sys||fstatvfs1(int fd, struct statvfs *buf, int flags); }\n\tSYS_EXTATTRCTL           = 360 // { int|sys||extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FILE     = 361 // { int|sys||extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 193,
   "Snippet": "\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 212,
   "Snippet": "\tSYS_SOCKET               = 394 // { int|sys|30|socket(int domain, int type, int protocol); }\n\tSYS_GETFH                = 395 // { int|sys|30|getfh(const char *fname, void *fhp, size_t *fh_size); }\n\tSYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }\n\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }\n\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 138,
   "Snippet": "\tSYS_LCHOWN               = 275 // { int|sys||lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_MSYNC                = 277 // { int|sys|13|msync(void *addr, size_t len, int flags); }\n\tSYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 165,
   "Snippet": "\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }\n\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }\n\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }\n\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }\n\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 214,
   "Snippet": "\tSYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }\n\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }\n\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }\n\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }\n\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 216,
   "Snippet": "\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }\n\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }\n\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }\n\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }\n\tSYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 124,
   "Snippet": "\tSYS_SHMDT                = 230 // { int|sys||shmdt(const void *shmaddr); }\n\tSYS_SHMGET               = 231 // { int|sys||shmget(key_t key, size_t size, int shmflg); }\n\tSYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }\n\tSYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }\n\tSYS_TIMER_GETOVERRUN     = 239 // { int|sys||timer_getoverrun(timer_t timerid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 190,
   "Snippet": "\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 164,
   "Snippet": "\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }\n\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }\n\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }\n\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }\n\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 192,
   "Snippet": "\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 257,
   "Snippet": "\tSYS_RENAMEAT             = 458 // { int|sys||renameat(int fromfd, const char *from, int tofd, const char *to); }\n\tSYS_MKFIFOAT             = 459 // { int|sys||mkfifoat(int fd, const char *path, mode_t mode); }\n\tSYS_MKNODAT              = 460 // { int|sys||mknodat(int fd, const char *path, mode_t mode, uint32_t dev); }\n\tSYS_MKDIRAT              = 461 // { int|sys||mkdirat(int fd, const char *path, mode_t mode); }\n\tSYS_FACCESSAT            = 462 // { int|sys||faccessat(int fd, const char *path, int amode, int flag); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 82,
   "Snippet": "\tSYS_FCHOWN               = 123 // { int|sys||fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD               = 124 // { int|sys||fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID             = 126 // { int|sys||setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID             = 127 // { int|sys||setregid(gid_t rgid, gid_t egid); }\n\tSYS_RENAME               = 128 // { int|sys||rename(const char *from, const char *to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 140,
   "Snippet": "\tSYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }\n\tSYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 25,
   "Snippet": "\tSYS_UNMOUNT              = 22  // { int|sys||unmount(const char *path, int flags); }\n\tSYS_SETUID               = 23  // { int|sys||setuid(uid_t uid); }\n\tSYS_GETUID               = 24  // { uid_t|sys||getuid_with_euid(void); }\n\tSYS_GETEUID              = 25  // { uid_t|sys||geteuid(void); }\n\tSYS_PTRACE               = 26  // { int|sys||ptrace(int req, pid_t pid, void *addr, int data); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 228,
   "Snippet": "\tSYS_SETITIMER            = 425 // { int|sys|50|setitimer(int which, const struct itimerval *itv, struct itimerval *oitv); }\n\tSYS_GETITIMER            = 426 // { int|sys|50|getitimer(int which, struct itimerval *itv); }\n\tSYS_CLOCK_GETTIME        = 427 // { int|sys|50|clock_gettime(clockid_t clock_id, struct timespec *tp); }\n\tSYS_CLOCK_SETTIME        = 428 // { int|sys|50|clock_settime(clockid_t clock_id, const struct timespec *tp); }\n\tSYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 105,
   "Snippet": "\tSYS_SETRLIMIT            = 195 // { int|sys||setrlimit(int which, const struct rlimit *rlp); }\n\tSYS_MMAP                 = 197 // { void *|sys||mmap(void *addr, size_t len, int prot, int flags, int fd, long PAD, off_t pos); }\n\tSYS_LSEEK                = 199 // { off_t|sys||lseek(int fd, int PAD, off_t offset, int whence); }\n\tSYS_TRUNCATE             = 200 // { int|sys||truncate(const char *path, int PAD, off_t length); }\n\tSYS_FTRUNCATE            = 201 // { int|sys||ftruncate(int fd, int PAD, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 163,
   "Snippet": "\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }\n\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }\n\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }\n\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }\n\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 219,
   "Snippet": "\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }\n\tSYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }\n\tSYS_SELECT               = 417 // { int|sys|50|select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }\n\tSYS_GETTIMEOFDAY         = 418 // { int|sys|50|gettimeofday(struct timeval *tp, void *tzp); }\n\tSYS_SETTIMEOFDAY         = 419 // { int|sys|50|settimeofday(const struct timeval *tv, const void *tzp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 120,
   "Snippet": "\tSYS_MSGGET               = 225 // { int|sys||msgget(key_t key, int msgflg); }\n\tSYS_MSGSND               = 226 // { int|sys||msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }\n\tSYS_MSGRCV               = 227 // { ssize_t|sys||msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }\n\tSYS_SHMAT                = 228 // { void *|sys||shmat(int shmid, const void *shmaddr, int shmflg); }\n\tSYS_SHMDT                = 230 // { int|sys||shmdt(const void *shmaddr); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 218,
   "Snippet": "\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }\n\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }\n\tSYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }\n\tSYS_SELECT               = 417 // { int|sys|50|select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }\n\tSYS_GETTIMEOFDAY         = 418 // { int|sys|50|gettimeofday(struct timeval *tp, void *tzp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 80,
   "Snippet": "\tSYS_READV                = 120 // { ssize_t|sys||readv(int fd, const struct iovec *iovp, int iovcnt); }\n\tSYS_WRITEV               = 121 // { ssize_t|sys||writev(int fd, const struct iovec *iovp, int iovcnt); }\n\tSYS_FCHOWN               = 123 // { int|sys||fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD               = 124 // { int|sys||fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID             = 126 // { int|sys||setreuid(uid_t ruid, uid_t euid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 112,
   "Snippet": "\tSYS_MUNLOCK              = 204 // { int|sys||munlock(const void *addr, size_t len); }\n\tSYS_UNDELETE             = 205 // { int|sys||undelete(const char *path); }\n\tSYS_GETPGID              = 207 // { pid_t|sys||getpgid(pid_t pid); }\n\tSYS_REBOOT               = 208 // { int|sys||reboot(int opt, char *bootstr); }\n\tSYS_POLL                 = 209 // { int|sys||poll(struct pollfd *fds, u_int nfds, int timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 187,
   "Snippet": "\tSYS_EXTATTR_SET_FILE     = 361 // { int|sys||extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 211,
   "Snippet": "\tSYS_GETDENTS             = 390 // { int|sys|30|getdents(int fd, char *buf, size_t count); }\n\tSYS_SOCKET               = 394 // { int|sys|30|socket(int domain, int type, int protocol); }\n\tSYS_GETFH                = 395 // { int|sys|30|getfh(const char *fname, void *fhp, size_t *fh_size); }\n\tSYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }\n\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 22,
   "Snippet": "\tSYS_CHOWN                = 16  // { int|sys||chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_BREAK                = 17  // { int|sys||obreak(char *nsize); }\n\tSYS_GETPID               = 20  // { pid_t|sys||getpid_with_ppid(void); }\n\tSYS_UNMOUNT              = 22  // { int|sys||unmount(const char *path, int flags); }\n\tSYS_SETUID               = 23  // { int|sys||setuid(uid_t uid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 170,
   "Snippet": "\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }\n\tSYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }\n\tSYS_PMC_GET_INFO         = 341 // { int|sys||pmc_get_info(int ctr, int op, void *args); }\n\tSYS_PMC_CONTROL          = 342 // { int|sys||pmc_control(int ctr, int op, void *args); }\n\tSYS_RASCTL               = 343 // { int|sys||rasctl(void *addr, size_t len, int op); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 191,
   "Snippet": "\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 213,
   "Snippet": "\tSYS_GETFH                = 395 // { int|sys|30|getfh(const char *fname, void *fhp, size_t *fh_size); }\n\tSYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }\n\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }\n\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }\n\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 154,
   "Snippet": "\tSYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }\n\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }\n\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }\n\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }\n\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 20,
   "Snippet": "\tSYS_FCHDIR               = 13  // { int|sys||fchdir(int fd); }\n\tSYS_CHMOD                = 15  // { int|sys||chmod(const char *path, mode_t mode); }\n\tSYS_CHOWN                = 16  // { int|sys||chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_BREAK                = 17  // { int|sys||obreak(char *nsize); }\n\tSYS_GETPID               = 20  // { pid_t|sys||getpid_with_ppid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 46,
   "Snippet": "\tSYS_KTRACE               = 45  // { int|sys||ktrace(const char *fname, int ops, int facs, pid_t pid); }\n\tSYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }\n\tSYS___GETLOGIN           = 49  // { int|sys||__getlogin(char *namebuf, size_t namelen); }\n\tSYS___SETLOGIN           = 50  // { int|sys||__setlogin(const char *namebuf); }\n\tSYS_ACCT                 = 51  // { int|sys||acct(const char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 215,
   "Snippet": "\tSYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }\n\tSYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }\n\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }\n\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }\n\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 83,
   "Snippet": "\tSYS_FCHMOD               = 124 // { int|sys||fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID             = 126 // { int|sys||setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID             = 127 // { int|sys||setregid(gid_t rgid, gid_t egid); }\n\tSYS_RENAME               = 128 // { int|sys||rename(const char *from, const char *to); }\n\tSYS_FLOCK                = 131 // { int|sys||flock(int fd, int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 146,
   "Snippet": "\tSYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS_PWRITEV              = 290 // { ssize_t|sys||pwritev(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS___GETCWD             = 296 // { int|sys||__getcwd(char *bufp, size_t length); }\n\tSYS_FCHROOT              = 297 // { int|sys||fchroot(int fd); }\n\tSYS_LCHFLAGS             = 304 // { int|sys||lchflags(const char *path, u_long flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 253,
   "Snippet": "\tSYS_DUP3                 = 454 // { int|sys||dup3(int from, int to, int flags); }\n\tSYS_KQUEUE1              = 455 // { int|sys||kqueue1(int flags); }\n\tSYS_PACCEPT              = 456 // { int|sys||paccept(int s, struct sockaddr *name, socklen_t *anamelen, const sigset_t *mask, int flags); }\n\tSYS_LINKAT               = 457 // { int|sys||linkat(int fd1, const char *name1, int fd2, const char *name2, int flags); }\n\tSYS_RENAMEAT             = 458 // { int|sys||renameat(int fromfd, const char *from, int tofd, const char *to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 144,
   "Snippet": "\tSYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }\n\tSYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }\n\tSYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS_PWRITEV              = 290 // { ssize_t|sys||pwritev(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }\n\tSYS___GETCWD             = 296 // { int|sys||__getcwd(char *bufp, size_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 156,
   "Snippet": "\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }\n\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }\n\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }\n\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }\n\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 194,
   "Snippet": "\tSYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_LINK    = 372 // { ssize_t|sys||extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 157,
   "Snippet": "\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }\n\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }\n\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }\n\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }\n\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 229,
   "Snippet": "\tSYS_GETITIMER            = 426 // { int|sys|50|getitimer(int which, struct itimerval *itv); }\n\tSYS_CLOCK_GETTIME        = 427 // { int|sys|50|clock_gettime(clockid_t clock_id, struct timespec *tp); }\n\tSYS_CLOCK_SETTIME        = 428 // { int|sys|50|clock_settime(clockid_t clock_id, const struct timespec *tp); }\n\tSYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }\n\tSYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 166,
   "Snippet": "\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }\n\tSYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }\n\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }\n\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }\n\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 136,
   "Snippet": "\tSYS_MINHERIT             = 273 // { int|sys||minherit(void *addr, size_t len, int inherit); }\n\tSYS_LCHMOD               = 274 // { int|sys||lchmod(const char *path, mode_t mode); }\n\tSYS_LCHOWN               = 275 // { int|sys||lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_MSYNC                = 277 // { int|sys|13|msync(void *addr, size_t len, int flags); }\n\tSYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 132,
   "Snippet": "\tSYS_SIGQUEUEINFO         = 245 // { int|sys||sigqueueinfo(pid_t pid, const siginfo_t *info); }\n\tSYS_MODCTL               = 246 // { int|sys||modctl(int cmd, void *arg); }\n\tSYS___POSIX_RENAME       = 270 // { int|sys||__posix_rename(const char *from, const char *to); }\n\tSYS_SWAPCTL              = 271 // { int|sys||swapctl(int cmd, void *arg, int misc); }\n\tSYS_MINHERIT             = 273 // { int|sys||minherit(void *addr, size_t len, int inherit); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 142,
   "Snippet": "\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }\n\tSYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }\n\tSYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }\n\tSYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 45,
   "Snippet": "\tSYS_PROFIL               = 44  // { int|sys||profil(char *samples, size_t size, u_long offset, u_int scale); }\n\tSYS_KTRACE               = 45  // { int|sys||ktrace(const char *fname, int ops, int facs, pid_t pid); }\n\tSYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }\n\tSYS___GETLOGIN           = 49  // { int|sys||__getlogin(char *namebuf, size_t namelen); }\n\tSYS___SETLOGIN           = 50  // { int|sys||__setlogin(const char *namebuf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 186,
   "Snippet": "\tSYS_EXTATTRCTL           = 360 // { int|sys||extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FILE     = 361 // { int|sys||extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 271,
   "Snippet": "\tSYS_FUTIMENS             = 472 // { int|sys||futimens(int fd, const struct timespec *tptr); }\n\tSYS___QUOTACTL           = 473 // { int|sys||__quotactl(const char *path, struct quotactl_args *args); }\n\tSYS_POSIX_SPAWN          = 474 // { int|sys||posix_spawn(pid_t *pid, const char *path, const struct posix_spawn_file_actions *file_actions, const struct posix_spawnattr *attrp, char *const *argv, char *const *envp); }\n\tSYS_RECVMMSG             = 475 // { int|sys||recvmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct timespec *timeout); }\n\tSYS_SENDMMSG             = 476 // { int|sys||sendmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 189,
   "Snippet": "\tSYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }\n\tSYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n\tSYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 158,
   "Snippet": "\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }\n\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }\n\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }\n\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }\n\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 176,
   "Snippet": "\tSYS__SCHED_SETPARAM      = 346 // { int|sys||_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params); }\n\tSYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }\n\tSYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }\n\tSYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }\n\tSYS_SCHED_YIELD          = 350 // { int|sys||sched_yield(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 54,
   "Snippet": "\tSYS_READLINK             = 58  // { ssize_t|sys||readlink(const char *path, char *buf, size_t count); }\n\tSYS_EXECVE               = 59  // { int|sys||execve(const char *path, char * const *argp, char * const *envp); }\n\tSYS_UMASK                = 60  // { mode_t|sys||umask(mode_t newmask); }\n\tSYS_CHROOT               = 61  // { int|sys||chroot(const char *path); }\n\tSYS_VFORK                = 66  // { int|sys||vfork(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 151,
   "Snippet": "\tSYS_ISSETUGID            = 305 // { int|sys||issetugid(void); }\n\tSYS_UTRACE               = 306 // { int|sys||utrace(const char *label, void *addr, size_t len); }\n\tSYS_GETCONTEXT           = 307 // { int|sys||getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }\n\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 52,
   "Snippet": "\tSYS_REVOKE               = 56  // { int|sys||revoke(const char *path); }\n\tSYS_SYMLINK              = 57  // { int|sys||symlink(const char *path, const char *link); }\n\tSYS_READLINK             = 58  // { ssize_t|sys||readlink(const char *path, char *buf, size_t count); }\n\tSYS_EXECVE               = 59  // { int|sys||execve(const char *path, char * const *argp, char * const *envp); }\n\tSYS_UMASK                = 60  // { mode_t|sys||umask(mode_t newmask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 43,
   "Snippet": "\tSYS_PIPE                 = 42  // { int|sys||pipe(void); }\n\tSYS_GETEGID              = 43  // { gid_t|sys||getegid(void); }\n\tSYS_PROFIL               = 44  // { int|sys||profil(char *samples, size_t size, u_long offset, u_int scale); }\n\tSYS_KTRACE               = 45  // { int|sys||ktrace(const char *fname, int ops, int facs, pid_t pid); }\n\tSYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 139,
   "Snippet": "\tSYS_MSYNC                = 277 // { int|sys|13|msync(void *addr, size_t len, int flags); }\n\tSYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }\n\tSYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 175,
   "Snippet": "\tSYS_KQUEUE               = 344 // { int|sys||kqueue(void); }\n\tSYS__SCHED_SETPARAM      = 346 // { int|sys||_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params); }\n\tSYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }\n\tSYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }\n\tSYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 196,
   "Snippet": "\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_LINK    = 372 // { ssize_t|sys||extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_SETXATTR             = 375 // { int|sys||setxattr(const char *path, const char *name, const void *value, size_t size, int flags); }\n\tSYS_LSETXATTR            = 376 // { int|sys||lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 104,
   "Snippet": "\tSYS_GETRLIMIT            = 194 // { int|sys||getrlimit(int which, struct rlimit *rlp); }\n\tSYS_SETRLIMIT            = 195 // { int|sys||setrlimit(int which, const struct rlimit *rlp); }\n\tSYS_MMAP                 = 197 // { void *|sys||mmap(void *addr, size_t len, int prot, int flags, int fd, long PAD, off_t pos); }\n\tSYS_LSEEK                = 199 // { off_t|sys||lseek(int fd, int PAD, off_t offset, int whence); }\n\tSYS_TRUNCATE             = 200 // { int|sys||truncate(const char *path, int PAD, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 108,
   "Snippet": "\tSYS_TRUNCATE             = 200 // { int|sys||truncate(const char *path, int PAD, off_t length); }\n\tSYS_FTRUNCATE            = 201 // { int|sys||ftruncate(int fd, int PAD, off_t length); }\n\tSYS___SYSCTL             = 202 // { int|sys||__sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, const void *new, size_t newlen); }\n\tSYS_MLOCK                = 203 // { int|sys||mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK              = 204 // { int|sys||munlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 126,
   "Snippet": "\tSYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }\n\tSYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }\n\tSYS_TIMER_GETOVERRUN     = 239 // { int|sys||timer_getoverrun(timer_t timerid); }\n\tSYS_FDATASYNC            = 241 // { int|sys||fdatasync(int fd); }\n\tSYS_MLOCKALL             = 242 // { int|sys||mlockall(int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 244,
   "Snippet": "\tSYS_MSGCTL               = 444 // { int|sys|50|msgctl(int msqid, int cmd, struct msqid_ds *buf); }\n\tSYS_GETRUSAGE            = 445 // { int|sys|50|getrusage(int who, struct rusage *rusage); }\n\tSYS_TIMER_SETTIME        = 446 // { int|sys|50|timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }\n\tSYS_TIMER_GETTIME        = 447 // { int|sys|50|timer_gettime(timer_t timerid, struct itimerspec *value); }\n\tSYS_NTP_GETTIME          = 448 // { int|sys|50|ntp_gettime(struct ntptimeval *ntvp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 125,
   "Snippet": "\tSYS_SHMGET               = 231 // { int|sys||shmget(key_t key, size_t size, int shmflg); }\n\tSYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }\n\tSYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }\n\tSYS_TIMER_GETOVERRUN     = 239 // { int|sys||timer_getoverrun(timer_t timerid); }\n\tSYS_FDATASYNC            = 241 // { int|sys||fdatasync(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 217,
   "Snippet": "\tSYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }\n\tSYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }\n\tSYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }\n\tSYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }\n\tSYS_SELECT               = 417 // { int|sys|50|select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 162,
   "Snippet": "\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }\n\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }\n\tSYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }\n\tSYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }\n\tSYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 230,
   "Snippet": "\tSYS_CLOCK_GETTIME        = 427 // { int|sys|50|clock_gettime(clockid_t clock_id, struct timespec *tp); }\n\tSYS_CLOCK_SETTIME        = 428 // { int|sys|50|clock_settime(clockid_t clock_id, const struct timespec *tp); }\n\tSYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }\n\tSYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }\n\tSYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 155,
   "Snippet": "\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }\n\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }\n\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }\n\tSYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }\n\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 30,
   "Snippet": "\tSYS_RECVMSG              = 27  // { ssize_t|sys||recvmsg(int s, struct msghdr *msg, int flags); }\n\tSYS_SENDMSG              = 28  // { ssize_t|sys||sendmsg(int s, const struct msghdr *msg, int flags); }\n\tSYS_RECVFROM             = 29  // { ssize_t|sys||recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); }\n\tSYS_ACCEPT               = 30  // { int|sys||accept(int s, struct sockaddr *name, socklen_t *anamelen); }\n\tSYS_GETPEERNAME          = 31  // { int|sys||getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 11,
   "Snippet": "\tSYS_EXIT                 = 1   // { void|sys||exit(int rval); }\n\tSYS_FORK                 = 2   // { int|sys||fork(void); }\n\tSYS_READ                 = 3   // { ssize_t|sys||read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE                = 4   // { ssize_t|sys||write(int fd, const void *buf, size_t nbyte); }\n\tSYS_OPEN                 = 5   // { int|sys||open(const char *path, int flags, ... mode_t mode); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 270,
   "Snippet": "\tSYS_UNLINKAT             = 471 // { int|sys||unlinkat(int fd, const char *path, int flag); }\n\tSYS_FUTIMENS             = 472 // { int|sys||futimens(int fd, const struct timespec *tptr); }\n\tSYS___QUOTACTL           = 473 // { int|sys||__quotactl(const char *path, struct quotactl_args *args); }\n\tSYS_POSIX_SPAWN          = 474 // { int|sys||posix_spawn(pid_t *pid, const char *path, const struct posix_spawn_file_actions *file_actions, const struct posix_spawnattr *attrp, char *const *argv, char *const *envp); }\n\tSYS_RECVMMSG             = 475 // { int|sys||recvmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct timespec *timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 123,
   "Snippet": "\tSYS_SHMAT                = 228 // { void *|sys||shmat(int shmid, const void *shmaddr, int shmflg); }\n\tSYS_SHMDT                = 230 // { int|sys||shmdt(const void *shmaddr); }\n\tSYS_SHMGET               = 231 // { int|sys||shmget(key_t key, size_t size, int shmflg); }\n\tSYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }\n\tSYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 240,
   "Snippet": "\tSYS_FSTAT                = 440 // { int|sys|50|fstat(int fd, struct stat *sb); }\n\tSYS_LSTAT                = 441 // { int|sys|50|lstat(const char *path, struct stat *ub); }\n\tSYS___SEMCTL             = 442 // { int|sys|50|__semctl(int semid, int semnum, int cmd, ... union __semun *arg); }\n\tSYS_SHMCTL               = 443 // { int|sys|50|shmctl(int shmid, int cmd, struct shmid_ds *buf); }\n\tSYS_MSGCTL               = 444 // { int|sys|50|msgctl(int msqid, int cmd, struct msqid_ds *buf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 174,
   "Snippet": "\tSYS_RASCTL               = 343 // { int|sys||rasctl(void *addr, size_t len, int op); }\n\tSYS_KQUEUE               = 344 // { int|sys||kqueue(void); }\n\tSYS__SCHED_SETPARAM      = 346 // { int|sys||_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params); }\n\tSYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }\n\tSYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 232,
   "Snippet": "\tSYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }\n\tSYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }\n\tSYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }\n\tSYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }\n\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 168,
   "Snippet": "\tSYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }\n\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }\n\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }\n\tSYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }\n\tSYS_PMC_GET_INFO         = 341 // { int|sys||pmc_get_info(int ctr, int op, void *args); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 130,
   "Snippet": "\tSYS_MLOCKALL             = 242 // { int|sys||mlockall(int flags); }\n\tSYS_MUNLOCKALL           = 243 // { int|sys||munlockall(void); }\n\tSYS_SIGQUEUEINFO         = 245 // { int|sys||sigqueueinfo(pid_t pid, const siginfo_t *info); }\n\tSYS_MODCTL               = 246 // { int|sys||modctl(int cmd, void *arg); }\n\tSYS___POSIX_RENAME       = 270 // { int|sys||__posix_rename(const char *from, const char *to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 94,
   "Snippet": "\tSYS_SETSID               = 147 // { int|sys||setsid(void); }\n\tSYS_SYSARCH              = 165 // { int|sys||sysarch(int op, void *parms); }\n\tSYS_PREAD                = 173 // { ssize_t|sys||pread(int fd, void *buf, size_t nbyte, int PAD, off_t offset); }\n\tSYS_PWRITE               = 174 // { ssize_t|sys||pwrite(int fd, const void *buf, size_t nbyte, int PAD, off_t offset); }\n\tSYS_NTP_ADJTIME          = 176 // { int|sys||ntp_adjtime(struct timex *tp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 152,
   "Snippet": "\tSYS_UTRACE               = 306 // { int|sys||utrace(const char *label, void *addr, size_t len); }\n\tSYS_GETCONTEXT           = 307 // { int|sys||getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }\n\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }\n\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 261,
   "Snippet": "\tSYS_FACCESSAT            = 462 // { int|sys||faccessat(int fd, const char *path, int amode, int flag); }\n\tSYS_FCHMODAT             = 463 // { int|sys||fchmodat(int fd, const char *path, mode_t mode, int flag); }\n\tSYS_FCHOWNAT             = 464 // { int|sys||fchownat(int fd, const char *path, uid_t owner, gid_t group, int flag); }\n\tSYS_FEXECVE              = 465 // { int|sys||fexecve(int fd, char * const *argp, char * const *envp); }\n\tSYS_FSTATAT              = 466 // { int|sys||fstatat(int fd, const char *path, struct stat *buf, int flag); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 195,
   "Snippet": "\tSYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }\n\tSYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_EXTATTR_LIST_LINK    = 372 // { ssize_t|sys||extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }\n\tSYS_SETXATTR             = 375 // { int|sys||setxattr(const char *path, const char *name, const void *value, size_t size, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 153,
   "Snippet": "\tSYS_GETCONTEXT           = 307 // { int|sys||getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }\n\tSYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }\n\tSYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }\n\tSYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 233,
   "Snippet": "\tSYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }\n\tSYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }\n\tSYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }\n\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }\n\tSYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 235,
   "Snippet": "\tSYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }\n\tSYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }\n\tSYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_POLLTS               = 437 // { int|sys|50|pollts(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }\n\tSYS_STAT                 = 439 // { int|sys|50|stat(const char *path, struct stat *ub); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 67,
   "Snippet": "\tSYS_SETGROUPS            = 80  // { int|sys||setgroups(int gidsetsize, const gid_t *gidset); }\n\tSYS_GETPGRP              = 81  // { int|sys||getpgrp(void); }\n\tSYS_SETPGID              = 82  // { int|sys||setpgid(pid_t pid, pid_t pgid); }\n\tSYS_DUP2                 = 90  // { int|sys||dup2(int from, int to); }\n\tSYS_FCNTL                = 92  // { int|sys||fcntl(int fd, int cmd, ... void *arg); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 248,
   "Snippet": "\tSYS_NTP_GETTIME          = 448 // { int|sys|50|ntp_gettime(struct ntptimeval *ntvp); }\n\tSYS_WAIT4                = 449 // { int|sys|50|wait4(pid_t pid, int *status, int options, struct rusage *rusage); }\n\tSYS_MKNOD                = 450 // { int|sys|50|mknod(const char *path, mode_t mode, dev_t dev); }\n\tSYS_FHSTAT               = 451 // { int|sys|50|fhstat(const void *fhp, size_t fh_size, struct stat *sb); }\n\tSYS_PIPE2                = 453 // { int|sys||pipe2(int *fildes, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 169,
   "Snippet": "\tSYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }\n\tSYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }\n\tSYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }\n\tSYS_PMC_GET_INFO         = 341 // { int|sys||pmc_get_info(int ctr, int op, void *args); }\n\tSYS_PMC_CONTROL          = 342 // { int|sys||pmc_control(int ctr, int op, void *args); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 159,
   "Snippet": "\tSYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }\n\tSYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }\n\tSYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }\n\tSYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }\n\tSYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm.go",
   "Line": 245,
   "Snippet": "\tSYS_GETRUSAGE            = 445 // { int|sys|50|getrusage(int who, struct rusage *rusage); }\n\tSYS_TIMER_SETTIME        = 446 // { int|sys|50|timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }\n\tSYS_TIMER_GETTIME        = 447 // { int|sys|50|timer_gettime(timer_t timerid, struct itimerspec *value); }\n\tSYS_NTP_GETTIME          = 448 // { int|sys|50|ntp_gettime(struct ntptimeval *ntvp); }\n\tSYS_WAIT4                = 449 // { int|sys|50|wait4(pid_t pid, int *status, int options, struct rusage *rusage); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 82,
   "Snippet": "\tSYS_MUNMAP         = 73  // { int sys_munmap(void *addr, size_t len); }\n\tSYS_MPROTECT       = 74  // { int sys_mprotect(void *addr, size_t len, \\\n\tSYS_MADVISE        = 75  // { int sys_madvise(void *addr, size_t len, \\\n\tSYS_UTIMES         = 76  // { int sys_utimes(const char *path, \\\n\tSYS_FUTIMES        = 77  // { int sys_futimes(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 81,
   "Snippet": "\tSYS_KEVENT         = 72  // { int sys_kevent(int fd, \\\n\tSYS_MUNMAP         = 73  // { int sys_munmap(void *addr, size_t len); }\n\tSYS_MPROTECT       = 74  // { int sys_mprotect(void *addr, size_t len, \\\n\tSYS_MADVISE        = 75  // { int sys_madvise(void *addr, size_t len, \\\n\tSYS_UTIMES         = 76  // { int sys_utimes(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 187,
   "Snippet": "\tSYS_SEMOP          = 290 // { int sys_semop(int semid, struct sembuf *sops, \\\n\tSYS_FHSTAT         = 294 // { int sys_fhstat(const fhandle_t *fhp, \\\n\tSYS___SEMCTL       = 295 // { int sys___semctl(int semid, int semnum, int cmd, \\\n\tSYS_SHMCTL         = 296 // { int sys_shmctl(int shmid, int cmd, \\\n\tSYS_MSGCTL         = 297 // { int sys_msgctl(int msqid, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 161,
   "Snippet": "\tSYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg); }\n\tSYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, \\\n\tSYS_MSGRCV         = 227 // { int sys_msgrcv(int msqid, void *msgp, size_t msgsz, \\\n\tSYS_SHMAT          = 228 // { void *sys_shmat(int shmid, const void *shmaddr, \\\n\tSYS_SHMDT          = 230 // { int sys_shmdt(const void *shmaddr); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 141,
   "Snippet": "\tSYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void *buf, \\\n\tSYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void *buf, \\\n\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }\n\tSYS_SETEGID        = 182 // { int sys_setegid(gid_t egid); }\n\tSYS_SETEUID        = 183 // { int sys_seteuid(uid_t euid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 65,
   "Snippet": "\tSYS_REVOKE         = 56  // { int sys_revoke(const char *path); }\n\tSYS_SYMLINK        = 57  // { int sys_symlink(const char *path, \\\n\tSYS_READLINK       = 58  // { ssize_t sys_readlink(const char *path, \\\n\tSYS_EXECVE         = 59  // { int sys_execve(const char *path, \\\n\tSYS_UMASK          = 60  // { mode_t sys_umask(mode_t newmask); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 31,
   "Snippet": "\tSYS_MOUNT          = 21  // { int sys_mount(const char *type, const char *path, \\\n\tSYS_UNMOUNT        = 22  // { int sys_unmount(const char *path, int flags); }\n\tSYS_SETUID         = 23  // { int sys_setuid(uid_t uid); }\n\tSYS_GETUID         = 24  // { uid_t sys_getuid(void); }\n\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 43,
   "Snippet": "\tSYS_ACCESS         = 33  // { int sys_access(const char *path, int amode); }\n\tSYS_CHFLAGS        = 34  // { int sys_chflags(const char *path, u_int flags); }\n\tSYS_FCHFLAGS       = 35  // { int sys_fchflags(int fd, u_int flags); }\n\tSYS_SYNC           = 36  // { void sys_sync(void); }\n\tSYS_STAT           = 38  // { int sys_stat(const char *path, struct stat *ub); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 12,
   "Snippet": "\tSYS_FORK           = 2   // { int sys_fork(void); }\n\tSYS_READ           = 3   // { ssize_t sys_read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE          = 4   // { ssize_t sys_write(int fd, const void *buf, \\\n\tSYS_OPEN           = 5   // { int sys_open(const char *path, \\\n\tSYS_CLOSE          = 6   // { int sys_close(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 100,
   "Snippet": "\tSYS_FCNTL          = 92  // { int sys_fcntl(int fd, int cmd, ... void *arg); }\n\tSYS_ACCEPT4        = 93  // { int sys_accept4(int s, struct sockaddr *name, \\\n\tSYS___THRSLEEP     = 94  // { int sys___thrsleep(const volatile void *ident, \\\n\tSYS_FSYNC          = 95  // { int sys_fsync(int fd); }\n\tSYS_SETPRIORITY    = 96  // { int sys_setpriority(int which, id_t who, int prio); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 37,
   "Snippet": "\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\\n\tSYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, \\\n\tSYS_RECVFROM       = 29  // { ssize_t sys_recvfrom(int s, void *buf, size_t len, \\\n\tSYS_ACCEPT         = 30  // { int sys_accept(int s, struct sockaddr *name, \\\n\tSYS_GETPEERNAME    = 31  // { int sys_getpeername(int fdes, struct sockaddr *asa, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 142,
   "Snippet": "\tSYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void *buf, \\\n\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }\n\tSYS_SETEGID        = 182 // { int sys_setegid(gid_t egid); }\n\tSYS_SETEUID        = 183 // { int sys_seteuid(uid_t euid); }\n\tSYS_PATHCONF       = 191 // { long sys_pathconf(const char *path, int name); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 178,
   "Snippet": "\tSYS_MUNLOCKALL     = 272 // { int sys_munlockall(void); }\n\tSYS_GETRESUID      = 281 // { int sys_getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 194,
   "Snippet": "\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\\n\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }\n\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\\n\tSYS___GETCWD       = 304 // { int sys___getcwd(char *buf, size_t len); }\n\tSYS_ADJFREQ        = 305 // { int sys_adjfreq(const int64_t *freq, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 19,
   "Snippet": "\tSYS_LINK           = 9   // { int sys_link(const char *path, const char *link); }\n\tSYS_UNLINK         = 10  // { int sys_unlink(const char *path); }\n\tSYS_WAIT4          = 11  // { pid_t sys_wait4(pid_t pid, int *status, \\\n\tSYS_CHDIR          = 12  // { int sys_chdir(const char *path); }\n\tSYS_FCHDIR         = 13  // { int sys_fchdir(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 171,
   "Snippet": "\tSYS_MSYNC          = 256 // { int sys_msync(void *addr, size_t len, int flags); }\n\tSYS_PIPE           = 263 // { int sys_pipe(int *fdp); }\n\tSYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t *fhp, int flags); }\n\tSYS_PREADV         = 267 // { ssize_t sys_preadv(int fd, \\\n\tSYS_PWRITEV        = 268 // { ssize_t sys_pwritev(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 137,
   "Snippet": "\tSYS_QUOTACTL       = 148 // { int sys_quotactl(const char *path, int cmd, \\\n\tSYS_NFSSVC         = 155 // { int sys_nfssvc(int flag, void *argp); }\n\tSYS_GETFH          = 161 // { int sys_getfh(const char *fname, fhandle_t *fhp); }\n\tSYS_SYSARCH        = 165 // { int sys_sysarch(int op, void *parms); }\n\tSYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void *buf, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 15,
   "Snippet": "\tSYS_OPEN           = 5   // { int sys_open(const char *path, \\\n\tSYS_CLOSE          = 6   // { int sys_close(int fd); }\n\tSYS_GETENTROPY     = 7   // { int sys_getentropy(void *buf, size_t nbyte); }\n\tSYS___TFORK        = 8   // { int sys___tfork(const struct __tfork *param, \\\n\tSYS_LINK           = 9   // { int sys_link(const char *path, const char *link); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 181,
   "Snippet": "\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_MQUERY         = 286 // { void *sys_mquery(void *addr, size_t len, int prot, \\\n\tSYS_CLOSEFROM      = 287 // { int sys_closefrom(int fd); }\n\tSYS_SIGALTSTACK    = 288 // { int sys_sigaltstack(const struct sigaltstack *nss, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 85,
   "Snippet": "\tSYS_UTIMES         = 76  // { int sys_utimes(const char *path, \\\n\tSYS_FUTIMES        = 77  // { int sys_futimes(int fd, \\\n\tSYS_MINCORE        = 78  // { int sys_mincore(void *addr, size_t len, \\\n\tSYS_GETGROUPS      = 79  // { int sys_getgroups(int gidsetsize, \\\n\tSYS_SETGROUPS      = 80  // { int sys_setgroups(int gidsetsize, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 46,
   "Snippet": "\tSYS_SYNC           = 36  // { void sys_sync(void); }\n\tSYS_STAT           = 38  // { int sys_stat(const char *path, struct stat *ub); }\n\tSYS_GETPPID        = 39  // { pid_t sys_getppid(void); }\n\tSYS_LSTAT          = 40  // { int sys_lstat(const char *path, struct stat *ub); }\n\tSYS_DUP            = 41  // { int sys_dup(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 179,
   "Snippet": "\tSYS_GETRESUID      = 281 // { int sys_getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_MQUERY         = 286 // { void *sys_mquery(void *addr, size_t len, int prot, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 196,
   "Snippet": "\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\\n\tSYS___GETCWD       = 304 // { int sys___getcwd(char *buf, size_t len); }\n\tSYS_ADJFREQ        = 305 // { int sys_adjfreq(const int64_t *freq, \\\n\tSYS_SETRTABLE      = 310 // { int sys_setrtable(int rtableid); }\n\tSYS_GETRTABLE      = 311 // { int sys_getrtable(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 69,
   "Snippet": "\tSYS_UMASK          = 60  // { mode_t sys_umask(mode_t newmask); }\n\tSYS_CHROOT         = 61  // { int sys_chroot(const char *path); }\n\tSYS_GETFSSTAT      = 62  // { int sys_getfsstat(struct statfs *buf, size_t bufsize, \\\n\tSYS_STATFS         = 63  // { int sys_statfs(const char *path, \\\n\tSYS_FSTATFS        = 64  // { int sys_fstatfs(int fd, struct statfs *buf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 51,
   "Snippet": "\tSYS_FSTATAT        = 42  // { int sys_fstatat(int fd, const char *path, \\\n\tSYS_GETEGID        = 43  // { gid_t sys_getegid(void); }\n\tSYS_PROFIL         = 44  // { int sys_profil(caddr_t samples, size_t size, \\\n\tSYS_KTRACE         = 45  // { int sys_ktrace(const char *fname, int ops, \\\n\tSYS_SIGACTION      = 46  // { int sys_sigaction(int signum, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 56,
   "Snippet": "\tSYS_GETGID         = 47  // { gid_t sys_getgid(void); }\n\tSYS_SIGPROCMASK    = 48  // { int sys_sigprocmask(int how, sigset_t mask); }\n\tSYS_GETLOGIN       = 49  // { int sys_getlogin(char *namebuf, u_int namelen); }\n\tSYS_SETLOGIN       = 50  // { int sys_setlogin(const char *namebuf); }\n\tSYS_ACCT           = 51  // { int sys_acct(const char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 211,
   "Snippet": "\tSYS_SYMLINKAT      = 324 // { int sys_symlinkat(const char *path, int fd, \\\n\tSYS_UNLINKAT       = 325 // { int sys_unlinkat(int fd, const char *path, \\\n\tSYS___SET_TCB      = 329 // { void sys___set_tcb(void *tcb); }\n\tSYS___GET_TCB      = 330 // { void *sys___get_tcb(void); }\n)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 23,
   "Snippet": "\tSYS_FCHDIR         = 13  // { int sys_fchdir(int fd); }\n\tSYS_MKNOD          = 14  // { int sys_mknod(const char *path, mode_t mode, \\\n\tSYS_CHMOD          = 15  // { int sys_chmod(const char *path, mode_t mode); }\n\tSYS_CHOWN          = 16  // { int sys_chown(const char *path, uid_t uid, \\\n\tSYS_OBREAK         = 17  // { int sys_obreak(char *nsize); } break"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 119,
   "Snippet": "\tSYS_GETSOCKOPT     = 118 // { int sys_getsockopt(int s, int level, int name, \\\n\tSYS_READV          = 120 // { ssize_t sys_readv(int fd, \\\n\tSYS_WRITEV         = 121 // { ssize_t sys_writev(int fd, \\\n\tSYS_KILL           = 122 // { int sys_kill(int pid, int signum); }\n\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 105,
   "Snippet": "\tSYS_SOCKET         = 97  // { int sys_socket(int domain, int type, int protocol); }\n\tSYS_CONNECT        = 98  // { int sys_connect(int s, const struct sockaddr *name, \\\n\tSYS_GETDENTS       = 99  // { int sys_getdents(int fd, void *buf, size_t buflen); }\n\tSYS_GETPRIORITY    = 100 // { int sys_getpriority(int which, id_t who); }\n\tSYS_PIPE2          = 101 // { int sys_pipe2(int *fdp, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 186,
   "Snippet": "\tSYS_SHMGET         = 289 // { int sys_shmget(key_t key, size_t size, int shmflg); }\n\tSYS_SEMOP          = 290 // { int sys_semop(int semid, struct sembuf *sops, \\\n\tSYS_FHSTAT         = 294 // { int sys_fhstat(const fhandle_t *fhp, \\\n\tSYS___SEMCTL       = 295 // { int sys___semctl(int semid, int semnum, int cmd, \\\n\tSYS_SHMCTL         = 296 // { int sys_shmctl(int shmid, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 159,
   "Snippet": "\tSYS_UTRACE         = 209 // { int sys_utrace(const char *label, const void *addr, \\\n\tSYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg); }\n\tSYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg); }\n\tSYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, \\\n\tSYS_MSGRCV         = 227 // { int sys_msgrcv(int msqid, void *msgp, size_t msgsz, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 160,
   "Snippet": "\tSYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg); }\n\tSYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg); }\n\tSYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, \\\n\tSYS_MSGRCV         = 227 // { int sys_msgrcv(int msqid, void *msgp, size_t msgsz, \\\n\tSYS_SHMAT          = 228 // { void *sys_shmat(int shmid, const void *shmaddr, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 158,
   "Snippet": "\tSYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid); }\n\tSYS_UTRACE         = 209 // { int sys_utrace(const char *label, const void *addr, \\\n\tSYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg); }\n\tSYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg); }\n\tSYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 152,
   "Snippet": "\tSYS_LSEEK          = 199 // { off_t sys_lseek(int fd, int pad, off_t offset, \\\n\tSYS_TRUNCATE       = 200 // { int sys_truncate(const char *path, int pad, \\\n\tSYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length); }\n\tSYS___SYSCTL       = 202 // { int sys___sysctl(const int *name, u_int namelen, \\\n\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 156,
   "Snippet": "\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK        = 204 // { int sys_munlock(const void *addr, size_t len); }\n\tSYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid); }\n\tSYS_UTRACE         = 209 // { int sys_utrace(const char *label, const void *addr, \\\n\tSYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 195,
   "Snippet": "\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }\n\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\\n\tSYS___GETCWD       = 304 // { int sys___getcwd(char *buf, size_t len); }\n\tSYS_ADJFREQ        = 305 // { int sys_adjfreq(const int64_t *freq, \\\n\tSYS_SETRTABLE      = 310 // { int sys_setrtable(int rtableid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 32,
   "Snippet": "\tSYS_UNMOUNT        = 22  // { int sys_unmount(const char *path, int flags); }\n\tSYS_SETUID         = 23  // { int sys_setuid(uid_t uid); }\n\tSYS_GETUID         = 24  // { uid_t sys_getuid(void); }\n\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }\n\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 22,
   "Snippet": "\tSYS_CHDIR          = 12  // { int sys_chdir(const char *path); }\n\tSYS_FCHDIR         = 13  // { int sys_fchdir(int fd); }\n\tSYS_MKNOD          = 14  // { int sys_mknod(const char *path, mode_t mode, \\\n\tSYS_CHMOD          = 15  // { int sys_chmod(const char *path, mode_t mode); }\n\tSYS_CHOWN          = 16  // { int sys_chown(const char *path, uid_t uid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 127,
   "Snippet": "\tSYS_RENAME         = 128 // { int sys_rename(const char *from, const char *to); }\n\tSYS_FLOCK          = 131 // { int sys_flock(int fd, int how); }\n\tSYS_MKFIFO         = 132 // { int sys_mkfifo(const char *path, mode_t mode); }\n\tSYS_SENDTO         = 133 // { ssize_t sys_sendto(int s, const void *buf, \\\n\tSYS_SHUTDOWN       = 134 // { int sys_shutdown(int s, int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 35,
   "Snippet": "\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }\n\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\\n\tSYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, \\\n\tSYS_RECVFROM       = 29  // { ssize_t sys_recvfrom(int s, void *buf, size_t len, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 80,
   "Snippet": "\tSYS_SELECT         = 71  // { int sys_select(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_KEVENT         = 72  // { int sys_kevent(int fd, \\\n\tSYS_MUNMAP         = 73  // { int sys_munmap(void *addr, size_t len); }\n\tSYS_MPROTECT       = 74  // { int sys_mprotect(void *addr, size_t len, \\\n\tSYS_MADVISE        = 75  // { int sys_madvise(void *addr, size_t len, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 212,
   "Snippet": "\tSYS_UNLINKAT       = 325 // { int sys_unlinkat(int fd, const char *path, \\\n\tSYS___SET_TCB      = 329 // { void sys___set_tcb(void *tcb); }\n\tSYS___GET_TCB      = 330 // { void *sys___get_tcb(void); }\n)"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 155,
   "Snippet": "\tSYS___SYSCTL       = 202 // { int sys___sysctl(const int *name, u_int namelen, \\\n\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK        = 204 // { int sys_munlock(const void *addr, size_t len); }\n\tSYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid); }\n\tSYS_UTRACE         = 209 // { int sys_utrace(const char *label, const void *addr, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 115,
   "Snippet": "\tSYS_CHFLAGSAT      = 107 // { int sys_chflagsat(int fd, const char *path, \\\n\tSYS_PPOLL          = 109 // { int sys_ppoll(struct pollfd *fds, \\\n\tSYS_PSELECT        = 110 // { int sys_pselect(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_SIGSUSPEND     = 111 // { int sys_sigsuspend(int mask); }\n\tSYS_GETSOCKOPT     = 118 // { int sys_getsockopt(int s, int level, int name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 164,
   "Snippet": "\tSYS_SHMAT          = 228 // { void *sys_shmat(int shmid, const void *shmaddr, \\\n\tSYS_SHMDT          = 230 // { int sys_shmdt(const void *shmaddr); }\n\tSYS_MINHERIT       = 250 // { int sys_minherit(void *addr, size_t len, \\\n\tSYS_POLL           = 252 // { int sys_poll(struct pollfd *fds, \\\n\tSYS_ISSETUGID      = 253 // { int sys_issetugid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 36,
   "Snippet": "\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\\n\tSYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, \\\n\tSYS_RECVFROM       = 29  // { ssize_t sys_recvfrom(int s, void *buf, size_t len, \\\n\tSYS_ACCEPT         = 30  // { int sys_accept(int s, struct sockaddr *name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 184,
   "Snippet": "\tSYS_CLOSEFROM      = 287 // { int sys_closefrom(int fd); }\n\tSYS_SIGALTSTACK    = 288 // { int sys_sigaltstack(const struct sigaltstack *nss, \\\n\tSYS_SHMGET         = 289 // { int sys_shmget(key_t key, size_t size, int shmflg); }\n\tSYS_SEMOP          = 290 // { int sys_semop(int semid, struct sembuf *sops, \\\n\tSYS_FHSTAT         = 294 // { int sys_fhstat(const fhandle_t *fhp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 50,
   "Snippet": "\tSYS_DUP            = 41  // { int sys_dup(int fd); }\n\tSYS_FSTATAT        = 42  // { int sys_fstatat(int fd, const char *path, \\\n\tSYS_GETEGID        = 43  // { gid_t sys_getegid(void); }\n\tSYS_PROFIL         = 44  // { int sys_profil(caddr_t samples, size_t size, \\\n\tSYS_KTRACE         = 45  // { int sys_ktrace(const char *fname, int ops, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 169,
   "Snippet": "\tSYS_LCHOWN         = 254 // { int sys_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID         = 255 // { pid_t sys_getsid(pid_t pid); }\n\tSYS_MSYNC          = 256 // { int sys_msync(void *addr, size_t len, int flags); }\n\tSYS_PIPE           = 263 // { int sys_pipe(int *fdp); }\n\tSYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t *fhp, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 33,
   "Snippet": "\tSYS_SETUID         = 23  // { int sys_setuid(uid_t uid); }\n\tSYS_GETUID         = 24  // { uid_t sys_getuid(void); }\n\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }\n\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 89,
   "Snippet": "\tSYS_SETGROUPS      = 80  // { int sys_setgroups(int gidsetsize, \\\n\tSYS_GETPGRP        = 81  // { int sys_getpgrp(void); }\n\tSYS_SETPGID        = 82  // { int sys_setpgid(pid_t pid, pid_t pgid); }\n\tSYS_SENDSYSLOG     = 83  // { int sys_sendsyslog(const void *buf, size_t nbyte); }\n\tSYS_UTIMENSAT      = 84  // { int sys_utimensat(int fd, const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 149,
   "Snippet": "\tSYS_GETRLIMIT      = 194 // { int sys_getrlimit(int which, \\\n\tSYS_SETRLIMIT      = 195 // { int sys_setrlimit(int which, \\\n\tSYS_MMAP           = 197 // { void *sys_mmap(void *addr, size_t len, int prot, \\\n\tSYS_LSEEK          = 199 // { off_t sys_lseek(int fd, int pad, off_t offset, \\\n\tSYS_TRUNCATE       = 200 // { int sys_truncate(const char *path, int pad, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 121,
   "Snippet": "\tSYS_WRITEV         = 121 // { ssize_t sys_writev(int fd, \\\n\tSYS_KILL           = 122 // { int sys_kill(int pid, int signum); }\n\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 55,
   "Snippet": "\tSYS_SIGACTION      = 46  // { int sys_sigaction(int signum, \\\n\tSYS_GETGID         = 47  // { gid_t sys_getgid(void); }\n\tSYS_SIGPROCMASK    = 48  // { int sys_sigprocmask(int how, sigset_t mask); }\n\tSYS_GETLOGIN       = 49  // { int sys_getlogin(char *namebuf, u_int namelen); }\n\tSYS_SETLOGIN       = 50  // { int sys_setlogin(const char *namebuf); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 139,
   "Snippet": "\tSYS_GETFH          = 161 // { int sys_getfh(const char *fname, fhandle_t *fhp); }\n\tSYS_SYSARCH        = 165 // { int sys_sysarch(int op, void *parms); }\n\tSYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void *buf, \\\n\tSYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void *buf, \\\n\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 143,
   "Snippet": "\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }\n\tSYS_SETEGID        = 182 // { int sys_setegid(gid_t egid); }\n\tSYS_SETEUID        = 183 // { int sys_seteuid(uid_t euid); }\n\tSYS_PATHCONF       = 191 // { long sys_pathconf(const char *path, int name); }\n\tSYS_FPATHCONF      = 192 // { long sys_fpathconf(int fd, int name); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 11,
   "Snippet": "\tSYS_EXIT           = 1   // { void sys_exit(int rval); }\n\tSYS_FORK           = 2   // { int sys_fork(void); }\n\tSYS_READ           = 3   // { ssize_t sys_read(int fd, void *buf, size_t nbyte); }\n\tSYS_WRITE          = 4   // { ssize_t sys_write(int fd, const void *buf, \\\n\tSYS_OPEN           = 5   // { int sys_open(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 153,
   "Snippet": "\tSYS_TRUNCATE       = 200 // { int sys_truncate(const char *path, int pad, \\\n\tSYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length); }\n\tSYS___SYSCTL       = 202 // { int sys___sysctl(const int *name, u_int namelen, \\\n\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK        = 204 // { int sys_munlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 180,
   "Snippet": "\tSYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_MQUERY         = 286 // { void *sys_mquery(void *addr, size_t len, int prot, \\\n\tSYS_CLOSEFROM      = 287 // { int sys_closefrom(int fd); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 150,
   "Snippet": "\tSYS_SETRLIMIT      = 195 // { int sys_setrlimit(int which, \\\n\tSYS_MMAP           = 197 // { void *sys_mmap(void *addr, size_t len, int prot, \\\n\tSYS_LSEEK          = 199 // { off_t sys_lseek(int fd, int pad, off_t offset, \\\n\tSYS_TRUNCATE       = 200 // { int sys_truncate(const char *path, int pad, \\\n\tSYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 94,
   "Snippet": "\tSYS_FUTIMENS       = 85  // { int sys_futimens(int fd, \\\n\tSYS_CLOCK_GETTIME  = 87  // { int sys_clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME  = 88  // { int sys_clock_settime(clockid_t clock_id, \\\n\tSYS_CLOCK_GETRES   = 89  // { int sys_clock_getres(clockid_t clock_id, \\\n\tSYS_DUP2           = 90  // { int sys_dup2(int from, int to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 118,
   "Snippet": "\tSYS_SIGSUSPEND     = 111 // { int sys_sigsuspend(int mask); }\n\tSYS_GETSOCKOPT     = 118 // { int sys_getsockopt(int s, int level, int name, \\\n\tSYS_READV          = 120 // { ssize_t sys_readv(int fd, \\\n\tSYS_WRITEV         = 121 // { ssize_t sys_writev(int fd, \\\n\tSYS_KILL           = 122 // { int sys_kill(int pid, int signum); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 190,
   "Snippet": "\tSYS_SHMCTL         = 296 // { int sys_shmctl(int shmid, int cmd, \\\n\tSYS_MSGCTL         = 297 // { int sys_msgctl(int msqid, int cmd, \\\n\tSYS_SCHED_YIELD    = 298 // { int sys_sched_yield(void); }\n\tSYS_GETTHRID       = 299 // { pid_t sys_getthrid(void); }\n\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 207,
   "Snippet": "\tSYS_MKNODAT        = 320 // { int sys_mknodat(int fd, const char *path, \\\n\tSYS_OPENAT         = 321 // { int sys_openat(int fd, const char *path, int flags, \\\n\tSYS_READLINKAT     = 322 // { ssize_t sys_readlinkat(int fd, const char *path, \\\n\tSYS_RENAMEAT       = 323 // { int sys_renameat(int fromfd, const char *from, \\\n\tSYS_SYMLINKAT      = 324 // { int sys_symlinkat(const char *path, int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 173,
   "Snippet": "\tSYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t *fhp, int flags); }\n\tSYS_PREADV         = 267 // { ssize_t sys_preadv(int fd, \\\n\tSYS_PWRITEV        = 268 // { ssize_t sys_pwritev(int fd, \\\n\tSYS_KQUEUE         = 269 // { int sys_kqueue(void); }\n\tSYS_MLOCKALL       = 271 // { int sys_mlockall(int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 123,
   "Snippet": "\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID       = 127 // { int sys_setregid(gid_t rgid, gid_t egid); }\n\tSYS_RENAME         = 128 // { int sys_rename(const char *from, const char *to); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 95,
   "Snippet": "\tSYS_CLOCK_GETTIME  = 87  // { int sys_clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME  = 88  // { int sys_clock_settime(clockid_t clock_id, \\\n\tSYS_CLOCK_GETRES   = 89  // { int sys_clock_getres(clockid_t clock_id, \\\n\tSYS_DUP2           = 90  // { int sys_dup2(int from, int to); }\n\tSYS_NANOSLEEP      = 91  // { int sys_nanosleep(const struct timespec *rqtp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 192,
   "Snippet": "\tSYS_SCHED_YIELD    = 298 // { int sys_sched_yield(void); }\n\tSYS_GETTHRID       = 299 // { pid_t sys_getthrid(void); }\n\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\\n\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }\n\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 78,
   "Snippet": "\tSYS_SETITIMER      = 69  // { int sys_setitimer(int which, \\\n\tSYS_GETITIMER      = 70  // { int sys_getitimer(int which, \\\n\tSYS_SELECT         = 71  // { int sys_select(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_KEVENT         = 72  // { int sys_kevent(int fd, \\\n\tSYS_MUNMAP         = 73  // { int sys_munmap(void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 140,
   "Snippet": "\tSYS_SYSARCH        = 165 // { int sys_sysarch(int op, void *parms); }\n\tSYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void *buf, \\\n\tSYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void *buf, \\\n\tSYS_SETGID         = 181 // { int sys_setgid(gid_t gid); }\n\tSYS_SETEGID        = 182 // { int sys_setegid(gid_t egid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 90,
   "Snippet": "\tSYS_GETPGRP        = 81  // { int sys_getpgrp(void); }\n\tSYS_SETPGID        = 82  // { int sys_setpgid(pid_t pid, pid_t pgid); }\n\tSYS_SENDSYSLOG     = 83  // { int sys_sendsyslog(const void *buf, size_t nbyte); }\n\tSYS_UTIMENSAT      = 84  // { int sys_utimensat(int fd, const char *path, \\\n\tSYS_FUTIMENS       = 85  // { int sys_futimens(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 172,
   "Snippet": "\tSYS_PIPE           = 263 // { int sys_pipe(int *fdp); }\n\tSYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t *fhp, int flags); }\n\tSYS_PREADV         = 267 // { ssize_t sys_preadv(int fd, \\\n\tSYS_PWRITEV        = 268 // { ssize_t sys_pwritev(int fd, \\\n\tSYS_KQUEUE         = 269 // { int sys_kqueue(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 54,
   "Snippet": "\tSYS_KTRACE         = 45  // { int sys_ktrace(const char *fname, int ops, \\\n\tSYS_SIGACTION      = 46  // { int sys_sigaction(int signum, \\\n\tSYS_GETGID         = 47  // { gid_t sys_getgid(void); }\n\tSYS_SIGPROCMASK    = 48  // { int sys_sigprocmask(int how, sigset_t mask); }\n\tSYS_GETLOGIN       = 49  // { int sys_getlogin(char *namebuf, u_int namelen); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 177,
   "Snippet": "\tSYS_MLOCKALL       = 271 // { int sys_mlockall(int flags); }\n\tSYS_MUNLOCKALL     = 272 // { int sys_munlockall(void); }\n\tSYS_GETRESUID      = 281 // { int sys_getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_GETRESGID      = 283 // { int sys_getresgid(gid_t *rgid, gid_t *egid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 72,
   "Snippet": "\tSYS_STATFS         = 63  // { int sys_statfs(const char *path, \\\n\tSYS_FSTATFS        = 64  // { int sys_fstatfs(int fd, struct statfs *buf); }\n\tSYS_FHSTATFS       = 65  // { int sys_fhstatfs(const fhandle_t *fhp, \\\n\tSYS_VFORK          = 66  // { int sys_vfork(void); }\n\tSYS_GETTIMEOFDAY   = 67  // { int sys_gettimeofday(struct timeval *tp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 193,
   "Snippet": "\tSYS_GETTHRID       = 299 // { pid_t sys_getthrid(void); }\n\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\\n\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }\n\tSYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, \\\n\tSYS___GETCWD       = 304 // { int sys___getcwd(char *buf, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 93,
   "Snippet": "\tSYS_UTIMENSAT      = 84  // { int sys_utimensat(int fd, const char *path, \\\n\tSYS_FUTIMENS       = 85  // { int sys_futimens(int fd, \\\n\tSYS_CLOCK_GETTIME  = 87  // { int sys_clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME  = 88  // { int sys_clock_settime(clockid_t clock_id, \\\n\tSYS_CLOCK_GETRES   = 89  // { int sys_clock_getres(clockid_t clock_id, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 122,
   "Snippet": "\tSYS_KILL           = 122 // { int sys_kill(int pid, int signum); }\n\tSYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid); }\n\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID       = 127 // { int sys_setregid(gid_t rgid, gid_t egid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 167,
   "Snippet": "\tSYS_POLL           = 252 // { int sys_poll(struct pollfd *fds, \\\n\tSYS_ISSETUGID      = 253 // { int sys_issetugid(void); }\n\tSYS_LCHOWN         = 254 // { int sys_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID         = 255 // { pid_t sys_getsid(pid_t pid); }\n\tSYS_MSYNC          = 256 // { int sys_msync(void *addr, size_t len, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 154,
   "Snippet": "\tSYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length); }\n\tSYS___SYSCTL       = 202 // { int sys___sysctl(const int *name, u_int namelen, \\\n\tSYS_MLOCK          = 203 // { int sys_mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK        = 204 // { int sys_munlock(const void *addr, size_t len); }\n\tSYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 16,
   "Snippet": "\tSYS_CLOSE          = 6   // { int sys_close(int fd); }\n\tSYS_GETENTROPY     = 7   // { int sys_getentropy(void *buf, size_t nbyte); }\n\tSYS___TFORK        = 8   // { int sys___tfork(const struct __tfork *param, \\\n\tSYS_LINK           = 9   // { int sys_link(const char *path, const char *link); }\n\tSYS_UNLINK         = 10  // { int sys_unlink(const char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 28,
   "Snippet": "\tSYS_GETDTABLECOUNT = 18  // { int sys_getdtablecount(void); }\n\tSYS_GETRUSAGE      = 19  // { int sys_getrusage(int who, \\\n\tSYS_GETPID         = 20  // { pid_t sys_getpid(void); }\n\tSYS_MOUNT          = 21  // { int sys_mount(const char *type, const char *path, \\\n\tSYS_UNMOUNT        = 22  // { int sys_unmount(const char *path, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 106,
   "Snippet": "\tSYS_CONNECT        = 98  // { int sys_connect(int s, const struct sockaddr *name, \\\n\tSYS_GETDENTS       = 99  // { int sys_getdents(int fd, void *buf, size_t buflen); }\n\tSYS_GETPRIORITY    = 100 // { int sys_getpriority(int which, id_t who); }\n\tSYS_PIPE2          = 101 // { int sys_pipe2(int *fdp, int flags); }\n\tSYS_DUP3           = 102 // { int sys_dup3(int from, int to, int flags); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 128,
   "Snippet": "\tSYS_FLOCK          = 131 // { int sys_flock(int fd, int how); }\n\tSYS_MKFIFO         = 132 // { int sys_mkfifo(const char *path, mode_t mode); }\n\tSYS_SENDTO         = 133 // { ssize_t sys_sendto(int s, const void *buf, \\\n\tSYS_SHUTDOWN       = 134 // { int sys_shutdown(int s, int how); }\n\tSYS_SOCKETPAIR     = 135 // { int sys_socketpair(int domain, int type, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 42,
   "Snippet": "\tSYS_GETSOCKNAME    = 32  // { int sys_getsockname(int fdes, struct sockaddr *asa, \\\n\tSYS_ACCESS         = 33  // { int sys_access(const char *path, int amode); }\n\tSYS_CHFLAGS        = 34  // { int sys_chflags(const char *path, u_int flags); }\n\tSYS_FCHFLAGS       = 35  // { int sys_fchflags(int fd, u_int flags); }\n\tSYS_SYNC           = 36  // { void sys_sync(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 34,
   "Snippet": "\tSYS_GETUID         = 24  // { uid_t sys_getuid(void); }\n\tSYS_GETEUID        = 25  // { uid_t sys_geteuid(void); }\n\tSYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, \\\n\tSYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, \\\n\tSYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 67,
   "Snippet": "\tSYS_READLINK       = 58  // { ssize_t sys_readlink(const char *path, \\\n\tSYS_EXECVE         = 59  // { int sys_execve(const char *path, \\\n\tSYS_UMASK          = 60  // { mode_t sys_umask(mode_t newmask); }\n\tSYS_CHROOT         = 61  // { int sys_chroot(const char *path); }\n\tSYS_GETFSSTAT      = 62  // { int sys_getfsstat(struct statfs *buf, size_t bufsize, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 24,
   "Snippet": "\tSYS_MKNOD          = 14  // { int sys_mknod(const char *path, mode_t mode, \\\n\tSYS_CHMOD          = 15  // { int sys_chmod(const char *path, mode_t mode); }\n\tSYS_CHOWN          = 16  // { int sys_chown(const char *path, uid_t uid, \\\n\tSYS_OBREAK         = 17  // { int sys_obreak(char *nsize); } break\n\tSYS_GETDTABLECOUNT = 18  // { int sys_getdtablecount(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 124,
   "Snippet": "\tSYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode); }\n\tSYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid); }\n\tSYS_SETREGID       = 127 // { int sys_setregid(gid_t rgid, gid_t egid); }\n\tSYS_RENAME         = 128 // { int sys_rename(const char *from, const char *to); }\n\tSYS_FLOCK          = 131 // { int sys_flock(int fd, int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 168,
   "Snippet": "\tSYS_ISSETUGID      = 253 // { int sys_issetugid(void); }\n\tSYS_LCHOWN         = 254 // { int sys_lchown(const char *path, uid_t uid, gid_t gid); }\n\tSYS_GETSID         = 255 // { pid_t sys_getsid(pid_t pid); }\n\tSYS_MSYNC          = 256 // { int sys_msync(void *addr, size_t len, int flags); }\n\tSYS_PIPE           = 263 // { int sys_pipe(int *fdp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 131,
   "Snippet": "\tSYS_SHUTDOWN       = 134 // { int sys_shutdown(int s, int how); }\n\tSYS_SOCKETPAIR     = 135 // { int sys_socketpair(int domain, int type, \\\n\tSYS_MKDIR          = 136 // { int sys_mkdir(const char *path, mode_t mode); }\n\tSYS_RMDIR          = 137 // { int sys_rmdir(const char *path); }\n\tSYS_ADJTIME        = 140 // { int sys_adjtime(const struct timeval *delta, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 191,
   "Snippet": "\tSYS_MSGCTL         = 297 // { int sys_msgctl(int msqid, int cmd, \\\n\tSYS_SCHED_YIELD    = 298 // { int sys_sched_yield(void); }\n\tSYS_GETTHRID       = 299 // { pid_t sys_getthrid(void); }\n\tSYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void *ident, \\\n\tSYS___THREXIT      = 302 // { void sys___threxit(pid_t *notdead); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_openbsd_arm.go",
   "Line": 102,
   "Snippet": "\tSYS___THRSLEEP     = 94  // { int sys___thrsleep(const volatile void *ident, \\\n\tSYS_FSYNC          = 95  // { int sys_fsync(int fd); }\n\tSYS_SETPRIORITY    = 96  // { int sys_setpriority(int which, id_t who, int prio); }\n\tSYS_SOCKET         = 97  // { int sys_socket(int domain, int type, int protocol); }\n\tSYS_CONNECT        = 98  // { int sys_connect(int s, const struct sockaddr *name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 211,
   "Snippet": "\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\\n\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, \\\n\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\\n\tSYS_EXTATTR_SET_FILE       = 356 // { ssize_t extattr_set_file( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 229,
   "Snippet": "\tSYS___MAC_SET_PROC         = 385 // { int __mac_set_proc(struct mac *mac_p); }\n\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\\n\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\\n\tSYS___MAC_SET_FD           = 388 // { int __mac_set_fd(int fd, \\\n\tSYS___MAC_SET_FILE         = 389 // { int __mac_set_file(const char *path_p, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 214,
   "Snippet": "\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\\n\tSYS_EXTATTR_SET_FILE       = 356 // { ssize_t extattr_set_file( \\\n\tSYS_EXTATTR_GET_FILE       = 357 // { ssize_t extattr_get_file( \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 223,
   "Snippet": "\tSYS_EXTATTR_GET_FD         = 372 // { ssize_t extattr_get_fd(int fd, \\\n\tSYS_EXTATTR_DELETE_FD      = 373 // { int extattr_delete_fd(int fd, \\\n\tSYS___SETUGID              = 374 // { int __setugid(int flag); }\n\tSYS_EACCESS                = 376 // { int eaccess(char *path, int amode); }\n\tSYS_NMOUNT                 = 378 // { int nmount(struct iovec *iovp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 228,
   "Snippet": "\tSYS___MAC_GET_PROC         = 384 // { int __mac_get_proc(struct mac *mac_p); }\n\tSYS___MAC_SET_PROC         = 385 // { int __mac_set_proc(struct mac *mac_p); }\n\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\\n\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\\n\tSYS___MAC_SET_FD           = 388 // { int __mac_set_fd(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 290,
   "Snippet": "\tSYS_PWRITE                 = 476 // { ssize_t pwrite(int fd, const void *buf, \\\n\tSYS_MMAP                   = 477 // { caddr_t mmap(caddr_t addr, size_t len, \\\n\tSYS_LSEEK                  = 478 // { off_t lseek(int fd, off_t offset, \\\n\tSYS_TRUNCATE               = 479 // { int truncate(char *path, off_t length); }\n\tSYS_FTRUNCATE              = 480 // { int ftruncate(int fd, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 335,
   "Snippet": "\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\\n\tSYS_RCTL_ADD_RULE          = 528 // { int rctl_add_rule(const void *inbufp, \\\n\tSYS_RCTL_REMOVE_RULE       = 529 // { int rctl_remove_rule(const void *inbufp, \\\n\tSYS_POSIX_FALLOCATE        = 530 // { int posix_fallocate(int fd, \\\n\tSYS_POSIX_FADVISE          = 531 // { int posix_fadvise(int fd, off_t offset, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 264,
   "Snippet": "\tSYS_THR_KILL               = 433 // { int thr_kill(long id, int sig); }\n\tSYS__UMTX_LOCK             = 434 // { int _umtx_lock(struct umtx *umtx); }\n\tSYS__UMTX_UNLOCK           = 435 // { int _umtx_unlock(struct umtx *umtx); }\n\tSYS_JAIL_ATTACH            = 436 // { int jail_attach(int jid); }\n\tSYS_EXTATTR_LIST_FD        = 437 // { ssize_t extattr_list_fd(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 282,
   "Snippet": "\tSYS_AUDITCTL               = 453 // { int auditctl(char *path); }\n\tSYS__UMTX_OP               = 454 // { int _umtx_op(void *obj, int op, \\\n\tSYS_THR_NEW                = 455 // { int thr_new(struct thr_param *param, \\\n\tSYS_SIGQUEUE               = 456 // { int sigqueue(pid_t pid, int signum, void *value); }\n\tSYS_ABORT2                 = 463 // { int abort2(const char *why, int nargs, void **args); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 117,
   "Snippet": "\tSYS_RTPRIO                 = 166 // { int rtprio(int function, pid_t pid, \\\n\tSYS_FREEBSD6_PREAD         = 173 // { ssize_t freebsd6_pread(int fd, void *buf, \\\n\tSYS_FREEBSD6_PWRITE        = 174 // { ssize_t freebsd6_pwrite(int fd, \\\n\tSYS_SETFIB                 = 175 // { int setfib(int fibnum); }\n\tSYS_NTP_ADJTIME            = 176 // { int ntp_adjtime(struct timex *tp); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 193,
   "Snippet": "\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }\n\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }\n\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }\n\tSYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }\n\tSYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 81,
   "Snippet": "\tSYS_DUP2                   = 90  // { int dup2(u_int from, u_int to); }\n\tSYS_FCNTL                  = 92  // { int fcntl(int fd, int cmd, long arg); }\n\tSYS_SELECT                 = 93  // { int select(int nd, fd_set *in, fd_set *ou, \\\n\tSYS_FSYNC                  = 95  // { int fsync(int fd); }\n\tSYS_SETPRIORITY            = 96  // { int setpriority(int which, int who, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 145,
   "Snippet": "\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime( \\\n\tSYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \\\n\tSYS_KTIMER_CREATE          = 235 // { int ktimer_create(clockid_t clock_id, \\\n\tSYS_KTIMER_DELETE          = 236 // { int ktimer_delete(int timerid); }\n\tSYS_KTIMER_SETTIME         = 237 // { int ktimer_settime(int timerid, int flags, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 285,
   "Snippet": "\tSYS_SIGQUEUE               = 456 // { int sigqueue(pid_t pid, int signum, void *value); }\n\tSYS_ABORT2                 = 463 // { int abort2(const char *why, int nargs, void **args); }\n\tSYS_THR_SET_NAME           = 464 // { int thr_set_name(long id, const char *name); }\n\tSYS_RTPRIO_THREAD          = 466 // { int rtprio_thread(int function, \\\n\tSYS_PREAD                  = 475 // { ssize_t pread(int fd, void *buf, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 207,
   "Snippet": "\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 255,
   "Snippet": "\tSYS_SWAPOFF                = 424 // { int swapoff(const char *name); }\n\tSYS___ACL_GET_LINK         = 425 // { int __acl_get_link(const char *path, \\\n\tSYS___ACL_SET_LINK         = 426 // { int __acl_set_link(const char *path, \\\n\tSYS___ACL_DELETE_LINK      = 427 // { int __acl_delete_link(const char *path, \\\n\tSYS___ACL_ACLCHECK_LINK    = 428 // { int __acl_aclcheck_link(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 230,
   "Snippet": "\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\\n\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\\n\tSYS___MAC_SET_FD           = 388 // { int __mac_set_fd(int fd, \\\n\tSYS___MAC_SET_FILE         = 389 // { int __mac_set_file(const char *path_p, \\\n\tSYS_KENV                   = 390 // { int kenv(int what, const char *name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 244,
   "Snippet": "\tSYS___MAC_GET_LINK         = 410 // { int __mac_get_link(const char *path_p, \\\n\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\\n\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\\n\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\\n\tSYS_EXTATTR_DELETE_LINK    = 414 // { int extattr_delete_link( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 349,
   "Snippet": "\tSYS_ACCEPT4                = 541 // { int accept4(int s, \\\n\tSYS_PIPE2                  = 542 // { int pipe2(int *fildes, int flags); }\n\tSYS_PROCCTL                = 544 // { int procctl(idtype_t idtype, id_t id, \\\n\tSYS_PPOLL                  = 545 // { int ppoll(struct pollfd *fds, u_int nfds, \\\n\tSYS_FUTIMENS               = 546 // { int futimens(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 188,
   "Snippet": "\tSYS_MUNLOCKALL             = 325 // { int munlockall(void); }\n\tSYS___GETCWD               = 326 // { int __getcwd(char *buf, u_int buflen); }\n\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, \\\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 243,
   "Snippet": "\tSYS___MAC_GET_PID          = 409 // { int __mac_get_pid(pid_t pid, \\\n\tSYS___MAC_GET_LINK         = 410 // { int __mac_get_link(const char *path_p, \\\n\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\\n\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\\n\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 252,
   "Snippet": "\tSYS_GETCONTEXT             = 421 // { int getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT             = 422 // { int setcontext( \\\n\tSYS_SWAPCONTEXT            = 423 // { int swapcontext(struct __ucontext *oucp, \\\n\tSYS_SWAPOFF                = 424 // { int swapoff(const char *name); }\n\tSYS___ACL_GET_LINK         = 425 // { int __acl_get_link(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 135,
   "Snippet": "\tSYS_FREEBSD6_TRUNCATE      = 200 // { int freebsd6_truncate(char *path, int pad, \\\n\tSYS_FREEBSD6_FTRUNCATE     = 201 // { int freebsd6_ftruncate(int fd, int pad, \\\n\tSYS___SYSCTL               = 202 // { int __sysctl(int *name, u_int namelen, \\\n\tSYS_MLOCK                  = 203 // { int mlock(const void *addr, size_t len); }\n\tSYS_MUNLOCK                = 204 // { int munlock(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 289,
   "Snippet": "\tSYS_PREAD                  = 475 // { ssize_t pread(int fd, void *buf, \\\n\tSYS_PWRITE                 = 476 // { ssize_t pwrite(int fd, const void *buf, \\\n\tSYS_MMAP                   = 477 // { caddr_t mmap(caddr_t addr, size_t len, \\\n\tSYS_LSEEK                  = 478 // { off_t lseek(int fd, off_t offset, \\\n\tSYS_TRUNCATE               = 479 // { int truncate(char *path, off_t length); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 341,
   "Snippet": "\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\\n\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\\n\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\\n\tSYS_CAP_FCNTLS_LIMIT       = 536 // { int cap_fcntls_limit(int fd, \\\n\tSYS_CAP_FCNTLS_GET         = 537 // { int cap_fcntls_get(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 131,
   "Snippet": "\tSYS_SETRLIMIT              = 195 // { int setrlimit(u_int which, \\\n\tSYS_GETDIRENTRIES          = 196 // { int getdirentries(int fd, char *buf, \\\n\tSYS_FREEBSD6_MMAP          = 197 // { caddr_t freebsd6_mmap(caddr_t addr, \\\n\tSYS_FREEBSD6_LSEEK         = 199 // { off_t freebsd6_lseek(int fd, int pad, \\\n\tSYS_FREEBSD6_TRUNCATE      = 200 // { int freebsd6_truncate(char *path, int pad, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 322,
   "Snippet": "\tSYS_CLOSEFROM              = 509 // { int closefrom(int lowfd); }\n\tSYS_LPATHCONF              = 513 // { int lpathconf(char *path, int name); }\n\tSYS___CAP_RIGHTS_GET       = 515 // { int __cap_rights_get(int version, \\\n\tSYS_CAP_ENTER              = 516 // { int cap_enter(void); }\n\tSYS_CAP_GETMODE            = 517 // { int cap_getmode(u_int *modep); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 208,
   "Snippet": "\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 339,
   "Snippet": "\tSYS_POSIX_FADVISE          = 531 // { int posix_fadvise(int fd, off_t offset, \\\n\tSYS_WAIT6                  = 532 // { int wait6(idtype_t idtype, id_t id, \\\n\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\\n\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\\n\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 227,
   "Snippet": "\tSYS_NMOUNT                 = 378 // { int nmount(struct iovec *iovp, \\\n\tSYS___MAC_GET_PROC         = 384 // { int __mac_get_proc(struct mac *mac_p); }\n\tSYS___MAC_SET_PROC         = 385 // { int __mac_set_proc(struct mac *mac_p); }\n\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\\n\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 182,
   "Snippet": "\tSYS_KLDFIRSTMOD            = 309 // { int kldfirstmod(int fileid); }\n\tSYS_GETSID                 = 310 // { int getsid(pid_t pid); }\n\tSYS_SETRESUID              = 311 // { int setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_SETRESGID              = 312 // { int setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_YIELD                  = 321 // { int yield(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 222,
   "Snippet": "\tSYS_EXTATTR_SET_FD         = 371 // { ssize_t extattr_set_fd(int fd, \\\n\tSYS_EXTATTR_GET_FD         = 372 // { ssize_t extattr_get_fd(int fd, \\\n\tSYS_EXTATTR_DELETE_FD      = 373 // { int extattr_delete_fd(int fd, \\\n\tSYS___SETUGID              = 374 // { int __setugid(int flag); }\n\tSYS_EACCESS                = 376 // { int eaccess(char *path, int amode); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 187,
   "Snippet": "\tSYS_MLOCKALL               = 324 // { int mlockall(int how); }\n\tSYS_MUNLOCKALL             = 325 // { int munlockall(void); }\n\tSYS___GETCWD               = 326 // { int __getcwd(char *buf, u_int buflen); }\n\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, \\\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 254,
   "Snippet": "\tSYS_SWAPCONTEXT            = 423 // { int swapcontext(struct __ucontext *oucp, \\\n\tSYS_SWAPOFF                = 424 // { int swapoff(const char *name); }\n\tSYS___ACL_GET_LINK         = 425 // { int __acl_get_link(const char *path, \\\n\tSYS___ACL_SET_LINK         = 426 // { int __acl_set_link(const char *path, \\\n\tSYS___ACL_DELETE_LINK      = 427 // { int __acl_delete_link(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 215,
   "Snippet": "\tSYS_EXTATTR_SET_FILE       = 356 // { ssize_t extattr_set_file( \\\n\tSYS_EXTATTR_GET_FILE       = 357 // { ssize_t extattr_get_file( \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_GETRESGID              = 361 // { int getresgid(gid_t *rgid, gid_t *egid, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 342,
   "Snippet": "\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\\n\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\\n\tSYS_CAP_FCNTLS_LIMIT       = 536 // { int cap_fcntls_limit(int fd, \\\n\tSYS_CAP_FCNTLS_GET         = 537 // { int cap_fcntls_get(int fd, \\\n\tSYS_BINDAT                 = 538 // { int bindat(int fd, int s, caddr_t name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 263,
   "Snippet": "\tSYS_THR_SELF               = 432 // { int thr_self(long *id); }\n\tSYS_THR_KILL               = 433 // { int thr_kill(long id, int sig); }\n\tSYS__UMTX_LOCK             = 434 // { int _umtx_lock(struct umtx *umtx); }\n\tSYS__UMTX_UNLOCK           = 435 // { int _umtx_unlock(struct umtx *umtx); }\n\tSYS_JAIL_ATTACH            = 436 // { int jail_attach(int jid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 256,
   "Snippet": "\tSYS___ACL_GET_LINK         = 425 // { int __acl_get_link(const char *path, \\\n\tSYS___ACL_SET_LINK         = 426 // { int __acl_set_link(const char *path, \\\n\tSYS___ACL_DELETE_LINK      = 427 // { int __acl_delete_link(const char *path, \\\n\tSYS___ACL_ACLCHECK_LINK    = 428 // { int __acl_aclcheck_link(const char *path, \\\n\tSYS_SIGWAIT                = 429 // { int sigwait(const sigset_t *set, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 79,
   "Snippet": "\tSYS_GETITIMER              = 86  // { int getitimer(u_int which, \\\n\tSYS_GETDTABLESIZE          = 89  // { int getdtablesize(void); }\n\tSYS_DUP2                   = 90  // { int dup2(u_int from, u_int to); }\n\tSYS_FCNTL                  = 92  // { int fcntl(int fd, int cmd, long arg); }\n\tSYS_SELECT                 = 93  // { int select(int nd, fd_set *in, fd_set *ou, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 144,
   "Snippet": "\tSYS_CLOCK_GETTIME          = 232 // { int clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime( \\\n\tSYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \\\n\tSYS_KTIMER_CREATE          = 235 // { int ktimer_create(clockid_t clock_id, \\\n\tSYS_KTIMER_DELETE          = 236 // { int ktimer_delete(int timerid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 142,
   "Snippet": "\tSYS_GETPGID                = 207 // { int getpgid(pid_t pid); }\n\tSYS_POLL                   = 209 // { int poll(struct pollfd *fds, u_int nfds, \\\n\tSYS_CLOCK_GETTIME          = 232 // { int clock_gettime(clockid_t clock_id, \\\n\tSYS_CLOCK_SETTIME          = 233 // { int clock_settime( \\\n\tSYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 132,
   "Snippet": "\tSYS_GETDIRENTRIES          = 196 // { int getdirentries(int fd, char *buf, \\\n\tSYS_FREEBSD6_MMAP          = 197 // { caddr_t freebsd6_mmap(caddr_t addr, \\\n\tSYS_FREEBSD6_LSEEK         = 199 // { off_t freebsd6_lseek(int fd, int pad, \\\n\tSYS_FREEBSD6_TRUNCATE      = 200 // { int freebsd6_truncate(char *path, int pad, \\\n\tSYS_FREEBSD6_FTRUNCATE     = 201 // { int freebsd6_ftruncate(int fd, int pad, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 332,
   "Snippet": "\tSYS_SETLOGINCLASS          = 524 // { int setloginclass(const char *namebuf); }\n\tSYS_RCTL_GET_RACCT         = 525 // { int rctl_get_racct(const void *inbufp, \\\n\tSYS_RCTL_GET_RULES         = 526 // { int rctl_get_rules(const void *inbufp, \\\n\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\\n\tSYS_RCTL_ADD_RULE          = 528 // { int rctl_add_rule(const void *inbufp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 205,
   "Snippet": "\tSYS_SIGWAITINFO            = 346 // { int sigwaitinfo(const sigset_t *set, \\\n\tSYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \\\n\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 226,
   "Snippet": "\tSYS_EACCESS                = 376 // { int eaccess(char *path, int amode); }\n\tSYS_NMOUNT                 = 378 // { int nmount(struct iovec *iovp, \\\n\tSYS___MAC_GET_PROC         = 384 // { int __mac_get_proc(struct mac *mac_p); }\n\tSYS___MAC_SET_PROC         = 385 // { int __mac_set_proc(struct mac *mac_p); }\n\tSYS___MAC_GET_FD           = 386 // { int __mac_get_fd(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 190,
   "Snippet": "\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, \\\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int \\\n\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }\n\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 195,
   "Snippet": "\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }\n\tSYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }\n\tSYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, \\\n\tSYS_UTRACE                 = 335 // { int utrace(const void *addr, size_t len); }\n\tSYS_KLDSYM                 = 337 // { int kldsym(int fileid, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 281,
   "Snippet": "\tSYS_SETAUDIT_ADDR          = 452 // { int setaudit_addr( \\\n\tSYS_AUDITCTL               = 453 // { int auditctl(char *path); }\n\tSYS__UMTX_OP               = 454 // { int _umtx_op(void *obj, int op, \\\n\tSYS_THR_NEW                = 455 // { int thr_new(struct thr_param *param, \\\n\tSYS_SIGQUEUE               = 456 // { int sigqueue(pid_t pid, int signum, void *value); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 217,
   "Snippet": "\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_GETRESGID              = 361 // { int getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_KQUEUE                 = 362 // { int kqueue(void); }\n\tSYS_KEVENT                 = 363 // { int kevent(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 154,
   "Snippet": "\tSYS_FFCLOCK_SETESTIMATE    = 242 // { int ffclock_setestimate( \\\n\tSYS_FFCLOCK_GETESTIMATE    = 243 // { int ffclock_getestimate( \\\n\tSYS_CLOCK_GETCPUCLOCKID2   = 247 // { int clock_getcpuclockid2(id_t id,\\\n\tSYS_NTP_GETTIME            = 248 // { int ntp_gettime(struct ntptimeval *ntvp); }\n\tSYS_MINHERIT               = 250 // { int minherit(void *addr, size_t len, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 268,
   "Snippet": "\tSYS_EXTATTR_LIST_FD        = 437 // { ssize_t extattr_list_fd(int fd, \\\n\tSYS_EXTATTR_LIST_FILE      = 438 // { ssize_t extattr_list_file( \\\n\tSYS_EXTATTR_LIST_LINK      = 439 // { ssize_t extattr_list_link( \\\n\tSYS_THR_SUSPEND            = 442 // { int thr_suspend( \\\n\tSYS_THR_WAKE               = 443 // { int thr_wake(long id); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 116,
   "Snippet": "\tSYS_SYSARCH                = 165 // { int sysarch(int op, char *parms); }\n\tSYS_RTPRIO                 = 166 // { int rtprio(int function, pid_t pid, \\\n\tSYS_FREEBSD6_PREAD         = 173 // { ssize_t freebsd6_pread(int fd, void *buf, \\\n\tSYS_FREEBSD6_PWRITE        = 174 // { ssize_t freebsd6_pwrite(int fd, \\\n\tSYS_SETFIB                 = 175 // { int setfib(int fibnum); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 259,
   "Snippet": "\tSYS___ACL_ACLCHECK_LINK    = 428 // { int __acl_aclcheck_link(const char *path, \\\n\tSYS_SIGWAIT                = 429 // { int sigwait(const sigset_t *set, \\\n\tSYS_THR_CREATE             = 430 // { int thr_create(ucontext_t *ctx, long *id, \\\n\tSYS_THR_EXIT               = 431 // { void thr_exit(long *state); }\n\tSYS_THR_SELF               = 432 // { int thr_self(long *id); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 241,
   "Snippet": "\tSYS_FSTATFS                = 397 // { int fstatfs(int fd, struct statfs *buf); }\n\tSYS_FHSTATFS               = 398 // { int fhstatfs(const struct fhandle *u_fhp, \\\n\tSYS___MAC_GET_PID          = 409 // { int __mac_get_pid(pid_t pid, \\\n\tSYS___MAC_GET_LINK         = 410 // { int __mac_get_link(const char *path_p, \\\n\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 334,
   "Snippet": "\tSYS_RCTL_GET_RULES         = 526 // { int rctl_get_rules(const void *inbufp, \\\n\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\\n\tSYS_RCTL_ADD_RULE          = 528 // { int rctl_add_rule(const void *inbufp, \\\n\tSYS_RCTL_REMOVE_RULE       = 529 // { int rctl_remove_rule(const void *inbufp, \\\n\tSYS_POSIX_FALLOCATE        = 530 // { int posix_fallocate(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 297,
   "Snippet": "\tSYS_SHM_UNLINK             = 483 // { int shm_unlink(const char *path); }\n\tSYS_CPUSET                 = 484 // { int cpuset(cpusetid_t *setid); }\n\tSYS_CPUSET_SETID           = 485 // { int cpuset_setid(cpuwhich_t which, id_t id, \\\n\tSYS_CPUSET_GETID           = 486 // { int cpuset_getid(cpulevel_t level, \\\n\tSYS_CPUSET_GETAFFINITY     = 487 // { int cpuset_getaffinity(cpulevel_t level, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 246,
   "Snippet": "\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\\n\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\\n\tSYS_EXTATTR_DELETE_LINK    = 414 // { int extattr_delete_link( \\\n\tSYS___MAC_EXECVE           = 415 // { int __mac_execve(char *fname, char **argv, \\\n\tSYS_SIGACTION              = 416 // { int sigaction(int sig, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 250,
   "Snippet": "\tSYS_SIGACTION              = 416 // { int sigaction(int sig, \\\n\tSYS_SIGRETURN              = 417 // { int sigreturn( \\\n\tSYS_GETCONTEXT             = 421 // { int getcontext(struct __ucontext *ucp); }\n\tSYS_SETCONTEXT             = 422 // { int setcontext( \\\n\tSYS_SWAPCONTEXT            = 423 // { int swapcontext(struct __ucontext *oucp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 206,
   "Snippet": "\tSYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \\\n\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\\n\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 242,
   "Snippet": "\tSYS_FHSTATFS               = 398 // { int fhstatfs(const struct fhandle *u_fhp, \\\n\tSYS___MAC_GET_PID          = 409 // { int __mac_get_pid(pid_t pid, \\\n\tSYS___MAC_GET_LINK         = 410 // { int __mac_get_link(const char *path_p, \\\n\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\\n\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 247,
   "Snippet": "\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\\n\tSYS_EXTATTR_DELETE_LINK    = 414 // { int extattr_delete_link( \\\n\tSYS___MAC_EXECVE           = 415 // { int __mac_execve(char *fname, char **argv, \\\n\tSYS_SIGACTION              = 416 // { int sigaction(int sig, \\\n\tSYS_SIGRETURN              = 417 // { int sigreturn( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 220,
   "Snippet": "\tSYS_KQUEUE                 = 362 // { int kqueue(void); }\n\tSYS_KEVENT                 = 363 // { int kevent(int fd, \\\n\tSYS_EXTATTR_SET_FD         = 371 // { ssize_t extattr_set_fd(int fd, \\\n\tSYS_EXTATTR_GET_FD         = 372 // { ssize_t extattr_get_fd(int fd, \\\n\tSYS_EXTATTR_DELETE_FD      = 373 // { int extattr_delete_fd(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 333,
   "Snippet": "\tSYS_RCTL_GET_RACCT         = 525 // { int rctl_get_racct(const void *inbufp, \\\n\tSYS_RCTL_GET_RULES         = 526 // { int rctl_get_rules(const void *inbufp, \\\n\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\\n\tSYS_RCTL_ADD_RULE          = 528 // { int rctl_add_rule(const void *inbufp, \\\n\tSYS_RCTL_REMOVE_RULE       = 529 // { int rctl_remove_rule(const void *inbufp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 9,
   "Snippet": "\nconst (\n\t// SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int\n\tSYS_EXIT                   = 1   // { void sys_exit(int rval); } exit \\\n\tSYS_FORK                   = 2   // { int fork(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 209,
   "Snippet": "\tSYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, \\\n\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\\n\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 267,
   "Snippet": "\tSYS_JAIL_ATTACH            = 436 // { int jail_attach(int jid); }\n\tSYS_EXTATTR_LIST_FD        = 437 // { ssize_t extattr_list_fd(int fd, \\\n\tSYS_EXTATTR_LIST_FILE      = 438 // { ssize_t extattr_list_file( \\\n\tSYS_EXTATTR_LIST_LINK      = 439 // { ssize_t extattr_list_link( \\\n\tSYS_THR_SUSPEND            = 442 // { int thr_suspend( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 231,
   "Snippet": "\tSYS___MAC_GET_FILE         = 387 // { int __mac_get_file(const char *path_p, \\\n\tSYS___MAC_SET_FD           = 388 // { int __mac_set_fd(int fd, \\\n\tSYS___MAC_SET_FILE         = 389 // { int __mac_set_file(const char *path_p, \\\n\tSYS_KENV                   = 390 // { int kenv(int what, const char *name, \\\n\tSYS_LCHFLAGS               = 391 // { int lchflags(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 191,
   "Snippet": "\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int \\\n\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }\n\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }\n\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 221,
   "Snippet": "\tSYS_KEVENT                 = 363 // { int kevent(int fd, \\\n\tSYS_EXTATTR_SET_FD         = 371 // { ssize_t extattr_set_fd(int fd, \\\n\tSYS_EXTATTR_GET_FD         = 372 // { ssize_t extattr_get_fd(int fd, \\\n\tSYS_EXTATTR_DELETE_FD      = 373 // { int extattr_delete_fd(int fd, \\\n\tSYS___SETUGID              = 374 // { int __setugid(int flag); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 340,
   "Snippet": "\tSYS_WAIT6                  = 532 // { int wait6(idtype_t idtype, id_t id, \\\n\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\\n\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\\n\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\\n\tSYS_CAP_FCNTLS_LIMIT       = 536 // { int cap_fcntls_limit(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 338,
   "Snippet": "\tSYS_POSIX_FALLOCATE        = 530 // { int posix_fallocate(int fd, \\\n\tSYS_POSIX_FADVISE          = 531 // { int posix_fadvise(int fd, off_t offset, \\\n\tSYS_WAIT6                  = 532 // { int wait6(idtype_t idtype, id_t id, \\\n\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\\n\tSYS_CAP_IOCTLS_LIMIT       = 534 // { int cap_ioctls_limit(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 337,
   "Snippet": "\tSYS_RCTL_REMOVE_RULE       = 529 // { int rctl_remove_rule(const void *inbufp, \\\n\tSYS_POSIX_FALLOCATE        = 530 // { int posix_fallocate(int fd, \\\n\tSYS_POSIX_FADVISE          = 531 // { int posix_fadvise(int fd, off_t offset, \\\n\tSYS_WAIT6                  = 532 // { int wait6(idtype_t idtype, id_t id, \\\n\tSYS_CAP_RIGHTS_LIMIT       = 533 // { int cap_rights_limit(int fd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 213,
   "Snippet": "\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, \\\n\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\\n\tSYS_EXTATTR_SET_FILE       = 356 // { ssize_t extattr_set_file( \\\n\tSYS_EXTATTR_GET_FILE       = 357 // { ssize_t extattr_get_file( \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 343,
   "Snippet": "\tSYS_CAP_IOCTLS_GET         = 535 // { ssize_t cap_ioctls_get(int fd, \\\n\tSYS_CAP_FCNTLS_LIMIT       = 536 // { int cap_fcntls_limit(int fd, \\\n\tSYS_CAP_FCNTLS_GET         = 537 // { int cap_fcntls_get(int fd, \\\n\tSYS_BINDAT                 = 538 // { int bindat(int fd, int s, caddr_t name, \\\n\tSYS_CONNECTAT              = 539 // { int connectat(int fd, int s, caddr_t name, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 257,
   "Snippet": "\tSYS___ACL_SET_LINK         = 426 // { int __acl_set_link(const char *path, \\\n\tSYS___ACL_DELETE_LINK      = 427 // { int __acl_delete_link(const char *path, \\\n\tSYS___ACL_ACLCHECK_LINK    = 428 // { int __acl_aclcheck_link(const char *path, \\\n\tSYS_SIGWAIT                = 429 // { int sigwait(const sigset_t *set, \\\n\tSYS_THR_CREATE             = 430 // { int thr_create(ucontext_t *ctx, long *id, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 103,
   "Snippet": "\tSYS_FLOCK                  = 131 // { int flock(int fd, int how); }\n\tSYS_MKFIFO                 = 132 // { int mkfifo(char *path, int mode); }\n\tSYS_SENDTO                 = 133 // { int sendto(int s, caddr_t buf, size_t len, \\\n\tSYS_SHUTDOWN               = 134 // { int shutdown(int s, int how); }\n\tSYS_SOCKETPAIR             = 135 // { int socketpair(int domain, int type, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 189,
   "Snippet": "\tSYS___GETCWD               = 326 // { int __getcwd(char *buf, u_int buflen); }\n\tSYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, \\\n\tSYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct \\\n\tSYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int \\\n\tSYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 194,
   "Snippet": "\tSYS_SCHED_YIELD            = 331 // { int sched_yield (void); }\n\tSYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }\n\tSYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }\n\tSYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, \\\n\tSYS_UTRACE                 = 335 // { int utrace(const void *addr, size_t len); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 210,
   "Snippet": "\tSYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \\\n\tSYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, \\\n\tSYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \\\n\tSYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, \\\n\tSYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 204,
   "Snippet": "\tSYS_SIGTIMEDWAIT           = 345 // { int sigtimedwait(const sigset_t *set, \\\n\tSYS_SIGWAITINFO            = 346 // { int sigwaitinfo(const sigset_t *set, \\\n\tSYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \\\n\tSYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \\\n\tSYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 300,
   "Snippet": "\tSYS_CPUSET_GETID           = 486 // { int cpuset_getid(cpulevel_t level, \\\n\tSYS_CPUSET_GETAFFINITY     = 487 // { int cpuset_getaffinity(cpulevel_t level, \\\n\tSYS_CPUSET_SETAFFINITY     = 488 // { int cpuset_setaffinity(cpulevel_t level, \\\n\tSYS_FACCESSAT              = 489 // { int faccessat(int fd, char *path, int amode, \\\n\tSYS_FCHMODAT               = 490 // { int fchmodat(int fd, char *path, mode_t mode, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 293,
   "Snippet": "\tSYS_TRUNCATE               = 479 // { int truncate(char *path, off_t length); }\n\tSYS_FTRUNCATE              = 480 // { int ftruncate(int fd, off_t length); }\n\tSYS_THR_KILL2              = 481 // { int thr_kill2(pid_t pid, long id, int sig); }\n\tSYS_SHM_OPEN               = 482 // { int shm_open(const char *path, int flags, \\\n\tSYS_SHM_UNLINK             = 483 // { int shm_unlink(const char *path); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 331,
   "Snippet": "\tSYS_GETLOGINCLASS          = 523 // { int getloginclass(char *namebuf, \\\n\tSYS_SETLOGINCLASS          = 524 // { int setloginclass(const char *namebuf); }\n\tSYS_RCTL_GET_RACCT         = 525 // { int rctl_get_racct(const void *inbufp, \\\n\tSYS_RCTL_GET_RULES         = 526 // { int rctl_get_rules(const void *inbufp, \\\n\tSYS_RCTL_GET_LIMITS        = 527 // { int rctl_get_limits(const void *inbufp, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 266,
   "Snippet": "\tSYS__UMTX_UNLOCK           = 435 // { int _umtx_unlock(struct umtx *umtx); }\n\tSYS_JAIL_ATTACH            = 436 // { int jail_attach(int jid); }\n\tSYS_EXTATTR_LIST_FD        = 437 // { ssize_t extattr_list_fd(int fd, \\\n\tSYS_EXTATTR_LIST_FILE      = 438 // { ssize_t extattr_list_file( \\\n\tSYS_EXTATTR_LIST_LINK      = 439 // { ssize_t extattr_list_link( \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 245,
   "Snippet": "\tSYS___MAC_SET_LINK         = 411 // { int __mac_set_link(const char *path_p, \\\n\tSYS_EXTATTR_SET_LINK       = 412 // { ssize_t extattr_set_link( \\\n\tSYS_EXTATTR_GET_LINK       = 413 // { ssize_t extattr_get_link( \\\n\tSYS_EXTATTR_DELETE_LINK    = 414 // { int extattr_delete_link( \\\n\tSYS___MAC_EXECVE           = 415 // { int __mac_execve(char *fname, char **argv, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 299,
   "Snippet": "\tSYS_CPUSET_SETID           = 485 // { int cpuset_setid(cpuwhich_t which, id_t id, \\\n\tSYS_CPUSET_GETID           = 486 // { int cpuset_getid(cpulevel_t level, \\\n\tSYS_CPUSET_GETAFFINITY     = 487 // { int cpuset_getaffinity(cpulevel_t level, \\\n\tSYS_CPUSET_SETAFFINITY     = 488 // { int cpuset_setaffinity(cpulevel_t level, \\\n\tSYS_FACCESSAT              = 489 // { int faccessat(int fd, char *path, int amode, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 47,
   "Snippet": "\tSYS_PIPE                   = 42  // { int pipe(void); }\n\tSYS_GETEGID                = 43  // { gid_t getegid(void); }\n\tSYS_PROFIL                 = 44  // { int profil(caddr_t samples, size_t size, \\\n\tSYS_KTRACE                 = 45  // { int ktrace(const char *fname, int ops, \\\n\tSYS_GETGID                 = 47  // { gid_t getgid(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 183,
   "Snippet": "\tSYS_GETSID                 = 310 // { int getsid(pid_t pid); }\n\tSYS_SETRESUID              = 311 // { int setresuid(uid_t ruid, uid_t euid, \\\n\tSYS_SETRESGID              = 312 // { int setresgid(gid_t rgid, gid_t egid, \\\n\tSYS_YIELD                  = 321 // { int yield(void); }\n\tSYS_MLOCKALL               = 324 // { int mlockall(int how); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 298,
   "Snippet": "\tSYS_CPUSET                 = 484 // { int cpuset(cpusetid_t *setid); }\n\tSYS_CPUSET_SETID           = 485 // { int cpuset_setid(cpuwhich_t which, id_t id, \\\n\tSYS_CPUSET_GETID           = 486 // { int cpuset_getid(cpulevel_t level, \\\n\tSYS_CPUSET_GETAFFINITY     = 487 // { int cpuset_getaffinity(cpulevel_t level, \\\n\tSYS_CPUSET_SETAFFINITY     = 488 // { int cpuset_setaffinity(cpulevel_t level, \\"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 216,
   "Snippet": "\tSYS_EXTATTR_GET_FILE       = 357 // { ssize_t extattr_get_file( \\\n\tSYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \\\n\tSYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\\n\tSYS_GETRESGID              = 361 // { int getresgid(gid_t *rgid, gid_t *egid, \\\n\tSYS_KQUEUE                 = 362 // { int kqueue(void); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
   "Line": 324,
   "Snippet": "\tSYS___CAP_RIGHTS_GET       = 515 // { int __cap_rights_get(int version, \\\n\tSYS_CAP_ENTER              = 516 // { int cap_enter(void); }\n\tSYS_CAP_GETMODE            = 517 // { int cap_getmode(u_int *modep); }\n\tSYS_PDFORK                 = 518 // { int pdfork(int *fdp, int flags); }\n\tSYS_PDKILL                 = 519 // { int pdkill(int fd, int signum); }"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/openpgp/packet/userid.go",
   "Line": 33,
   "Snippet": "\n// NewUserId returns a UserId or nil if any of the arguments contain invalid\n// characters. The invalid characters are '\\x00', '(', ')', '\u003c' and '\u003e'\nfunc NewUserId(name, comment, email string) *UserId {\n\t// RFC 4880 doesn't deal with the structure of userid strings; the"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/openpgp/packet/userid.go",
   "Line": 15,
   "Snippet": "// UserId contains text that is intended to represent the name and email\n// address of the key holder. See RFC 4880, section 5.11. By convention, this\n// takes the form \"Full Name (Comment) \u003cemail@example.com\u003e\"\ntype UserId struct {\n\tId string // By convention, this takes the form \"Full Name (Comment) \u003cemail@example.com\u003e\" which is split out in the fields below."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/openpgp/packet/userid.go",
   "Line": 90,
   "Snippet": "\n// parseUserId extracts the name, comment and email from a user id string that\n// is formatted as \"Full Name (Comment) \u003cemail@example.com\u003e\".\nfunc parseUserId(id string) (name, comment, email string) {\n\tvar n, c, e struct {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/utils/merkletrie/change.go",
   "Line": 75,
   "Snippet": "\n// String returns a single change in human readable form, using the\n// format: '\u003c' + action + space + path + '\u003e'.  The contents of the file\n// before or after the change are not included in this format.\n//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/object/commit.go",
   "Line": 32,
   "Snippet": "// in time, such as a timestamp, the author of the changes since the last\n// commit, a pointer to the previous commit(s), etc.\n// http://shafiulazam.com/gitbook/1_the_git_object_model.html\ntype Commit struct {\n\t// Hash of the commit object."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/transport/internal/common/common.go",
   "Line": 428,
   "Snippet": "func uploadPack(w io.WriteCloser, r io.Reader, req *packp.UploadPackRequest) error {\n\t// TODO support multi_ack mode\n\t// TODO support multi_ack_detailed mode\n\t// TODO support acks for common objects\n\t// TODO build a proper state machine for all these processing options"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/sideband/doc.go",
   "Line": 9,
   "Snippet": "// Either mode indicates that the packfile data will be streamed broken\n// up into packets of up to either 1000 bytes in the case of 'side_band',\n// or 65520 bytes in the case of 'side_band_64k'. Each packet is made up\n// of a leading 4-byte pkt-line length of how much data is in the packet,\n// followed by a 1-byte stream code, followed by the actual data."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/internal/revision/parser.go",
   "Line": 91,
   "Snippet": "}\n\n// ColonStagePath represents :\u003cn\u003e:/\u003cpath\u003e\ntype ColonStagePath struct {\n\tPath  string"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/internal/revision/parser.go",
   "Line": 510,
   "Snippet": "}\n\n// parseColonDefault extract :\u003cdata\u003e statements\nfunc (p *Parser) parseColonDefault() (Revisioner, error) {\n\tvar tok token"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/internal/revision/parser.go",
   "Line": 466,
   "Snippet": "}\n\n// parseColonSlash extract :/\u003cdata\u003e statements\nfunc (p *Parser) parseColonSlash() (Revisioner, error) {\n\tvar tok, nextTok token"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/internal/revision/parser.go",
   "Line": 390,
   "Snippet": "}\n\n// parseCaretBraces extract ^{\u003cdata\u003e} statements\nfunc (p *Parser) parseCaretBraces() (Revisioner, error) {\n\tvar tok, nextTok token"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/internal/revision/parser.go",
   "Line": 86,
   "Snippet": "}\n\n// ColonPath represents :./\u003cpath\u003e :\u003cpath\u003e\ntype ColonPath struct {\n\tPath string"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/errors.go",
   "Line": 70,
   "Snippet": "\t// asked to generate credentials. The account administrator must use the IAM\n\t// console to activate STS in that region. For more information, see Activating\n\t// and Deactivating AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)\n\t// in the IAM User Guide.\n\tErrCodeRegionDisabledException = \"RegionDisabledException\""
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 134,
   "Snippet": "\tSharedConfigDisable\n\n\t// SharedConfigEnable overrides the AWS_SDK_LOAD_CONFIG env var value\n\t// and enables the shared config functionality.\n\tSharedConfigEnable"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 130,
   "Snippet": "\tSharedConfigStateFromEnv SharedConfigState = iota\n\n\t// SharedConfigDisable overrides the AWS_SDK_LOAD_CONFIG env var value\n\t// and disables the shared config functionality.\n\tSharedConfigDisable"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 126,
   "Snippet": "const (\n\t// SharedConfigStateFromEnv does not override any state of the\n\t// AWS_SDK_LOAD_CONFIG env var. It is the default value of the\n\t// SharedConfigState type.\n\tSharedConfigStateFromEnv SharedConfigState = iota"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/transport/ssh/auth_method.go",
   "Line": 239,
   "Snippet": "// known_hosts file. http://man.openbsd.org/sshd#SSH_KNOWN_HOSTS_FILE_FORMAT\n//\n// If files is empty, the list of files will be read from the SSH_KNOWN_HOSTS\n// environment variable, example:\n//   /home/foo/custom_known_hosts_file:/etc/custom_known/hosts_file"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/transport/ssh/auth_method.go",
   "Line": 245,
   "Snippet": "// If SSH_KNOWN_HOSTS is not set the following file locations will be used:\n//   ~/.ssh/known_hosts\n//   /etc/ssh/ssh_known_hosts\nfunc NewKnownHostsCallback(files ...string) (ssh.HostKeyCallback, error) {\n\tfiles, err := getDefaultKnownHostsFiles()"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/transport/ssh/auth_method.go",
   "Line": 241,
   "Snippet": "// If files is empty, the list of files will be read from the SSH_KNOWN_HOSTS\n// environment variable, example:\n//   /home/foo/custom_known_hosts_file:/etc/custom_known/hosts_file\n//\n// If SSH_KNOWN_HOSTS is not set the following file locations will be used:"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/transport/ssh/auth_method.go",
   "Line": 243,
   "Snippet": "//   /home/foo/custom_known_hosts_file:/etc/custom_known/hosts_file\n//\n// If SSH_KNOWN_HOSTS is not set the following file locations will be used:\n//   ~/.ssh/known_hosts\n//   /etc/ssh/ssh_known_hosts"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/transport/ssh/auth_method.go",
   "Line": 237,
   "Snippet": "\n// NewKnownHostsCallback returns ssh.HostKeyCallback based on a file based on a\n// known_hosts file. http://man.openbsd.org/sshd#SSH_KNOWN_HOSTS_FILE_FORMAT\n//\n// If files is empty, the list of files will be read from the SSH_KNOWN_HOSTS"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/transport/ssh/common.go",
   "Line": 20,
   "Snippet": "\n// DefaultSSHConfig is the reader used to access parameters stored in the\n// system's ssh_config files. If nil all the ssh_config are ignored.\nvar DefaultSSHConfig sshConfig = ssh_config.DefaultUserSettings\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/transport/ssh/common.go",
   "Line": 97,
   "Snippet": "// connect connects to the SSH server, unless a AuthMethod was set with\n// SetAuth method, by default uses an auth method based on PublicKeysCallback,\n// it connects to a SSH agent, using the address stored in the SSH_AUTH_SOCK\n// environment var.\nfunc (c *command) connect() error {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/ulreq_decode.go",
   "Line": 78,
   "Snippet": "}\n\n// Expected format: want \u003chash\u003e[ capabilities]\nfunc (d *ulReqDecoder) decodeFirstWant() stateFn {\n\tif ok := d.nextLine(); !ok {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/ulreq_decode.go",
   "Line": 125,
   "Snippet": "}\n\n// Expected format: want \u003chash\u003e\nfunc (d *ulReqDecoder) decodeOtherWants() stateFn {\n\tif ok := d.nextLine(); !ok {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/ulreq_decode.go",
   "Line": 158,
   "Snippet": "}\n\n// Expected format: shallow \u003chash\u003e\nfunc (d *ulReqDecoder) decodeShallow() stateFn {\n\tif bytes.HasPrefix(d.line, deepen) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/ulreq_decode.go",
   "Line": 187,
   "Snippet": "}\n\n// Expected format: deepen \u003cn\u003e / deepen-since \u003cul\u003e / deepen-not \u003cref\u003e\nfunc (d *ulReqDecoder) decodeDeepen() stateFn {\n\tif bytes.HasPrefix(d.line, deepenCommits) {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/srvresp.go",
   "Line": 22,
   "Snippet": "\n// Decode decodes the response into the struct, isMultiACK should be true, if\n// the request was done with multi_ack or multi_ack_detailed capabilities.\nfunc (r *ServerResponse) Decode(reader *bufio.Reader, isMultiACK bool) error {\n\t// TODO: implement support for multi_ack or multi_ack_detailed responses"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 363,
   "Snippet": "\t}\n\n\t// The sequence parameters (for YAML_SEQUENCE_NODE).\n\tsequence struct {\n\t\titems_data []yaml_node_item_t    // The stack of sequence items."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 369,
   "Snippet": "\t}\n\n\t// The mapping parameters (for yaml_MAPPING_NODE).\n\tmapping struct {\n\t\tpairs_data  []yaml_node_pair_t   // The stack of mapping pairs (key, value)."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 356,
   "Snippet": "\t// The node data.\n\n\t// The scalar parameters (for yaml_SCALAR_NODE).\n\tscalar struct {\n\t\tvalue  []byte              // The scalar value."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 202,
   "Snippet": "\tstart_mark, end_mark yaml_mark_t\n\n\t// The stream encoding (for yaml_STREAM_START_TOKEN).\n\tencoding yaml_encoding_t\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 212,
   "Snippet": "\tsuffix []byte\n\n\t// The tag directive prefix (for yaml_TAG_DIRECTIVE_TOKEN).\n\tprefix []byte\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 215,
   "Snippet": "\tprefix []byte\n\n\t// The scalar style (for yaml_SCALAR_TOKEN).\n\tstyle yaml_scalar_style_t\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 218,
   "Snippet": "\tstyle yaml_scalar_style_t\n\n\t// The version directive major/minor (for yaml_VERSION_DIRECTIVE_TOKEN).\n\tmajor, minor int8\n}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 209,
   "Snippet": "\tvalue []byte\n\n\t// The tag suffix (for yaml_TAG_TOKEN).\n\tsuffix []byte\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 206,
   "Snippet": "\n\t// The alias/anchor/scalar value or tag/tag directive handle\n\t// (for yaml_ALIAS_TOKEN, yaml_ANCHOR_TOKEN, yaml_SCALAR_TOKEN, yaml_TAG_TOKEN, yaml_TAG_DIRECTIVE_TOKEN).\n\tvalue []byte\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 276,
   "Snippet": "\tencoding yaml_encoding_t\n\n\t// The version directive (for yaml_DOCUMENT_START_EVENT).\n\tversion_directive *yaml_version_directive_t\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 285,
   "Snippet": "\tanchor []byte\n\n\t// The tag (for yaml_SCALAR_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT).\n\ttag []byte\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 279,
   "Snippet": "\tversion_directive *yaml_version_directive_t\n\n\t// The list of tag directives (for yaml_DOCUMENT_START_EVENT).\n\ttag_directives []yaml_tag_directive_t\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 273,
   "Snippet": "\tstart_mark, end_mark yaml_mark_t\n\n\t// The document encoding (for yaml_STREAM_START_EVENT).\n\tencoding yaml_encoding_t\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 298,
   "Snippet": "\tquoted_implicit bool\n\n\t// The style (for yaml_SCALAR_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT).\n\tstyle yaml_style_t\n}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 282,
   "Snippet": "\ttag_directives []yaml_tag_directive_t\n\n\t// The anchor (for yaml_SCALAR_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT, yaml_ALIAS_EVENT).\n\tanchor []byte\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 295,
   "Snippet": "\timplicit bool\n\n\t// Is the tag optional for any non-plain style? (for yaml_SCALAR_EVENT).\n\tquoted_implicit bool\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 288,
   "Snippet": "\ttag []byte\n\n\t// The scalar value (for yaml_SCALAR_EVENT).\n\tvalue []byte\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/yamlh.go",
   "Line": 292,
   "Snippet": "\n\t// Is the document start/end indicator implicit, or the tag optional?\n\t// (for yaml_DOCUMENT_START_EVENT, yaml_DOCUMENT_END_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT, yaml_SCALAR_EVENT).\n\timplicit bool\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/yaml.v2/encode.go",
   "Line": 21,
   "Snippet": "\tout     []byte\n\tflow    bool\n\t// doneInit holds whether the initial stream_start_event has been\n\t// emitted.\n\tdoneInit bool"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/fsnotify/fsnotify/inotify.go",
   "Line": 166,
   "Snippet": "\ntype watch struct {\n\twd    uint32 // Watch descriptor (as returned by the inotify_add_watch() syscall)\n\tflags uint32 // inotify flags of this watch (see inotify(7) for the list of valid flags)\n}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_darwin.go",
   "Line": 57,
   "Snippet": "\n\t// NOTE(rsc): It seems strange to set the buffer to have\n\t// size CTL_MAXNAME+2 but use only CTL_MAXNAME\n\t// as the size. I don't know why the +2 is here, but the\n\t// kernel uses +2 for its own implementation of this function."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
   "Line": 37,
   "Snippet": "\n\t// NOTE(rsc): It seems strange to set the buffer to have\n\t// size CTL_MAXNAME+2 but use only CTL_MAXNAME\n\t// as the size. I don't know why the +2 is here, but the\n\t// kernel uses +2 for its own implementation of this function."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 680,
   "Snippet": "\t// CID and Port specify a context ID and port address for a VM socket.\n\t// Guests have a unique CID, and hosts may have a well-known CID of:\n\t//  - VMADDR_CID_HYPERVISOR: refers to the hypervisor process.\n\t//  - VMADDR_CID_HOST: refers to other processes on the host.\n\tCID  uint32"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_linux.go",
   "Line": 681,
   "Snippet": "\t// Guests have a unique CID, and hosts may have a well-known CID of:\n\t//  - VMADDR_CID_HYPERVISOR: refers to the hypervisor process.\n\t//  - VMADDR_CID_HOST: refers to other processes on the host.\n\tCID  uint32\n\tPort uint32"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/sys/unix/syscall_freebsd.go",
   "Line": 37,
   "Snippet": "\n\t// NOTE(rsc): It seems strange to set the buffer to have\n\t// size CTL_MAXNAME+2 but use only CTL_MAXNAME\n\t// as the size. I don't know why the +2 is here, but the\n\t// kernel uses +2 for its own implementation of this function."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/openpgp/keys.go",
   "Line": 37,
   "Snippet": "// assertions by other entities about that claim.\ntype Identity struct {\n\tName          string // by convention, has the form \"Full Name (comment) \u003cemail@example.com\u003e\"\n\tUserId        *packet.UserId\n\tSelfSignature *packet.Signature"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/ssh/keys.go",
   "Line": 627,
   "Snippet": "\n\t// Per RFC 5656, section 3.1.2,\n\t// The ecdsa_signature_blob value has the following specific encoding:\n\t//    mpint    r\n\t//    mpint    s"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/capability/capability.go",
   "Line": 54,
   "Snippet": "\tMultiACKDetailed Capability = \"multi_ack_detailed\"\n\t// NoDone should only be used with the smart HTTP protocol. If\n\t// multi_ack_detailed and no-done are both present, then the sender is\n\t// free to immediately send a pack following its first \"ACK obj-id ready\"\n\t// message."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/capability/capability.go",
   "Line": 147,
   "Snippet": "\t// protocol so the client can request shallow clones that are cut at a\n\t// specific revision, instead of depth. Internally it's equivalent of\n\t// doing \"rev-list --not \u003crev\u003e\" on the server side. \"deepen-not\"\n\t// cannot be used with \"deepen\", but can be used with \"deepen-since\".\n\tDeepenNot Capability = \"deepen-not\""
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/capability/capability.go",
   "Line": 122,
   "Snippet": "\t// OFSDelta server can send, and client understand PACKv2 with delta\n\t// referring to its base by position in pack rather than by an obj-id. That\n\t// is, they can send/read OBJ_OFS_DELTA (aka type 6) in a packfile.\n\tOFSDelta Capability = \"ofs-delta\"\n\t// Agent the server may optionally send this capability to notify the client"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/capability/capability.go",
   "Line": 226,
   "Snippet": "\tAllowReachableSHA1InWant Capability = \"allow-reachable-sha1-in-want\"\n\t// PushCert the receive-pack server that advertises this capability is\n\t// willing to accept a signed push certificate, and asks the \u003cnonce\u003e to be\n\t// included in the push certificate.  A send-pack client MUST NOT\n\t// send a push-cert packet unless the receive-pack server advertises"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/capability/capability.go",
   "Line": 95,
   "Snippet": "\t// Either mode indicates that the packfile data will be streamed broken\n\t// up into packets of up to either 1000 bytes in the case of 'side_band',\n\t// or 65520 bytes in the case of 'side_band_64k'. Each packet is made up\n\t// of a leading 4-byte pkt-line length of how much data is in the packet,\n\t// followed by a 1-byte stream code, followed by the actual data."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/protocol/packp/capability/capability.go",
   "Line": 141,
   "Snippet": "\t// protocol so the client can request shallow clones that are cut at a\n\t// specific time, instead of depth. Internally it's equivalent of doing\n\t// \"rev-list --max-age=\u003ctimestamp\u003e\" on the server side. \"deepen-since\"\n\t// cannot be used with \"deepen\".\n\tDeepenSince Capability = \"deepen-since\""
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/s3/api.go",
   "Line": 7665,
   "Snippet": "\tExpires *time.Time `location:\"header\" locationName:\"Expires\" type:\"timestamp\"`\n\n\t// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.\n\tGrantFullControl *string `location:\"header\" locationName:\"x-amz-grant-full-control\" type:\"string\"`\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/s3/api.go",
   "Line": 19551,
   "Snippet": "\t// bucket is versioning-enabled (or versioning is suspended), you can set this\n\t// action to request that Amazon S3 transition noncurrent object versions to\n\t// the STANDARD_IA, ONEZONE_IA or GLACIER storage class at a specific period\n\t// in the object's lifetime.\n\tNoncurrentVersionTransition *NoncurrentVersionTransition `type:\"structure\"`"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/s3/api.go",
   "Line": 19548,
   "Snippet": "\n\t// Container for the transition rule that describes when noncurrent objects\n\t// transition to the STANDARD_IA, ONEZONE_IA or GLACIER storage class. If your\n\t// bucket is versioning-enabled (or versioning is suspended), you can set this\n\t// action to request that Amazon S3 transition noncurrent object versions to"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/s3/api.go",
   "Line": 18281,
   "Snippet": "\tExpires *time.Time `location:\"header\" locationName:\"Expires\" type:\"timestamp\"`\n\n\t// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.\n\tGrantFullControl *string `location:\"header\" locationName:\"x-amz-grant-full-control\" type:\"string\"`\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/s3/api.go",
   "Line": 8330,
   "Snippet": "\tExpires *time.Time `location:\"header\" locationName:\"Expires\" type:\"timestamp\"`\n\n\t// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.\n\tGrantFullControl *string `location:\"header\" locationName:\"x-amz-grant-full-control\" type:\"string\"`\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1629,
   "Snippet": "\t// use the passed policy to grant permissions that are in excess of those allowed\n\t// by the access policy of the role that is being assumed. For more information,\n\t// see Permissions for AssumeRoleWithWebIdentity (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html)\n\t// in the IAM User Guide.\n\t//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1606,
   "Snippet": "\t// duration to 6 hours, your operation fails. To learn how to view the maximum\n\t// value for your role, see View the Maximum Session Duration Setting for a\n\t// Role (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session)\n\t// in the IAM User Guide.\n\t//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1616,
   "Snippet": "\t// parameter that specifies the maximum length of the console session. For more\n\t// information, see Creating a URL that Enables Federated Users to Access the\n\t// AWS Management Console (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html)\n\t// in the IAM User Guide.\n\tDurationSeconds *int64 `min:\"900\" type:\"integer\"`"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1104,
   "Snippet": "\t// parameter that specifies the maximum length of the console session. For more\n\t// information, see Creating a URL that Enables Federated Users to Access the\n\t// AWS Management Console (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html)\n\t// in the IAM User Guide.\n\tDurationSeconds *int64 `min:\"900\" type:\"integer\"`"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1094,
   "Snippet": "\t// duration to 6 hours, your operation fails. To learn how to view the maximum\n\t// value for your role, see View the Maximum Session Duration Setting for a\n\t// Role (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session)\n\t// in the IAM User Guide.\n\t//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1133,
   "Snippet": "\t// of those allowed by the access policy of the role that is being assumed.\n\t// For more information, see Permissions for AssumeRole, AssumeRoleWithSAML,\n\t// and AssumeRoleWithWebIdentity (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html)\n\t// in the IAM User Guide.\n\t//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1115,
   "Snippet": "\t// ID is useful in order to help third parties bind a role to the customer who\n\t// created it. For more information about the external ID, see How to Use an\n\t// External ID When Granting Access to Your AWS Resources to a Third Party (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html)\n\t// in the IAM User Guide.\n\t//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 2179,
   "Snippet": "\t//\n\t// For more information about how permissions work, see Permissions for GetFederationToken\n\t// (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_getfederationtoken.html).\n\tPolicy *string `min:\"1\" type:\"string\"`\n}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 2094,
   "Snippet": "\t// The unique identifier of the calling entity. The exact value depends on the\n\t// type of entity making the call. The values returned are those listed in the\n\t// aws:userid column in the Principal table (http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_variables.html#principaltable)\n\t// found on the Policy Variables reference page in the IAM User Guide.\n\tUserId *string `type:\"string\"`"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1349,
   "Snippet": "\t// session duration to 6 hours, your operation fails. To learn how to view the\n\t// maximum value for your role, see View the Maximum Session Duration Setting\n\t// for a Role (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session)\n\t// in the IAM User Guide.\n\t//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1359,
   "Snippet": "\t// parameter that specifies the maximum length of the console session. For more\n\t// information, see Creating a URL that Enables Federated Users to Access the\n\t// AWS Management Console (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html)\n\t// in the IAM User Guide.\n\tDurationSeconds *int64 `min:\"900\" type:\"integer\"`"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/service/sts/api.go",
   "Line": 1373,
   "Snippet": "\t// by the access policy of the role that is being assumed. For more information,\n\t// Permissions for AssumeRole, AssumeRoleWithSAML, and AssumeRoleWithWebIdentity\n\t// (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html)\n\t// in the IAM User Guide.\n\t//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 154,
   "Snippet": "\t// Overrides the config profile the Session should be created from. If not\n\t// set the value of the environment variable will be loaded (AWS_PROFILE,\n\t// or AWS_DEFAULT_PROFILE if the Shared Config is enabled).\n\t//\n\t// If not set and environment variables are not set the \"default\""
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 163,
   "Snippet": "\t// Instructs how the Session will be created based on the AWS_SDK_LOAD_CONFIG\n\t// environment variable. By default a Session will be created using the\n\t// value provided by the AWS_SDK_LOAD_CONFIG environment variable.\n\t//\n\t// Setting this value to SharedConfigEnable or SharedConfigDisable"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 166,
   "Snippet": "\t//\n\t// Setting this value to SharedConfigEnable or SharedConfigDisable\n\t// will allow you to override the AWS_SDK_LOAD_CONFIG environment variable\n\t// and enable or disable the shared config functionality.\n\tSharedConfigState SharedConfigState"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 161,
   "Snippet": "\tProfile string\n\n\t// Instructs how the Session will be created based on the AWS_SDK_LOAD_CONFIG\n\t// environment variable. By default a Session will be created using the\n\t// value provided by the AWS_SDK_LOAD_CONFIG environment variable."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 206,
   "Snippet": "\t// The Session option CustomCABundle is also available when creating sessions\n\t// to also enable this feature. CustomCABundle session option field has priority\n\t// over the AWS_CA_BUNDLE environment variable, and will be used if both are set.\n\tCustomCABundle io.Reader\n}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/session.go",
   "Line": 171,
   "Snippet": "\n\t// Ordered list of files the session will load configuration from.\n\t// It will override environment variable AWS_SHARED_CREDENTIALS_FILE, AWS_CONFIG_FILE.\n\tSharedConfigFiles []string\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/shared_config.go",
   "Line": 51,
   "Snippet": "\t//\n\t//\taws_access_key_id\n\t//\taws_secret_access_key\n\t//\taws_session_token\n\tCreds credentials.Value"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/shared_config.go",
   "Line": 52,
   "Snippet": "\t//\taws_access_key_id\n\t//\taws_secret_access_key\n\t//\taws_session_token\n\tCreds credentials.Value\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/shared_config.go",
   "Line": 47,
   "Snippet": "\t// and aws_secret_access_key must be provided together in the same file\n\t// to be considered valid. The values will be ignored if not a complete group.\n\t// aws_session_token is an optional field that can be provided if both of the\n\t// other two fields are also provided.\n\t//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/shared_config.go",
   "Line": 44,
   "Snippet": "// sharedConfig represents the configuration fields of the SDK config files.\ntype sharedConfig struct {\n\t// Credentials values from the config file. Both aws_access_key_id\n\t// and aws_secret_access_key must be provided together in the same file\n\t// to be considered valid. The values will be ignored if not a complete group."
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/shared_config.go",
   "Line": 45,
   "Snippet": "type sharedConfig struct {\n\t// Credentials values from the config file. Both aws_access_key_id\n\t// and aws_secret_access_key must be provided together in the same file\n\t// to be considered valid. The values will be ignored if not a complete group.\n\t// aws_session_token is an optional field that can be provided if both of the"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/shared_config.go",
   "Line": 50,
   "Snippet": "\t// other two fields are also provided.\n\t//\n\t//\taws_access_key_id\n\t//\taws_secret_access_key\n\t//\taws_session_token"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 97,
   "Snippet": "\t// when creating the session. Not the service client.\n\t//\n\t//  AWS_CA_BUNDLE=$HOME/my_custom_ca_bundle\n\tCustomCABundle string\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 43,
   "Snippet": "\t//\t# AWS_DEFAULT_REGION is only read if AWS_SDK_LOAD_CONFIG is also set,\n\t//\t# and AWS_REGION is not also set.\n\t//\tAWS_DEFAULT_REGION=us-east-1\n\tRegion string\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 41,
   "Snippet": "\t//\tAWS_REGION=us-east-1\n\t//\n\t//\t# AWS_DEFAULT_REGION is only read if AWS_SDK_LOAD_CONFIG is also set,\n\t//\t# and AWS_REGION is not also set.\n\t//\tAWS_DEFAULT_REGION=us-east-1"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 28,
   "Snippet": "\t//\n\t//\t# Secret Access Key\n\t//\tAWS_SECRET_ACCESS_KEY=SECRET\n\t//\tAWS_SECRET_KEY=SECRET=SECRET # only read if AWS_SECRET_ACCESS_KEY is not set.\n\t//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 32,
   "Snippet": "\t//\n\t//\t# Session Token\n\t//\tAWS_SESSION_TOKEN=TOKEN\n\tCreds credentials.Value\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 25,
   "Snippet": "\t//\t# Access Key ID\n\t//\tAWS_ACCESS_KEY_ID=AKID\n\t//\tAWS_ACCESS_KEY=AKID # only read if AWS_ACCESS_KEY_ID is not set.\n\t//\n\t//\t# Secret Access Key"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 29,
   "Snippet": "\t//\t# Secret Access Key\n\t//\tAWS_SECRET_ACCESS_KEY=SECRET\n\t//\tAWS_SECRET_KEY=SECRET=SECRET # only read if AWS_SECRET_ACCESS_KEY is not set.\n\t//\n\t//\t# Session Token"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 24,
   "Snippet": "\t//\n\t//\t# Access Key ID\n\t//\tAWS_ACCESS_KEY_ID=AKID\n\t//\tAWS_ACCESS_KEY=AKID # only read if AWS_ACCESS_KEY_ID is not set.\n\t//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 63,
   "Snippet": "\t// env values as well.\n\t//\n\t//\tAWS_SDK_LOAD_CONFIG=1\n\tEnableSharedConfig bool\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 60,
   "Snippet": "\t// shared credentials. This also expands the configuration loaded from the shared\n\t// credentials to have parity with the shared config file. This also enables\n\t// Region and Profile support for the AWS_DEFAULT_REGION and AWS_DEFAULT_PROFILE\n\t// env values as well.\n\t//"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 79,
   "Snippet": "\t// %USERPROFILE%\\.aws\\config on Windows.\n\t//\n\t//\tAWS_CONFIG_FILE=$HOME/my_shared_config\n\tSharedConfigFile string\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 71,
   "Snippet": "\t// %USERPROFILE%\\.aws\\credentials on Windows.\n\t//\n\t//\tAWS_SHARED_CREDENTIALS_FILE=$HOME/my_shared_credentials\n\tSharedCredentialsFile string\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 52,
   "Snippet": "\t//\tAWS_PROFILE=my_profile\n\t//\n\t//\t# AWS_DEFAULT_PROFILE is only read if AWS_SDK_LOAD_CONFIG is also set,\n\t//\t# and AWS_PROFILE is not also set.\n\t//\tAWS_DEFAULT_PROFILE=my_profile"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 54,
   "Snippet": "\t//\t# AWS_DEFAULT_PROFILE is only read if AWS_SDK_LOAD_CONFIG is also set,\n\t//\t# and AWS_PROFILE is not also set.\n\t//\tAWS_DEFAULT_PROFILE=my_profile\n\tProfile string\n"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/session/env_config.go",
   "Line": 50,
   "Snippet": "\t// profile name.\n\t//\n\t//\tAWS_PROFILE=my_profile\n\t//\n\t//\t# AWS_DEFAULT_PROFILE is only read if AWS_SDK_LOAD_CONFIG is also set,"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/aws/aws-sdk-go/aws/credentials/shared_credentials_provider.go",
   "Line": 28,
   "Snippet": "\t// Path to the shared credentials file.\n\t//\n\t// If empty will look for \"AWS_SHARED_CREDENTIALS_FILE\" env variable. If the\n\t// env value is empty will default to current user's home directory.\n\t// Linux/OSX: \"$HOME/.aws/credentials\""
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/text/unicode/cldr/makexml.go",
   "Line": 85,
   "Snippet": "\tskipElem    []string // hard-coded or deprecated elements\n\tskipAttr    []string // attributes to exclude\n\tpredefined  []string // hard-coded elements exist of the form \u003cname\u003eElem\n\tforceRepeat []string // elements to make slices despite DTD\n}"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/golang.org/x/crypto/openpgp/packet/userid.go",
   "Line": 17,
   "Snippet": "// takes the form \"Full Name (Comment) \u003cemail@example.com\u003e\"\ntype UserId struct {\n\tId string // By convention, this takes the form \"Full Name (Comment) \u003cemail@example.com\u003e\" which is split out in the fields below.\n\n\tName, Comment, Email string"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/gopkg.in/src-d/go-git.v4/plumbing/format/index/index.go",
   "Line": 143,
   "Snippet": "\tStage Stage\n\t// SkipWorktree used in sparse checkouts\n\t// https://git-scm.com/docs/git-read-tree#_sparse_checkout\n\tSkipWorktree bool\n\t// IntentToAdd record only the fact that the path will be added later"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/sergi/go-diff/diffmatchpatch/diff.go",
   "Line": 936,
   "Snippet": "\t\t\t// \u003cins\u003eA\u003c/ins\u003e\u003cdel\u003eB\u003c/del\u003eX\u003cins\u003eC\u003c/ins\u003e\n\t\t\t// \u003cins\u003eA\u003c/del\u003eX\u003cins\u003eC\u003c/ins\u003e\u003cdel\u003eD\u003c/del\u003e\n\t\t\t// \u003cins\u003eA\u003c/ins\u003e\u003cdel\u003eB\u003c/del\u003eX\u003cdel\u003eC\u003c/del\u003e\n\t\t\tvar sumPres int\n\t\t\tif preIns {"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/sergi/go-diff/diffmatchpatch/diff.go",
   "Line": 934,
   "Snippet": "\t\t\t// \u003cins\u003eA\u003c/ins\u003e\u003cdel\u003eB\u003c/del\u003eXY\u003cins\u003eC\u003c/ins\u003e\u003cdel\u003eD\u003c/del\u003e\n\t\t\t// \u003cins\u003eA\u003c/ins\u003eX\u003cins\u003eC\u003c/ins\u003e\u003cdel\u003eD\u003c/del\u003e\n\t\t\t// \u003cins\u003eA\u003c/ins\u003e\u003cdel\u003eB\u003c/del\u003eX\u003cins\u003eC\u003c/ins\u003e\n\t\t\t// \u003cins\u003eA\u003c/del\u003eX\u003cins\u003eC\u003c/ins\u003e\u003cdel\u003eD\u003c/del\u003e\n\t\t\t// \u003cins\u003eA\u003c/ins\u003e\u003cdel\u003eB\u003c/del\u003eX\u003cdel\u003eC\u003c/del\u003e"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/sergi/go-diff/diffmatchpatch/diff.go",
   "Line": 933,
   "Snippet": "\t\t\t// Five types to be split:\n\t\t\t// \u003cins\u003eA\u003c/ins\u003e\u003cdel\u003eB\u003c/del\u003eXY\u003cins\u003eC\u003c/ins\u003e\u003cdel\u003eD\u003c/del\u003e\n\t\t\t// \u003cins\u003eA\u003c/ins\u003eX\u003cins\u003eC\u003c/ins\u003e\u003cdel\u003eD\u003c/del\u003e\n\t\t\t// \u003cins\u003eA\u003c/ins\u003e\u003cdel\u003eB\u003c/del\u003eX\u003cins\u003eC\u003c/ins\u003e\n\t\t\t// \u003cins\u003eA\u003c/del\u003eX\u003cins\u003eC\u003c/ins\u003e\u003cdel\u003eD\u003c/del\u003e"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/sergi/go-diff/diffmatchpatch/diff.go",
   "Line": 935,
   "Snippet": "\t\t\t// \u003cins\u003eA\u003c/ins\u003eX\u003cins\u003eC\u003c/ins\u003e\u003cdel\u003eD\u003c/del\u003e\n\t\t\t// \u003cins\u003eA\u003c/ins\u003e\u003cdel\u003eB\u003c/del\u003eX\u003cins\u003eC\u003c/ins\u003e\n\t\t\t// \u003cins\u003eA\u003c/del\u003eX\u003cins\u003eC\u003c/ins\u003e\u003cdel\u003eD\u003c/del\u003e\n\t\t\t// \u003cins\u003eA\u003c/ins\u003e\u003cdel\u003eB\u003c/del\u003eX\u003cdel\u003eC\u003c/del\u003e\n\t\t\tvar sumPres int"
  },
  {
   "Comment": "The comments are uninterpreted plain text, so HTML and other \nannotations such as _this_ and \u003cthis\u003e will reproduce verbatim and should not be used.\n",
   "Filename": "vendor/github.com/sergi/go-diff/diffmatchpatch/diff.go",
   "Line": 932,
   "Snippet": "\n\t\t\t// Five types to be split:\n\t\t\t// \u003cins\u003eA\u003c/ins\u003e\u003cdel\u003eB\u003c/del\u003eXY\u003cins\u003eC\u003c/ins\u003e\u003cdel\u003eD\u003c/del\u003e\n\t\t\t// \u003cins\u003eA\u003c/ins\u003eX\u003cins\u003eC\u003c/ins\u003e\u003cdel\u003eD\u003c/del\u003e\n\t\t\t// \u003cins\u003eA\u003c/ins\u003e\u003cdel\u003eB\u003c/del\u003eX\u003cins\u003eC\u003c/ins\u003e"
  }
 ]